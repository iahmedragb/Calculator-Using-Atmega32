
Fully_Functional_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000067d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000196  00800060  000067d8  0000686c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  008001f6  008001f6  00006a02  2**0
                  ALLOC
  3 .stab         000069b4  00000000  00000000  00006a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002aa6  00000000  00000000  0000d3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000fe5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020e  00000000  00000000  0001001e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268b  00000000  00000000  0001022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d1  00000000  00000000  000128b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012ab  00000000  00000000  00013d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00015034  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fb  00000000  00000000  00015214  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0a  00000000  00000000  0001550f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015f19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__vector_1>
       8:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__vector_2>
       c:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f7 e6       	ldi	r31, 0x67	; 103
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 31       	cpi	r26, 0x16	; 22
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <main>
      8a:	0c 94 ea 33 	jmp	0x67d4	; 0x67d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 33 	jmp	0x6766	; 0x6766 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 33 	jmp	0x679e	; 0x679e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 33 	jmp	0x677e	; 0x677e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 33 	jmp	0x67b6	; 0x67b6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 33 	jmp	0x677e	; 0x677e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 33 	jmp	0x67b6	; 0x67b6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 33 	jmp	0x6766	; 0x6766 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 33 	jmp	0x679e	; 0x679e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bb 33 	jmp	0x6776	; 0x6776 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e8       	ldi	r22, 0x80	; 128
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d7 33 	jmp	0x67ae	; 0x67ae <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 bf 33 	jmp	0x677e	; 0x677e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 db 33 	jmp	0x67b6	; 0x67b6 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 bf 33 	jmp	0x677e	; 0x677e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 db 33 	jmp	0x67b6	; 0x67b6 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 bf 33 	jmp	0x677e	; 0x677e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 db 33 	jmp	0x67b6	; 0x67b6 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bf 33 	jmp	0x677e	; 0x677e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 db 33 	jmp	0x67b6	; 0x67b6 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 bc 33 	jmp	0x6778	; 0x6778 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 37 05 	call	0xa6e	; 0xa6e <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 d8 33 	jmp	0x67b0	; 0x67b0 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 c3 33 	jmp	0x6786	; 0x6786 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 df 33 	jmp	0x67be	; 0x67be <__epilogue_restores__+0x20>

00000a6e <__clzsi2>:
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	7b 01       	movw	r14, r22
     a78:	8c 01       	movw	r16, r24
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	e8 16       	cp	r14, r24
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	f8 06       	cpc	r15, r24
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	08 07       	cpc	r16, r24
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	18 07       	cpc	r17, r24
     a8a:	88 f4       	brcc	.+34     	; 0xaae <__clzsi2+0x40>
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	e8 16       	cp	r14, r24
     a90:	f1 04       	cpc	r15, r1
     a92:	01 05       	cpc	r16, r1
     a94:	11 05       	cpc	r17, r1
     a96:	31 f0       	breq	.+12     	; 0xaa4 <__clzsi2+0x36>
     a98:	28 f0       	brcs	.+10     	; 0xaa4 <__clzsi2+0x36>
     a9a:	88 e0       	ldi	r24, 0x08	; 8
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	17 c0       	rjmp	.+46     	; 0xad2 <__clzsi2+0x64>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	a0 e0       	ldi	r26, 0x00	; 0
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	12 c0       	rjmp	.+36     	; 0xad2 <__clzsi2+0x64>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	e8 16       	cp	r14, r24
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	f8 06       	cpc	r15, r24
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	08 07       	cpc	r16, r24
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	18 07       	cpc	r17, r24
     abe:	28 f0       	brcs	.+10     	; 0xaca <__clzsi2+0x5c>
     ac0:	88 e1       	ldi	r24, 0x18	; 24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__clzsi2+0x64>
     aca:	80 e1       	ldi	r24, 0x10	; 16
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	20 e2       	ldi	r18, 0x20	; 32
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	28 1b       	sub	r18, r24
     adc:	39 0b       	sbc	r19, r25
     ade:	4a 0b       	sbc	r20, r26
     ae0:	5b 0b       	sbc	r21, r27
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__clzsi2+0x7e>
     ae4:	16 95       	lsr	r17
     ae6:	07 95       	ror	r16
     ae8:	f7 94       	ror	r15
     aea:	e7 94       	ror	r14
     aec:	8a 95       	dec	r24
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__clzsi2+0x76>
     af0:	f7 01       	movw	r30, r14
     af2:	e8 57       	subi	r30, 0x78	; 120
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	80 81       	ld	r24, Z
     af8:	28 1b       	sub	r18, r24
     afa:	31 09       	sbc	r19, r1
     afc:	41 09       	sbc	r20, r1
     afe:	51 09       	sbc	r21, r1
     b00:	c9 01       	movw	r24, r18
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	08 95       	ret

00000b0c <__pack_f>:
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	fc 01       	movw	r30, r24
     b18:	e4 80       	ldd	r14, Z+4	; 0x04
     b1a:	f5 80       	ldd	r15, Z+5	; 0x05
     b1c:	06 81       	ldd	r16, Z+6	; 0x06
     b1e:	17 81       	ldd	r17, Z+7	; 0x07
     b20:	d1 80       	ldd	r13, Z+1	; 0x01
     b22:	80 81       	ld	r24, Z
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	48 f4       	brcc	.+18     	; 0xb3a <__pack_f+0x2e>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e1       	ldi	r26, 0x10	; 16
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e8 2a       	or	r14, r24
     b32:	f9 2a       	or	r15, r25
     b34:	0a 2b       	or	r16, r26
     b36:	1b 2b       	or	r17, r27
     b38:	a5 c0       	rjmp	.+330    	; 0xc84 <__pack_f+0x178>
     b3a:	84 30       	cpi	r24, 0x04	; 4
     b3c:	09 f4       	brne	.+2      	; 0xb40 <__pack_f+0x34>
     b3e:	9f c0       	rjmp	.+318    	; 0xc7e <__pack_f+0x172>
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	21 f4       	brne	.+8      	; 0xb4c <__pack_f+0x40>
     b44:	ee 24       	eor	r14, r14
     b46:	ff 24       	eor	r15, r15
     b48:	87 01       	movw	r16, r14
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <__pack_f+0x4a>
     b4c:	e1 14       	cp	r14, r1
     b4e:	f1 04       	cpc	r15, r1
     b50:	01 05       	cpc	r16, r1
     b52:	11 05       	cpc	r17, r1
     b54:	19 f4       	brne	.+6      	; 0xb5c <__pack_f+0x50>
     b56:	e0 e0       	ldi	r30, 0x00	; 0
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	96 c0       	rjmp	.+300    	; 0xc88 <__pack_f+0x17c>
     b5c:	62 81       	ldd	r22, Z+2	; 0x02
     b5e:	73 81       	ldd	r23, Z+3	; 0x03
     b60:	9f ef       	ldi	r25, 0xFF	; 255
     b62:	62 38       	cpi	r22, 0x82	; 130
     b64:	79 07       	cpc	r23, r25
     b66:	0c f0       	brlt	.+2      	; 0xb6a <__pack_f+0x5e>
     b68:	5b c0       	rjmp	.+182    	; 0xc20 <__pack_f+0x114>
     b6a:	22 e8       	ldi	r18, 0x82	; 130
     b6c:	3f ef       	ldi	r19, 0xFF	; 255
     b6e:	26 1b       	sub	r18, r22
     b70:	37 0b       	sbc	r19, r23
     b72:	2a 31       	cpi	r18, 0x1A	; 26
     b74:	31 05       	cpc	r19, r1
     b76:	2c f0       	brlt	.+10     	; 0xb82 <__pack_f+0x76>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	2a c0       	rjmp	.+84     	; 0xbd6 <__pack_f+0xca>
     b82:	b8 01       	movw	r22, r16
     b84:	a7 01       	movw	r20, r14
     b86:	02 2e       	mov	r0, r18
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x86>
     b8a:	76 95       	lsr	r23
     b8c:	67 95       	ror	r22
     b8e:	57 95       	ror	r21
     b90:	47 95       	ror	r20
     b92:	0a 94       	dec	r0
     b94:	d2 f7       	brpl	.-12     	; 0xb8a <__pack_f+0x7e>
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	04 c0       	rjmp	.+8      	; 0xba8 <__pack_f+0x9c>
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	aa 1f       	adc	r26, r26
     ba6:	bb 1f       	adc	r27, r27
     ba8:	2a 95       	dec	r18
     baa:	d2 f7       	brpl	.-12     	; 0xba0 <__pack_f+0x94>
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	a1 09       	sbc	r26, r1
     bb0:	b1 09       	sbc	r27, r1
     bb2:	8e 21       	and	r24, r14
     bb4:	9f 21       	and	r25, r15
     bb6:	a0 23       	and	r26, r16
     bb8:	b1 23       	and	r27, r17
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	21 f0       	breq	.+8      	; 0xbca <__pack_f+0xbe>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	9a 01       	movw	r18, r20
     bcc:	ab 01       	movw	r20, r22
     bce:	28 2b       	or	r18, r24
     bd0:	39 2b       	or	r19, r25
     bd2:	4a 2b       	or	r20, r26
     bd4:	5b 2b       	or	r21, r27
     bd6:	da 01       	movw	r26, r20
     bd8:	c9 01       	movw	r24, r18
     bda:	8f 77       	andi	r24, 0x7F	; 127
     bdc:	90 70       	andi	r25, 0x00	; 0
     bde:	a0 70       	andi	r26, 0x00	; 0
     be0:	b0 70       	andi	r27, 0x00	; 0
     be2:	80 34       	cpi	r24, 0x40	; 64
     be4:	91 05       	cpc	r25, r1
     be6:	a1 05       	cpc	r26, r1
     be8:	b1 05       	cpc	r27, r1
     bea:	39 f4       	brne	.+14     	; 0xbfa <__pack_f+0xee>
     bec:	27 ff       	sbrs	r18, 7
     bee:	09 c0       	rjmp	.+18     	; 0xc02 <__pack_f+0xf6>
     bf0:	20 5c       	subi	r18, 0xC0	; 192
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	4f 4f       	sbci	r20, 0xFF	; 255
     bf6:	5f 4f       	sbci	r21, 0xFF	; 255
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <__pack_f+0xf6>
     bfa:	21 5c       	subi	r18, 0xC1	; 193
     bfc:	3f 4f       	sbci	r19, 0xFF	; 255
     bfe:	4f 4f       	sbci	r20, 0xFF	; 255
     c00:	5f 4f       	sbci	r21, 0xFF	; 255
     c02:	e0 e0       	ldi	r30, 0x00	; 0
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	20 30       	cpi	r18, 0x00	; 0
     c08:	a0 e0       	ldi	r26, 0x00	; 0
     c0a:	3a 07       	cpc	r19, r26
     c0c:	a0 e0       	ldi	r26, 0x00	; 0
     c0e:	4a 07       	cpc	r20, r26
     c10:	a0 e4       	ldi	r26, 0x40	; 64
     c12:	5a 07       	cpc	r21, r26
     c14:	10 f0       	brcs	.+4      	; 0xc1a <__pack_f+0x10e>
     c16:	e1 e0       	ldi	r30, 0x01	; 1
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	79 01       	movw	r14, r18
     c1c:	8a 01       	movw	r16, r20
     c1e:	27 c0       	rjmp	.+78     	; 0xc6e <__pack_f+0x162>
     c20:	60 38       	cpi	r22, 0x80	; 128
     c22:	71 05       	cpc	r23, r1
     c24:	64 f5       	brge	.+88     	; 0xc7e <__pack_f+0x172>
     c26:	fb 01       	movw	r30, r22
     c28:	e1 58       	subi	r30, 0x81	; 129
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	d8 01       	movw	r26, r16
     c2e:	c7 01       	movw	r24, r14
     c30:	8f 77       	andi	r24, 0x7F	; 127
     c32:	90 70       	andi	r25, 0x00	; 0
     c34:	a0 70       	andi	r26, 0x00	; 0
     c36:	b0 70       	andi	r27, 0x00	; 0
     c38:	80 34       	cpi	r24, 0x40	; 64
     c3a:	91 05       	cpc	r25, r1
     c3c:	a1 05       	cpc	r26, r1
     c3e:	b1 05       	cpc	r27, r1
     c40:	39 f4       	brne	.+14     	; 0xc50 <__pack_f+0x144>
     c42:	e7 fe       	sbrs	r14, 7
     c44:	0d c0       	rjmp	.+26     	; 0xc60 <__pack_f+0x154>
     c46:	80 e4       	ldi	r24, 0x40	; 64
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__pack_f+0x14c>
     c50:	8f e3       	ldi	r24, 0x3F	; 63
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e8 0e       	add	r14, r24
     c5a:	f9 1e       	adc	r15, r25
     c5c:	0a 1f       	adc	r16, r26
     c5e:	1b 1f       	adc	r17, r27
     c60:	17 ff       	sbrs	r17, 7
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <__pack_f+0x162>
     c64:	16 95       	lsr	r17
     c66:	07 95       	ror	r16
     c68:	f7 94       	ror	r15
     c6a:	e7 94       	ror	r14
     c6c:	31 96       	adiw	r30, 0x01	; 1
     c6e:	87 e0       	ldi	r24, 0x07	; 7
     c70:	16 95       	lsr	r17
     c72:	07 95       	ror	r16
     c74:	f7 94       	ror	r15
     c76:	e7 94       	ror	r14
     c78:	8a 95       	dec	r24
     c7a:	d1 f7       	brne	.-12     	; 0xc70 <__pack_f+0x164>
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__pack_f+0x17c>
     c7e:	ee 24       	eor	r14, r14
     c80:	ff 24       	eor	r15, r15
     c82:	87 01       	movw	r16, r14
     c84:	ef ef       	ldi	r30, 0xFF	; 255
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	6e 2f       	mov	r22, r30
     c8a:	67 95       	ror	r22
     c8c:	66 27       	eor	r22, r22
     c8e:	67 95       	ror	r22
     c90:	90 2f       	mov	r25, r16
     c92:	9f 77       	andi	r25, 0x7F	; 127
     c94:	d7 94       	ror	r13
     c96:	dd 24       	eor	r13, r13
     c98:	d7 94       	ror	r13
     c9a:	8e 2f       	mov	r24, r30
     c9c:	86 95       	lsr	r24
     c9e:	49 2f       	mov	r20, r25
     ca0:	46 2b       	or	r20, r22
     ca2:	58 2f       	mov	r21, r24
     ca4:	5d 29       	or	r21, r13
     ca6:	b7 01       	movw	r22, r14
     ca8:	ca 01       	movw	r24, r20
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	08 95       	ret

00000cb6 <__unpack_f>:
     cb6:	fc 01       	movw	r30, r24
     cb8:	db 01       	movw	r26, r22
     cba:	40 81       	ld	r20, Z
     cbc:	51 81       	ldd	r21, Z+1	; 0x01
     cbe:	22 81       	ldd	r18, Z+2	; 0x02
     cc0:	62 2f       	mov	r22, r18
     cc2:	6f 77       	andi	r22, 0x7F	; 127
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	22 1f       	adc	r18, r18
     cc8:	22 27       	eor	r18, r18
     cca:	22 1f       	adc	r18, r18
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	89 2f       	mov	r24, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	82 2b       	or	r24, r18
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	99 1f       	adc	r25, r25
     cda:	99 27       	eor	r25, r25
     cdc:	99 1f       	adc	r25, r25
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	9c 93       	st	X, r25
     ce2:	11 97       	sbiw	r26, 0x01	; 1
     ce4:	21 15       	cp	r18, r1
     ce6:	31 05       	cpc	r19, r1
     ce8:	a9 f5       	brne	.+106    	; 0xd54 <__unpack_f+0x9e>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <__unpack_f+0x42>
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	37 c0       	rjmp	.+110    	; 0xd66 <__unpack_f+0xb0>
     cf8:	82 e8       	ldi	r24, 0x82	; 130
     cfa:	9f ef       	ldi	r25, 0xFF	; 255
     cfc:	13 96       	adiw	r26, 0x03	; 3
     cfe:	9c 93       	st	X, r25
     d00:	8e 93       	st	-X, r24
     d02:	12 97       	sbiw	r26, 0x02	; 2
     d04:	9a 01       	movw	r18, r20
     d06:	ab 01       	movw	r20, r22
     d08:	67 e0       	ldi	r22, 0x07	; 7
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	44 1f       	adc	r20, r20
     d10:	55 1f       	adc	r21, r21
     d12:	6a 95       	dec	r22
     d14:	d1 f7       	brne	.-12     	; 0xd0a <__unpack_f+0x54>
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	8c 93       	st	X, r24
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <__unpack_f+0x80>
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	44 1f       	adc	r20, r20
     d22:	55 1f       	adc	r21, r21
     d24:	12 96       	adiw	r26, 0x02	; 2
     d26:	8d 91       	ld	r24, X+
     d28:	9c 91       	ld	r25, X
     d2a:	13 97       	sbiw	r26, 0x03	; 3
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	20 30       	cpi	r18, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	38 07       	cpc	r19, r24
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	48 07       	cpc	r20, r24
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	58 07       	cpc	r21, r24
     d44:	58 f3       	brcs	.-42     	; 0xd1c <__unpack_f+0x66>
     d46:	14 96       	adiw	r26, 0x04	; 4
     d48:	2d 93       	st	X+, r18
     d4a:	3d 93       	st	X+, r19
     d4c:	4d 93       	st	X+, r20
     d4e:	5c 93       	st	X, r21
     d50:	17 97       	sbiw	r26, 0x07	; 7
     d52:	08 95       	ret
     d54:	2f 3f       	cpi	r18, 0xFF	; 255
     d56:	31 05       	cpc	r19, r1
     d58:	79 f4       	brne	.+30     	; 0xd78 <__unpack_f+0xc2>
     d5a:	41 15       	cp	r20, r1
     d5c:	51 05       	cpc	r21, r1
     d5e:	61 05       	cpc	r22, r1
     d60:	71 05       	cpc	r23, r1
     d62:	19 f4       	brne	.+6      	; 0xd6a <__unpack_f+0xb4>
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	8c 93       	st	X, r24
     d68:	08 95       	ret
     d6a:	64 ff       	sbrs	r22, 4
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <__unpack_f+0xbe>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	8c 93       	st	X, r24
     d72:	12 c0       	rjmp	.+36     	; 0xd98 <__unpack_f+0xe2>
     d74:	1c 92       	st	X, r1
     d76:	10 c0       	rjmp	.+32     	; 0xd98 <__unpack_f+0xe2>
     d78:	2f 57       	subi	r18, 0x7F	; 127
     d7a:	30 40       	sbci	r19, 0x00	; 0
     d7c:	13 96       	adiw	r26, 0x03	; 3
     d7e:	3c 93       	st	X, r19
     d80:	2e 93       	st	-X, r18
     d82:	12 97       	sbiw	r26, 0x02	; 2
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	8c 93       	st	X, r24
     d88:	87 e0       	ldi	r24, 0x07	; 7
     d8a:	44 0f       	add	r20, r20
     d8c:	55 1f       	adc	r21, r21
     d8e:	66 1f       	adc	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	8a 95       	dec	r24
     d94:	d1 f7       	brne	.-12     	; 0xd8a <__unpack_f+0xd4>
     d96:	70 64       	ori	r23, 0x40	; 64
     d98:	14 96       	adiw	r26, 0x04	; 4
     d9a:	4d 93       	st	X+, r20
     d9c:	5d 93       	st	X+, r21
     d9e:	6d 93       	st	X+, r22
     da0:	7c 93       	st	X, r23
     da2:	17 97       	sbiw	r26, 0x07	; 7
     da4:	08 95       	ret

00000da6 <__fpcmp_parts_f>:
     da6:	1f 93       	push	r17
     da8:	dc 01       	movw	r26, r24
     daa:	fb 01       	movw	r30, r22
     dac:	9c 91       	ld	r25, X
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	08 f4       	brcc	.+2      	; 0xdb4 <__fpcmp_parts_f+0xe>
     db2:	47 c0       	rjmp	.+142    	; 0xe42 <__fpcmp_parts_f+0x9c>
     db4:	80 81       	ld	r24, Z
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	08 f4       	brcc	.+2      	; 0xdbc <__fpcmp_parts_f+0x16>
     dba:	43 c0       	rjmp	.+134    	; 0xe42 <__fpcmp_parts_f+0x9c>
     dbc:	94 30       	cpi	r25, 0x04	; 4
     dbe:	51 f4       	brne	.+20     	; 0xdd4 <__fpcmp_parts_f+0x2e>
     dc0:	11 96       	adiw	r26, 0x01	; 1
     dc2:	1c 91       	ld	r17, X
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	99 f5       	brne	.+102    	; 0xe2e <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	68 2f       	mov	r22, r24
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	61 1b       	sub	r22, r17
     dd0:	71 09       	sbc	r23, r1
     dd2:	3f c0       	rjmp	.+126    	; 0xe52 <__fpcmp_parts_f+0xac>
     dd4:	84 30       	cpi	r24, 0x04	; 4
     dd6:	21 f0       	breq	.+8      	; 0xde0 <__fpcmp_parts_f+0x3a>
     dd8:	92 30       	cpi	r25, 0x02	; 2
     dda:	31 f4       	brne	.+12     	; 0xde8 <__fpcmp_parts_f+0x42>
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	b9 f1       	breq	.+110    	; 0xe4e <__fpcmp_parts_f+0xa8>
     de0:	81 81       	ldd	r24, Z+1	; 0x01
     de2:	88 23       	and	r24, r24
     de4:	89 f1       	breq	.+98     	; 0xe48 <__fpcmp_parts_f+0xa2>
     de6:	2d c0       	rjmp	.+90     	; 0xe42 <__fpcmp_parts_f+0x9c>
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	1c 91       	ld	r17, X
     dec:	11 97       	sbiw	r26, 0x01	; 1
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	f1 f0       	breq	.+60     	; 0xe2e <__fpcmp_parts_f+0x88>
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	18 17       	cp	r17, r24
     df6:	d9 f4       	brne	.+54     	; 0xe2e <__fpcmp_parts_f+0x88>
     df8:	12 96       	adiw	r26, 0x02	; 2
     dfa:	2d 91       	ld	r18, X+
     dfc:	3c 91       	ld	r19, X
     dfe:	13 97       	sbiw	r26, 0x03	; 3
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	94 f0       	brlt	.+36     	; 0xe2e <__fpcmp_parts_f+0x88>
     e0a:	28 17       	cp	r18, r24
     e0c:	39 07       	cpc	r19, r25
     e0e:	bc f0       	brlt	.+46     	; 0xe3e <__fpcmp_parts_f+0x98>
     e10:	14 96       	adiw	r26, 0x04	; 4
     e12:	8d 91       	ld	r24, X+
     e14:	9d 91       	ld	r25, X+
     e16:	0d 90       	ld	r0, X+
     e18:	bc 91       	ld	r27, X
     e1a:	a0 2d       	mov	r26, r0
     e1c:	24 81       	ldd	r18, Z+4	; 0x04
     e1e:	35 81       	ldd	r19, Z+5	; 0x05
     e20:	46 81       	ldd	r20, Z+6	; 0x06
     e22:	57 81       	ldd	r21, Z+7	; 0x07
     e24:	28 17       	cp	r18, r24
     e26:	39 07       	cpc	r19, r25
     e28:	4a 07       	cpc	r20, r26
     e2a:	5b 07       	cpc	r21, r27
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <__fpcmp_parts_f+0x8e>
     e2e:	11 23       	and	r17, r17
     e30:	41 f0       	breq	.+16     	; 0xe42 <__fpcmp_parts_f+0x9c>
     e32:	0a c0       	rjmp	.+20     	; 0xe48 <__fpcmp_parts_f+0xa2>
     e34:	82 17       	cp	r24, r18
     e36:	93 07       	cpc	r25, r19
     e38:	a4 07       	cpc	r26, r20
     e3a:	b5 07       	cpc	r27, r21
     e3c:	40 f4       	brcc	.+16     	; 0xe4e <__fpcmp_parts_f+0xa8>
     e3e:	11 23       	and	r17, r17
     e40:	19 f0       	breq	.+6      	; 0xe48 <__fpcmp_parts_f+0xa2>
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <__fpcmp_parts_f+0xac>
     e48:	6f ef       	ldi	r22, 0xFF	; 255
     e4a:	7f ef       	ldi	r23, 0xFF	; 255
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <__fpcmp_parts_f+0xac>
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	cb 01       	movw	r24, r22
     e54:	1f 91       	pop	r17
     e56:	08 95       	ret

00000e58 <EXTI_enuInit>:
extern u8 EXTI_u8EXTINum;
static void* (*ApFunApp[3])(void*)={NULL,NULL,NULL};
static void* AvpAppParameter[3]={NULL,NULL,NULL};

ES_t EXTI_enuInit(EXTI_t *Copy_pAstrEXTIConfig)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	2c 97       	sbiw	r28, 0x0c	; 12
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	9b 83       	std	Y+3, r25	; 0x03
     e6e:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_pAstrEXTIConfig != NULL)
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	9b 81       	ldd	r25, Y+3	; 0x03
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	09 f4       	brne	.+2      	; 0xe7a <EXTI_enuInit+0x22>
     e78:	55 c2       	rjmp	.+1194   	; 0x1324 <EXTI_enuInit+0x4cc>
	{
		u8 Local_u8Iter;
		for(Local_u8Iter=0; Local_u8Iter < EXTI_u8EXTINum;Local_u8Iter++)
     e7a:	19 82       	std	Y+1, r1	; 0x01
     e7c:	90 91 88 01 	lds	r25, 0x0188
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	89 17       	cp	r24, r25
     e84:	08 f0       	brcs	.+2      	; 0xe88 <EXTI_enuInit+0x30>
     e86:	4c c2       	rjmp	.+1176   	; 0x1320 <EXTI_enuInit+0x4c8>
		{
			if((Copy_pAstrEXTIConfig[Local_u8Iter].INT_Num == INT_0) ||(Copy_pAstrEXTIConfig[Local_u8Iter].INT_Num == INT_1))
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	c9 01       	movw	r24, r18
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	28 0f       	add	r18, r24
     e96:	39 1f       	adc	r19, r25
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	9b 81       	ldd	r25, Y+3	; 0x03
     e9c:	fc 01       	movw	r30, r24
     e9e:	e2 0f       	add	r30, r18
     ea0:	f3 1f       	adc	r31, r19
     ea2:	81 81       	ldd	r24, Z+1	; 0x01
     ea4:	88 23       	and	r24, r24
     ea6:	89 f0       	breq	.+34     	; 0xeca <EXTI_enuInit+0x72>
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	c9 01       	movw	r24, r18
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	28 0f       	add	r18, r24
     eb6:	39 1f       	adc	r19, r25
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	9b 81       	ldd	r25, Y+3	; 0x03
     ebc:	fc 01       	movw	r30, r24
     ebe:	e2 0f       	add	r30, r18
     ec0:	f3 1f       	adc	r31, r19
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	09 f0       	breq	.+2      	; 0xeca <EXTI_enuInit+0x72>
     ec8:	ba c1       	rjmp	.+884    	; 0x123e <EXTI_enuInit+0x3e6>
			{
				CLR_BIT(MCUCR, (Copy_pAstrEXTIConfig[Local_u8Iter].INT_Num )*2);
     eca:	a5 e5       	ldi	r26, 0x55	; 85
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e5 e5       	ldi	r30, 0x55	; 85
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	c9 01       	movw	r24, r18
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	28 0f       	add	r18, r24
     ee4:	39 1f       	adc	r19, r25
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	9b 81       	ldd	r25, Y+3	; 0x03
     eea:	fc 01       	movw	r30, r24
     eec:	e2 0f       	add	r30, r18
     eee:	f3 1f       	adc	r31, r19
     ef0:	81 81       	ldd	r24, Z+1	; 0x01
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	9c 01       	movw	r18, r24
     ef8:	22 0f       	add	r18, r18
     efa:	33 1f       	adc	r19, r19
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <EXTI_enuInit+0xae>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	2a 95       	dec	r18
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <EXTI_enuInit+0xaa>
     f0a:	80 95       	com	r24
     f0c:	84 23       	and	r24, r20
     f0e:	8c 93       	st	X, r24
				CLR_BIT(MCUCR, (((Copy_pAstrEXTIConfig[Local_u8Iter].INT_Num )*2)+1));
     f10:	a5 e5       	ldi	r26, 0x55	; 85
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e5 e5       	ldi	r30, 0x55	; 85
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	c9 01       	movw	r24, r18
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	28 0f       	add	r18, r24
     f2a:	39 1f       	adc	r19, r25
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	9b 81       	ldd	r25, Y+3	; 0x03
     f30:	fc 01       	movw	r30, r24
     f32:	e2 0f       	add	r30, r18
     f34:	f3 1f       	adc	r31, r19
     f36:	81 81       	ldd	r24, Z+1	; 0x01
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	9c 01       	movw	r18, r24
     f42:	2f 5f       	subi	r18, 0xFF	; 255
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <EXTI_enuInit+0xf8>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	2a 95       	dec	r18
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <EXTI_enuInit+0xf4>
     f54:	80 95       	com	r24
     f56:	84 23       	and	r24, r20
     f58:	8c 93       	st	X, r24
				switch(Copy_pAstrEXTIConfig[Local_u8Iter].SenseLvl)
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	c9 01       	movw	r24, r18
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	28 0f       	add	r18, r24
     f68:	39 1f       	adc	r19, r25
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	9b 81       	ldd	r25, Y+3	; 0x03
     f6e:	fc 01       	movw	r30, r24
     f70:	e2 0f       	add	r30, r18
     f72:	f3 1f       	adc	r31, r19
     f74:	80 81       	ld	r24, Z
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	3c 87       	std	Y+12, r19	; 0x0c
     f7c:	2b 87       	std	Y+11, r18	; 0x0b
     f7e:	8b 85       	ldd	r24, Y+11	; 0x0b
     f80:	9c 85       	ldd	r25, Y+12	; 0x0c
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	91 05       	cpc	r25, r1
     f86:	c1 f0       	breq	.+48     	; 0xfb8 <EXTI_enuInit+0x160>
     f88:	2b 85       	ldd	r18, Y+11	; 0x0b
     f8a:	3c 85       	ldd	r19, Y+12	; 0x0c
     f8c:	22 30       	cpi	r18, 0x02	; 2
     f8e:	31 05       	cpc	r19, r1
     f90:	34 f4       	brge	.+12     	; 0xf9e <EXTI_enuInit+0x146>
     f92:	8b 85       	ldd	r24, Y+11	; 0x0b
     f94:	9c 85       	ldd	r25, Y+12	; 0x0c
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	09 f4       	brne	.+2      	; 0xf9c <EXTI_enuInit+0x144>
     f9a:	ea c0       	rjmp	.+468    	; 0x1170 <EXTI_enuInit+0x318>
     f9c:	e7 c0       	rjmp	.+462    	; 0x116c <EXTI_enuInit+0x314>
     f9e:	2b 85       	ldd	r18, Y+11	; 0x0b
     fa0:	3c 85       	ldd	r19, Y+12	; 0x0c
     fa2:	22 30       	cpi	r18, 0x02	; 2
     fa4:	31 05       	cpc	r19, r1
     fa6:	09 f4       	brne	.+2      	; 0xfaa <EXTI_enuInit+0x152>
     fa8:	50 c0       	rjmp	.+160    	; 0x104a <EXTI_enuInit+0x1f2>
     faa:	8b 85       	ldd	r24, Y+11	; 0x0b
     fac:	9c 85       	ldd	r25, Y+12	; 0x0c
     fae:	83 30       	cpi	r24, 0x03	; 3
     fb0:	91 05       	cpc	r25, r1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <EXTI_enuInit+0x15e>
     fb4:	93 c0       	rjmp	.+294    	; 0x10dc <EXTI_enuInit+0x284>
     fb6:	da c0       	rjmp	.+436    	; 0x116c <EXTI_enuInit+0x314>
				{
					
					case LOW_LVL:
					break;
					case ANY_CHANGE:
					SET_BIT(MCUCR, (Copy_pAstrEXTIConfig[Local_u8Iter].INT_Num )*2);
     fb8:	a5 e5       	ldi	r26, 0x55	; 85
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e5 e5       	ldi	r30, 0x55	; 85
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	c9 01       	movw	r24, r18
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	28 0f       	add	r18, r24
     fd2:	39 1f       	adc	r19, r25
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	9b 81       	ldd	r25, Y+3	; 0x03
     fd8:	fc 01       	movw	r30, r24
     fda:	e2 0f       	add	r30, r18
     fdc:	f3 1f       	adc	r31, r19
     fde:	81 81       	ldd	r24, Z+1	; 0x01
     fe0:	88 2f       	mov	r24, r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	9c 01       	movw	r18, r24
     fe6:	22 0f       	add	r18, r18
     fe8:	33 1f       	adc	r19, r19
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <EXTI_enuInit+0x19c>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	2a 95       	dec	r18
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <EXTI_enuInit+0x198>
     ff8:	84 2b       	or	r24, r20
     ffa:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, (((Copy_pAstrEXTIConfig[Local_u8Iter].INT_Num )*2)+1));
     ffc:	a5 e5       	ldi	r26, 0x55	; 85
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e5 e5       	ldi	r30, 0x55	; 85
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	c9 01       	movw	r24, r18
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	28 0f       	add	r18, r24
    1016:	39 1f       	adc	r19, r25
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	9b 81       	ldd	r25, Y+3	; 0x03
    101c:	fc 01       	movw	r30, r24
    101e:	e2 0f       	add	r30, r18
    1020:	f3 1f       	adc	r31, r19
    1022:	81 81       	ldd	r24, Z+1	; 0x01
    1024:	88 2f       	mov	r24, r24
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	9c 01       	movw	r18, r24
    102e:	2f 5f       	subi	r18, 0xFF	; 255
    1030:	3f 4f       	sbci	r19, 0xFF	; 255
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <EXTI_enuInit+0x1e6>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <EXTI_enuInit+0x1e2>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	93 c0       	rjmp	.+294    	; 0x1170 <EXTI_enuInit+0x318>
					break;
					case FALLING_EDGE:
					CLR_BIT(MCUCR, (Copy_pAstrEXTIConfig[Local_u8Iter].INT_Num )*2);
    104a:	a5 e5       	ldi	r26, 0x55	; 85
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e5 e5       	ldi	r30, 0x55	; 85
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	c9 01       	movw	r24, r18
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	28 0f       	add	r18, r24
    1064:	39 1f       	adc	r19, r25
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	9b 81       	ldd	r25, Y+3	; 0x03
    106a:	fc 01       	movw	r30, r24
    106c:	e2 0f       	add	r30, r18
    106e:	f3 1f       	adc	r31, r19
    1070:	81 81       	ldd	r24, Z+1	; 0x01
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9c 01       	movw	r18, r24
    1078:	22 0f       	add	r18, r18
    107a:	33 1f       	adc	r19, r19
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <EXTI_enuInit+0x22e>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	2a 95       	dec	r18
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <EXTI_enuInit+0x22a>
    108a:	80 95       	com	r24
    108c:	84 23       	and	r24, r20
    108e:	8c 93       	st	X, r24
					SET_BIT(MCUCR, (((Copy_pAstrEXTIConfig[Local_u8Iter].INT_Num )*2)+1));
    1090:	a5 e5       	ldi	r26, 0x55	; 85
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e5 e5       	ldi	r30, 0x55	; 85
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	c9 01       	movw	r24, r18
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	28 0f       	add	r18, r24
    10aa:	39 1f       	adc	r19, r25
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	9b 81       	ldd	r25, Y+3	; 0x03
    10b0:	fc 01       	movw	r30, r24
    10b2:	e2 0f       	add	r30, r18
    10b4:	f3 1f       	adc	r31, r19
    10b6:	81 81       	ldd	r24, Z+1	; 0x01
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	9c 01       	movw	r18, r24
    10c2:	2f 5f       	subi	r18, 0xFF	; 255
    10c4:	3f 4f       	sbci	r19, 0xFF	; 255
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <EXTI_enuInit+0x27a>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <EXTI_enuInit+0x276>
    10d6:	84 2b       	or	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	4a c0       	rjmp	.+148    	; 0x1170 <EXTI_enuInit+0x318>
					break;
					case RISING_EDGE:
					SET_BIT(MCUCR, (Copy_pAstrEXTIConfig[Local_u8Iter].INT_Num )*2);
    10dc:	a5 e5       	ldi	r26, 0x55	; 85
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e5 e5       	ldi	r30, 0x55	; 85
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	c9 01       	movw	r24, r18
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	28 0f       	add	r18, r24
    10f6:	39 1f       	adc	r19, r25
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	9b 81       	ldd	r25, Y+3	; 0x03
    10fc:	fc 01       	movw	r30, r24
    10fe:	e2 0f       	add	r30, r18
    1100:	f3 1f       	adc	r31, r19
    1102:	81 81       	ldd	r24, Z+1	; 0x01
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	9c 01       	movw	r18, r24
    110a:	22 0f       	add	r18, r18
    110c:	33 1f       	adc	r19, r19
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <EXTI_enuInit+0x2c0>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	2a 95       	dec	r18
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <EXTI_enuInit+0x2bc>
    111c:	84 2b       	or	r24, r20
    111e:	8c 93       	st	X, r24
					SET_BIT(MCUCR, (((Copy_pAstrEXTIConfig[Local_u8Iter].INT_Num )*2)+1));
    1120:	a5 e5       	ldi	r26, 0x55	; 85
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e5 e5       	ldi	r30, 0x55	; 85
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	c9 01       	movw	r24, r18
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	28 0f       	add	r18, r24
    113a:	39 1f       	adc	r19, r25
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	9b 81       	ldd	r25, Y+3	; 0x03
    1140:	fc 01       	movw	r30, r24
    1142:	e2 0f       	add	r30, r18
    1144:	f3 1f       	adc	r31, r19
    1146:	81 81       	ldd	r24, Z+1	; 0x01
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	9c 01       	movw	r18, r24
    1152:	2f 5f       	subi	r18, 0xFF	; 255
    1154:	3f 4f       	sbci	r19, 0xFF	; 255
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <EXTI_enuInit+0x30a>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <EXTI_enuInit+0x306>
    1166:	84 2b       	or	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <EXTI_enuInit+0x318>
					break;
					default:return ES_NOK;
    116c:	1a 86       	std	Y+10, r1	; 0x0a
    116e:	dc c0       	rjmp	.+440    	; 0x1328 <EXTI_enuInit+0x4d0>
					break;
				}
				switch(Copy_pAstrEXTIConfig[Local_u8Iter].INT_Mode)
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	c9 01       	movw	r24, r18
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	28 0f       	add	r18, r24
    117e:	39 1f       	adc	r19, r25
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	9b 81       	ldd	r25, Y+3	; 0x03
    1184:	fc 01       	movw	r30, r24
    1186:	e2 0f       	add	r30, r18
    1188:	f3 1f       	adc	r31, r19
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	39 87       	std	Y+9, r19	; 0x09
    1192:	28 87       	std	Y+8, r18	; 0x08
    1194:	88 85       	ldd	r24, Y+8	; 0x08
    1196:	99 85       	ldd	r25, Y+9	; 0x09
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	31 f0       	breq	.+12     	; 0x11a8 <EXTI_enuInit+0x350>
    119c:	28 85       	ldd	r18, Y+8	; 0x08
    119e:	39 85       	ldd	r19, Y+9	; 0x09
    11a0:	21 30       	cpi	r18, 0x01	; 1
    11a2:	31 05       	cpc	r19, r1
    11a4:	29 f1       	breq	.+74     	; 0x11f0 <EXTI_enuInit+0x398>
    11a6:	49 c0       	rjmp	.+146    	; 0x123a <EXTI_enuInit+0x3e2>
				{
					
					case ENABLE :
					SET_BIT(GICR, (6+(Copy_pAstrEXTIConfig[Local_u8Iter].INT_Num)));
    11a8:	ab e5       	ldi	r26, 0x5B	; 91
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	eb e5       	ldi	r30, 0x5B	; 91
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	c9 01       	movw	r24, r18
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	28 0f       	add	r18, r24
    11c2:	39 1f       	adc	r19, r25
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	9b 81       	ldd	r25, Y+3	; 0x03
    11c8:	fc 01       	movw	r30, r24
    11ca:	e2 0f       	add	r30, r18
    11cc:	f3 1f       	adc	r31, r19
    11ce:	81 81       	ldd	r24, Z+1	; 0x01
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	9c 01       	movw	r18, r24
    11d6:	2a 5f       	subi	r18, 0xFA	; 250
    11d8:	3f 4f       	sbci	r19, 0xFF	; 255
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <EXTI_enuInit+0x38e>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <EXTI_enuInit+0x38a>
    11ea:	84 2b       	or	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	95 c0       	rjmp	.+298    	; 0x131a <EXTI_enuInit+0x4c2>
					break;
					case DISABLE:
					CLR_BIT(GICR, (6+(Copy_pAstrEXTIConfig[Local_u8Iter].INT_Num)));
    11f0:	ab e5       	ldi	r26, 0x5B	; 91
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	eb e5       	ldi	r30, 0x5B	; 91
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	c9 01       	movw	r24, r18
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	28 0f       	add	r18, r24
    120a:	39 1f       	adc	r19, r25
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	9b 81       	ldd	r25, Y+3	; 0x03
    1210:	fc 01       	movw	r30, r24
    1212:	e2 0f       	add	r30, r18
    1214:	f3 1f       	adc	r31, r19
    1216:	81 81       	ldd	r24, Z+1	; 0x01
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9c 01       	movw	r18, r24
    121e:	2a 5f       	subi	r18, 0xFA	; 250
    1220:	3f 4f       	sbci	r19, 0xFF	; 255
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <EXTI_enuInit+0x3d6>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <EXTI_enuInit+0x3d2>
    1232:	80 95       	com	r24
    1234:	84 23       	and	r24, r20
    1236:	8c 93       	st	X, r24
    1238:	70 c0       	rjmp	.+224    	; 0x131a <EXTI_enuInit+0x4c2>
					break;
					default: return ES_NOK;
    123a:	1a 86       	std	Y+10, r1	; 0x0a
    123c:	75 c0       	rjmp	.+234    	; 0x1328 <EXTI_enuInit+0x4d0>
				}
				
			}else if (Copy_pAstrEXTIConfig[Local_u8Iter].INT_Num == INT_2)
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	c9 01       	movw	r24, r18
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	28 0f       	add	r18, r24
    124c:	39 1f       	adc	r19, r25
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	9b 81       	ldd	r25, Y+3	; 0x03
    1252:	fc 01       	movw	r30, r24
    1254:	e2 0f       	add	r30, r18
    1256:	f3 1f       	adc	r31, r19
    1258:	81 81       	ldd	r24, Z+1	; 0x01
    125a:	82 30       	cpi	r24, 0x02	; 2
    125c:	09 f0       	breq	.+2      	; 0x1260 <EXTI_enuInit+0x408>
    125e:	5a c0       	rjmp	.+180    	; 0x1314 <EXTI_enuInit+0x4bc>
			{
				CLR_BIT(MCUCSR,6);
    1260:	a4 e5       	ldi	r26, 0x54	; 84
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e4 e5       	ldi	r30, 0x54	; 84
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	8f 7b       	andi	r24, 0xBF	; 191
    126c:	8c 93       	st	X, r24
				switch(Copy_pAstrEXTIConfig[Local_u8Iter].SenseLvl)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	c9 01       	movw	r24, r18
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	28 0f       	add	r18, r24
    127c:	39 1f       	adc	r19, r25
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	9b 81       	ldd	r25, Y+3	; 0x03
    1282:	fc 01       	movw	r30, r24
    1284:	e2 0f       	add	r30, r18
    1286:	f3 1f       	adc	r31, r19
    1288:	80 81       	ld	r24, Z
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	3f 83       	std	Y+7, r19	; 0x07
    1290:	2e 83       	std	Y+6, r18	; 0x06
    1292:	8e 81       	ldd	r24, Y+6	; 0x06
    1294:	9f 81       	ldd	r25, Y+7	; 0x07
    1296:	82 30       	cpi	r24, 0x02	; 2
    1298:	91 05       	cpc	r25, r1
    129a:	79 f0       	breq	.+30     	; 0x12ba <EXTI_enuInit+0x462>
    129c:	2e 81       	ldd	r18, Y+6	; 0x06
    129e:	3f 81       	ldd	r19, Y+7	; 0x07
    12a0:	23 30       	cpi	r18, 0x03	; 3
    12a2:	31 05       	cpc	r19, r1
    12a4:	41 f4       	brne	.+16     	; 0x12b6 <EXTI_enuInit+0x45e>
				{
					case FALLING_EDGE :
					break;
					case RISING_EDGE:
					SET_BIT(MCUCSR,6);
    12a6:	a4 e5       	ldi	r26, 0x54	; 84
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e4 e5       	ldi	r30, 0x54	; 84
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	80 64       	ori	r24, 0x40	; 64
    12b2:	8c 93       	st	X, r24
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <EXTI_enuInit+0x462>
					break;
					default: return ES_NOK;
    12b6:	1a 86       	std	Y+10, r1	; 0x0a
    12b8:	37 c0       	rjmp	.+110    	; 0x1328 <EXTI_enuInit+0x4d0>
					break;
				}
				switch(Copy_pAstrEXTIConfig[Local_u8Iter].INT_Mode)
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	c9 01       	movw	r24, r18
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	28 0f       	add	r18, r24
    12c8:	39 1f       	adc	r19, r25
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	9b 81       	ldd	r25, Y+3	; 0x03
    12ce:	fc 01       	movw	r30, r24
    12d0:	e2 0f       	add	r30, r18
    12d2:	f3 1f       	adc	r31, r19
    12d4:	82 81       	ldd	r24, Z+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	3d 83       	std	Y+5, r19	; 0x05
    12dc:	2c 83       	std	Y+4, r18	; 0x04
    12de:	8c 81       	ldd	r24, Y+4	; 0x04
    12e0:	9d 81       	ldd	r25, Y+5	; 0x05
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	69 f0       	breq	.+26     	; 0x1300 <EXTI_enuInit+0x4a8>
    12e6:	2c 81       	ldd	r18, Y+4	; 0x04
    12e8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ea:	21 30       	cpi	r18, 0x01	; 1
    12ec:	31 05       	cpc	r19, r1
    12ee:	81 f4       	brne	.+32     	; 0x1310 <EXTI_enuInit+0x4b8>
				{
					case DISABLE: CLR_BIT(GICR,5);
    12f0:	ab e5       	ldi	r26, 0x5B	; 91
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	eb e5       	ldi	r30, 0x5B	; 91
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8f 7d       	andi	r24, 0xDF	; 223
    12fc:	8c 93       	st	X, r24
    12fe:	0d c0       	rjmp	.+26     	; 0x131a <EXTI_enuInit+0x4c2>
					break;
					case ENABLE: SET_BIT(GICR,5);
    1300:	ab e5       	ldi	r26, 0x5B	; 91
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	eb e5       	ldi	r30, 0x5B	; 91
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	80 62       	ori	r24, 0x20	; 32
    130c:	8c 93       	st	X, r24
    130e:	05 c0       	rjmp	.+10     	; 0x131a <EXTI_enuInit+0x4c2>
					break;
					default: return ES_NOK;
    1310:	1a 86       	std	Y+10, r1	; 0x0a
    1312:	0a c0       	rjmp	.+20     	; 0x1328 <EXTI_enuInit+0x4d0>
				}
			}
			else
			{
				return ES_OUT_OF_RANGE;
    1314:	32 e0       	ldi	r19, 0x02	; 2
    1316:	3a 87       	std	Y+10, r19	; 0x0a
    1318:	07 c0       	rjmp	.+14     	; 0x1328 <EXTI_enuInit+0x4d0>
			}
			return ES_OK;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	8a 87       	std	Y+10, r24	; 0x0a
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <EXTI_enuInit+0x4d0>
		}
	}else
	{
		return ES_NULL_POINTER;
	}
	return ES_NOK;
    1320:	1a 86       	std	Y+10, r1	; 0x0a
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <EXTI_enuInit+0x4d0>
			}
			return ES_OK;
		}
	}else
	{
		return ES_NULL_POINTER;
    1324:	93 e0       	ldi	r25, 0x03	; 3
    1326:	9a 87       	std	Y+10, r25	; 0x0a
    1328:	8a 85       	ldd	r24, Y+10	; 0x0a
	}
	return ES_NOK;
}
    132a:	2c 96       	adiw	r28, 0x0c	; 12
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <EXTI_enuSenseLvl>:
ES_t EXTI_enuSenseLvl(EXTI_t *Copy_pstrEXTIInfo, SenseLvL_t Copy_enuSenseLvl)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	28 97       	sbiw	r28, 0x08	; 8
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	9a 83       	std	Y+2, r25	; 0x02
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_pstrEXTIInfo != NULL)
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	9a 81       	ldd	r25, Y+2	; 0x02
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	09 f4       	brne	.+2      	; 0x1360 <EXTI_enuSenseLvl+0x24>
    135e:	27 c1       	rjmp	.+590    	; 0x15ae <EXTI_enuSenseLvl+0x272>
	{
		if((Copy_pstrEXTIInfo->INT_Num == INT_0) ||(Copy_pstrEXTIInfo->INT_Num == INT_1))
    1360:	e9 81       	ldd	r30, Y+1	; 0x01
    1362:	fa 81       	ldd	r31, Y+2	; 0x02
    1364:	81 81       	ldd	r24, Z+1	; 0x01
    1366:	88 23       	and	r24, r24
    1368:	31 f0       	breq	.+12     	; 0x1376 <EXTI_enuSenseLvl+0x3a>
    136a:	e9 81       	ldd	r30, Y+1	; 0x01
    136c:	fa 81       	ldd	r31, Y+2	; 0x02
    136e:	81 81       	ldd	r24, Z+1	; 0x01
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	09 f0       	breq	.+2      	; 0x1376 <EXTI_enuSenseLvl+0x3a>
    1374:	ef c0       	rjmp	.+478    	; 0x1554 <EXTI_enuSenseLvl+0x218>
		{
			CLR_BIT(MCUCR, (Copy_pstrEXTIInfo->INT_Num)*2);
    1376:	a5 e5       	ldi	r26, 0x55	; 85
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e5 e5       	ldi	r30, 0x55	; 85
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	e9 81       	ldd	r30, Y+1	; 0x01
    1384:	fa 81       	ldd	r31, Y+2	; 0x02
    1386:	81 81       	ldd	r24, Z+1	; 0x01
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	9c 01       	movw	r18, r24
    138e:	22 0f       	add	r18, r18
    1390:	33 1f       	adc	r19, r19
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 c0       	rjmp	.+4      	; 0x139c <EXTI_enuSenseLvl+0x60>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	2a 95       	dec	r18
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <EXTI_enuSenseLvl+0x5c>
    13a0:	80 95       	com	r24
    13a2:	84 23       	and	r24, r20
    13a4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, (((Copy_pstrEXTIInfo->INT_Num)*2)+1));
    13a6:	a5 e5       	ldi	r26, 0x55	; 85
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e5 e5       	ldi	r30, 0x55	; 85
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	48 2f       	mov	r20, r24
    13b2:	e9 81       	ldd	r30, Y+1	; 0x01
    13b4:	fa 81       	ldd	r31, Y+2	; 0x02
    13b6:	81 81       	ldd	r24, Z+1	; 0x01
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	9c 01       	movw	r18, r24
    13c2:	2f 5f       	subi	r18, 0xFF	; 255
    13c4:	3f 4f       	sbci	r19, 0xFF	; 255
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <EXTI_enuSenseLvl+0x94>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	2a 95       	dec	r18
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <EXTI_enuSenseLvl+0x90>
    13d4:	80 95       	com	r24
    13d6:	84 23       	and	r24, r20
    13d8:	8c 93       	st	X, r24
			switch(Copy_pstrEXTIInfo->SenseLvl)
    13da:	e9 81       	ldd	r30, Y+1	; 0x01
    13dc:	fa 81       	ldd	r31, Y+2	; 0x02
    13de:	80 81       	ld	r24, Z
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	38 87       	std	Y+8, r19	; 0x08
    13e6:	2f 83       	std	Y+7, r18	; 0x07
    13e8:	8f 81       	ldd	r24, Y+7	; 0x07
    13ea:	98 85       	ldd	r25, Y+8	; 0x08
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	91 05       	cpc	r25, r1
    13f0:	b9 f0       	breq	.+46     	; 0x1420 <EXTI_enuSenseLvl+0xe4>
    13f2:	2f 81       	ldd	r18, Y+7	; 0x07
    13f4:	38 85       	ldd	r19, Y+8	; 0x08
    13f6:	22 30       	cpi	r18, 0x02	; 2
    13f8:	31 05       	cpc	r19, r1
    13fa:	34 f4       	brge	.+12     	; 0x1408 <EXTI_enuSenseLvl+0xcc>
    13fc:	8f 81       	ldd	r24, Y+7	; 0x07
    13fe:	98 85       	ldd	r25, Y+8	; 0x08
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	09 f4       	brne	.+2      	; 0x1406 <EXTI_enuSenseLvl+0xca>
    1404:	d1 c0       	rjmp	.+418    	; 0x15a8 <EXTI_enuSenseLvl+0x26c>
    1406:	a4 c0       	rjmp	.+328    	; 0x1550 <EXTI_enuSenseLvl+0x214>
    1408:	2f 81       	ldd	r18, Y+7	; 0x07
    140a:	38 85       	ldd	r19, Y+8	; 0x08
    140c:	22 30       	cpi	r18, 0x02	; 2
    140e:	31 05       	cpc	r19, r1
    1410:	d1 f1       	breq	.+116    	; 0x1486 <EXTI_enuSenseLvl+0x14a>
    1412:	8f 81       	ldd	r24, Y+7	; 0x07
    1414:	98 85       	ldd	r25, Y+8	; 0x08
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	91 05       	cpc	r25, r1
    141a:	09 f4       	brne	.+2      	; 0x141e <EXTI_enuSenseLvl+0xe2>
    141c:	67 c0       	rjmp	.+206    	; 0x14ec <EXTI_enuSenseLvl+0x1b0>
    141e:	98 c0       	rjmp	.+304    	; 0x1550 <EXTI_enuSenseLvl+0x214>
			{
				
				case LOW_LVL:
				break;
				case ANY_CHANGE:
				SET_BIT(MCUCR, (Copy_pstrEXTIInfo->INT_Num)*2);
    1420:	a5 e5       	ldi	r26, 0x55	; 85
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e5 e5       	ldi	r30, 0x55	; 85
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	e9 81       	ldd	r30, Y+1	; 0x01
    142e:	fa 81       	ldd	r31, Y+2	; 0x02
    1430:	81 81       	ldd	r24, Z+1	; 0x01
    1432:	88 2f       	mov	r24, r24
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	9c 01       	movw	r18, r24
    1438:	22 0f       	add	r18, r18
    143a:	33 1f       	adc	r19, r19
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <EXTI_enuSenseLvl+0x10a>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	2a 95       	dec	r18
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <EXTI_enuSenseLvl+0x106>
    144a:	84 2b       	or	r24, r20
    144c:	8c 93       	st	X, r24
				CLR_BIT(MCUCR, (((Copy_pstrEXTIInfo->INT_Num)*2)+1));
    144e:	a5 e5       	ldi	r26, 0x55	; 85
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e5 e5       	ldi	r30, 0x55	; 85
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	e9 81       	ldd	r30, Y+1	; 0x01
    145c:	fa 81       	ldd	r31, Y+2	; 0x02
    145e:	81 81       	ldd	r24, Z+1	; 0x01
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	9c 01       	movw	r18, r24
    146a:	2f 5f       	subi	r18, 0xFF	; 255
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <EXTI_enuSenseLvl+0x13e>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <EXTI_enuSenseLvl+0x13a>
    147e:	80 95       	com	r24
    1480:	84 23       	and	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	91 c0       	rjmp	.+290    	; 0x15a8 <EXTI_enuSenseLvl+0x26c>
				break;
				case FALLING_EDGE:
				CLR_BIT(MCUCR, (Copy_pstrEXTIInfo->INT_Num)*2);
    1486:	a5 e5       	ldi	r26, 0x55	; 85
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e5 e5       	ldi	r30, 0x55	; 85
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	e9 81       	ldd	r30, Y+1	; 0x01
    1494:	fa 81       	ldd	r31, Y+2	; 0x02
    1496:	81 81       	ldd	r24, Z+1	; 0x01
    1498:	88 2f       	mov	r24, r24
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	9c 01       	movw	r18, r24
    149e:	22 0f       	add	r18, r18
    14a0:	33 1f       	adc	r19, r19
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <EXTI_enuSenseLvl+0x170>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	2a 95       	dec	r18
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <EXTI_enuSenseLvl+0x16c>
    14b0:	80 95       	com	r24
    14b2:	84 23       	and	r24, r20
    14b4:	8c 93       	st	X, r24
				SET_BIT(MCUCR, (((Copy_pstrEXTIInfo->INT_Num)*2)+1));
    14b6:	a5 e5       	ldi	r26, 0x55	; 85
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e5 e5       	ldi	r30, 0x55	; 85
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	e9 81       	ldd	r30, Y+1	; 0x01
    14c4:	fa 81       	ldd	r31, Y+2	; 0x02
    14c6:	81 81       	ldd	r24, Z+1	; 0x01
    14c8:	88 2f       	mov	r24, r24
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	9c 01       	movw	r18, r24
    14d2:	2f 5f       	subi	r18, 0xFF	; 255
    14d4:	3f 4f       	sbci	r19, 0xFF	; 255
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 2e       	mov	r0, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <EXTI_enuSenseLvl+0x1a6>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <EXTI_enuSenseLvl+0x1a2>
    14e6:	84 2b       	or	r24, r20
    14e8:	8c 93       	st	X, r24
    14ea:	5e c0       	rjmp	.+188    	; 0x15a8 <EXTI_enuSenseLvl+0x26c>
				break;
				case RISING_EDGE:
				SET_BIT(MCUCR, (Copy_pstrEXTIInfo->INT_Num)*2);
    14ec:	a5 e5       	ldi	r26, 0x55	; 85
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e5 e5       	ldi	r30, 0x55	; 85
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	48 2f       	mov	r20, r24
    14f8:	e9 81       	ldd	r30, Y+1	; 0x01
    14fa:	fa 81       	ldd	r31, Y+2	; 0x02
    14fc:	81 81       	ldd	r24, Z+1	; 0x01
    14fe:	88 2f       	mov	r24, r24
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	9c 01       	movw	r18, r24
    1504:	22 0f       	add	r18, r18
    1506:	33 1f       	adc	r19, r19
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <EXTI_enuSenseLvl+0x1d6>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	2a 95       	dec	r18
    1514:	e2 f7       	brpl	.-8      	; 0x150e <EXTI_enuSenseLvl+0x1d2>
    1516:	84 2b       	or	r24, r20
    1518:	8c 93       	st	X, r24
				SET_BIT(MCUCR, (((Copy_pstrEXTIInfo->INT_Num)*2)+1));
    151a:	a5 e5       	ldi	r26, 0x55	; 85
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e5 e5       	ldi	r30, 0x55	; 85
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	e9 81       	ldd	r30, Y+1	; 0x01
    1528:	fa 81       	ldd	r31, Y+2	; 0x02
    152a:	81 81       	ldd	r24, Z+1	; 0x01
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	9c 01       	movw	r18, r24
    1536:	2f 5f       	subi	r18, 0xFF	; 255
    1538:	3f 4f       	sbci	r19, 0xFF	; 255
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 2e       	mov	r0, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <EXTI_enuSenseLvl+0x20a>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <EXTI_enuSenseLvl+0x206>
    154a:	84 2b       	or	r24, r20
    154c:	8c 93       	st	X, r24
    154e:	2c c0       	rjmp	.+88     	; 0x15a8 <EXTI_enuSenseLvl+0x26c>
				break;
				default:return ES_NOK;
    1550:	1e 82       	std	Y+6, r1	; 0x06
    1552:	2f c0       	rjmp	.+94     	; 0x15b2 <EXTI_enuSenseLvl+0x276>
				break;
			}
		}else if (Copy_pstrEXTIInfo->INT_Num == INT_2)
    1554:	e9 81       	ldd	r30, Y+1	; 0x01
    1556:	fa 81       	ldd	r31, Y+2	; 0x02
    1558:	81 81       	ldd	r24, Z+1	; 0x01
    155a:	82 30       	cpi	r24, 0x02	; 2
    155c:	11 f5       	brne	.+68     	; 0x15a2 <EXTI_enuSenseLvl+0x266>
		{
			CLR_BIT(MCUCSR,6);
    155e:	a4 e5       	ldi	r26, 0x54	; 84
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e4 e5       	ldi	r30, 0x54	; 84
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	8f 7b       	andi	r24, 0xBF	; 191
    156a:	8c 93       	st	X, r24
			switch(Copy_pstrEXTIInfo->SenseLvl)
    156c:	e9 81       	ldd	r30, Y+1	; 0x01
    156e:	fa 81       	ldd	r31, Y+2	; 0x02
    1570:	80 81       	ld	r24, Z
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	3d 83       	std	Y+5, r19	; 0x05
    1578:	2c 83       	std	Y+4, r18	; 0x04
    157a:	8c 81       	ldd	r24, Y+4	; 0x04
    157c:	9d 81       	ldd	r25, Y+5	; 0x05
    157e:	82 30       	cpi	r24, 0x02	; 2
    1580:	91 05       	cpc	r25, r1
    1582:	91 f0       	breq	.+36     	; 0x15a8 <EXTI_enuSenseLvl+0x26c>
    1584:	2c 81       	ldd	r18, Y+4	; 0x04
    1586:	3d 81       	ldd	r19, Y+5	; 0x05
    1588:	23 30       	cpi	r18, 0x03	; 3
    158a:	31 05       	cpc	r19, r1
    158c:	41 f4       	brne	.+16     	; 0x159e <EXTI_enuSenseLvl+0x262>
			{
				case FALLING_EDGE :
				break;
				case RISING_EDGE:
				SET_BIT(MCUCSR,6);
    158e:	a4 e5       	ldi	r26, 0x54	; 84
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e4 e5       	ldi	r30, 0x54	; 84
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	80 64       	ori	r24, 0x40	; 64
    159a:	8c 93       	st	X, r24
    159c:	05 c0       	rjmp	.+10     	; 0x15a8 <EXTI_enuSenseLvl+0x26c>
				break;
				default: return ES_NOK;
    159e:	1e 82       	std	Y+6, r1	; 0x06
    15a0:	08 c0       	rjmp	.+16     	; 0x15b2 <EXTI_enuSenseLvl+0x276>
				break;
			}
		}
		else
		{
			return ES_OUT_OF_RANGE;
    15a2:	32 e0       	ldi	r19, 0x02	; 2
    15a4:	3e 83       	std	Y+6, r19	; 0x06
    15a6:	05 c0       	rjmp	.+10     	; 0x15b2 <EXTI_enuSenseLvl+0x276>
		}
		return ES_OK;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	8e 83       	std	Y+6, r24	; 0x06
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <EXTI_enuSenseLvl+0x276>
	}else
	{
		return ES_NULL_POINTER;
    15ae:	93 e0       	ldi	r25, 0x03	; 3
    15b0:	9e 83       	std	Y+6, r25	; 0x06
    15b2:	8e 81       	ldd	r24, Y+6	; 0x06
	}
	return ES_NOK;
}
    15b4:	28 96       	adiw	r28, 0x08	; 8
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <EXTI_enuEnable>:
ES_t EXTI_enuEnable(EXTI_t *Copy_pstrEXTIInfo)
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <EXTI_enuEnable+0x6>
    15cc:	0f 92       	push	r0
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	9a 83       	std	Y+2, r25	; 0x02
    15d4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pstrEXTIInfo != NULL)
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	b1 f1       	breq	.+108    	; 0x164a <EXTI_enuEnable+0x84>
	{
		if((Copy_pstrEXTIInfo->INT_Num == INT_0) ||(Copy_pstrEXTIInfo->INT_Num == INT_1))
    15de:	e9 81       	ldd	r30, Y+1	; 0x01
    15e0:	fa 81       	ldd	r31, Y+2	; 0x02
    15e2:	81 81       	ldd	r24, Z+1	; 0x01
    15e4:	88 23       	and	r24, r24
    15e6:	29 f0       	breq	.+10     	; 0x15f2 <EXTI_enuEnable+0x2c>
    15e8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ea:	fa 81       	ldd	r31, Y+2	; 0x02
    15ec:	81 81       	ldd	r24, Z+1	; 0x01
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	c9 f4       	brne	.+50     	; 0x1624 <EXTI_enuEnable+0x5e>
		{
			SET_BIT(GICR, (6+(Copy_pstrEXTIInfo->INT_Num)));
    15f2:	ab e5       	ldi	r26, 0x5B	; 91
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	eb e5       	ldi	r30, 0x5B	; 91
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1600:	fa 81       	ldd	r31, Y+2	; 0x02
    1602:	81 81       	ldd	r24, Z+1	; 0x01
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9c 01       	movw	r18, r24
    160a:	2a 5f       	subi	r18, 0xFA	; 250
    160c:	3f 4f       	sbci	r19, 0xFF	; 255
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <EXTI_enuEnable+0x54>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <EXTI_enuEnable+0x50>
    161e:	84 2b       	or	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	10 c0       	rjmp	.+32     	; 0x1644 <EXTI_enuEnable+0x7e>
			
			
		}else if (Copy_pstrEXTIInfo->INT_Num == INT_2)
    1624:	e9 81       	ldd	r30, Y+1	; 0x01
    1626:	fa 81       	ldd	r31, Y+2	; 0x02
    1628:	81 81       	ldd	r24, Z+1	; 0x01
    162a:	82 30       	cpi	r24, 0x02	; 2
    162c:	41 f4       	brne	.+16     	; 0x163e <EXTI_enuEnable+0x78>
		{
			SET_BIT(GICR,5);
    162e:	ab e5       	ldi	r26, 0x5B	; 91
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	eb e5       	ldi	r30, 0x5B	; 91
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	80 62       	ori	r24, 0x20	; 32
    163a:	8c 93       	st	X, r24
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <EXTI_enuEnable+0x7e>
			
		}
		else
		{
			return ES_OUT_OF_RANGE;
    163e:	82 e0       	ldi	r24, 0x02	; 2
    1640:	8b 83       	std	Y+3, r24	; 0x03
    1642:	05 c0       	rjmp	.+10     	; 0x164e <EXTI_enuEnable+0x88>
		}
		return ES_OK;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	8b 83       	std	Y+3, r24	; 0x03
    1648:	02 c0       	rjmp	.+4      	; 0x164e <EXTI_enuEnable+0x88>
	}else
	{
		return ES_NULL_POINTER;
    164a:	83 e0       	ldi	r24, 0x03	; 3
    164c:	8b 83       	std	Y+3, r24	; 0x03
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return ES_NOK;
}
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <EXTI_enuDisable>:
ES_t EXTI_enuDisable(EXTI_t *Copy_pstrEXTIInfo)
{
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	00 d0       	rcall	.+0      	; 0x1662 <EXTI_enuDisable+0x6>
    1662:	0f 92       	push	r0
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	9a 83       	std	Y+2, r25	; 0x02
    166a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pstrEXTIInfo != NULL)
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	9a 81       	ldd	r25, Y+2	; 0x02
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	b9 f1       	breq	.+110    	; 0x16e2 <EXTI_enuDisable+0x86>
	{
		if((Copy_pstrEXTIInfo->INT_Num == INT_0) ||(Copy_pstrEXTIInfo->INT_Num == INT_1))
    1674:	e9 81       	ldd	r30, Y+1	; 0x01
    1676:	fa 81       	ldd	r31, Y+2	; 0x02
    1678:	81 81       	ldd	r24, Z+1	; 0x01
    167a:	88 23       	and	r24, r24
    167c:	29 f0       	breq	.+10     	; 0x1688 <EXTI_enuDisable+0x2c>
    167e:	e9 81       	ldd	r30, Y+1	; 0x01
    1680:	fa 81       	ldd	r31, Y+2	; 0x02
    1682:	81 81       	ldd	r24, Z+1	; 0x01
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	d1 f4       	brne	.+52     	; 0x16bc <EXTI_enuDisable+0x60>
		{
			
			CLR_BIT(GICR, (6+(Copy_pstrEXTIInfo->INT_Num)));
    1688:	ab e5       	ldi	r26, 0x5B	; 91
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	eb e5       	ldi	r30, 0x5B	; 91
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	e9 81       	ldd	r30, Y+1	; 0x01
    1696:	fa 81       	ldd	r31, Y+2	; 0x02
    1698:	81 81       	ldd	r24, Z+1	; 0x01
    169a:	88 2f       	mov	r24, r24
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	9c 01       	movw	r18, r24
    16a0:	2a 5f       	subi	r18, 0xFA	; 250
    16a2:	3f 4f       	sbci	r19, 0xFF	; 255
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <EXTI_enuDisable+0x54>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <EXTI_enuDisable+0x50>
    16b4:	80 95       	com	r24
    16b6:	84 23       	and	r24, r20
    16b8:	8c 93       	st	X, r24
    16ba:	10 c0       	rjmp	.+32     	; 0x16dc <EXTI_enuDisable+0x80>
			
			
		}else if (Copy_pstrEXTIInfo->INT_Num == INT_2)
    16bc:	e9 81       	ldd	r30, Y+1	; 0x01
    16be:	fa 81       	ldd	r31, Y+2	; 0x02
    16c0:	81 81       	ldd	r24, Z+1	; 0x01
    16c2:	82 30       	cpi	r24, 0x02	; 2
    16c4:	41 f4       	brne	.+16     	; 0x16d6 <EXTI_enuDisable+0x7a>
		{
			CLR_BIT(GICR,5);
    16c6:	ab e5       	ldi	r26, 0x5B	; 91
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	eb e5       	ldi	r30, 0x5B	; 91
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	8f 7d       	andi	r24, 0xDF	; 223
    16d2:	8c 93       	st	X, r24
    16d4:	03 c0       	rjmp	.+6      	; 0x16dc <EXTI_enuDisable+0x80>
			
		}
		else
		{
			return ES_OUT_OF_RANGE;
    16d6:	82 e0       	ldi	r24, 0x02	; 2
    16d8:	8b 83       	std	Y+3, r24	; 0x03
    16da:	05 c0       	rjmp	.+10     	; 0x16e6 <EXTI_enuDisable+0x8a>
		}
		return ES_OK;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	8b 83       	std	Y+3, r24	; 0x03
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <EXTI_enuDisable+0x8a>
	}else
	{
		return ES_NULL_POINTER;
    16e2:	83 e0       	ldi	r24, 0x03	; 3
    16e4:	8b 83       	std	Y+3, r24	; 0x03
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return ES_NOK;
}
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <EXTI_enuCallBack>:
ES_t EXTI_enuCallBack(EXTI_t *Copy_pstrEXTIInfo, void*(*pFunAppv)(void*) , void* Copy_pvAppParamter)
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	27 97       	sbiw	r28, 0x07	; 7
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	9a 83       	std	Y+2, r25	; 0x02
    170a:	89 83       	std	Y+1, r24	; 0x01
    170c:	7c 83       	std	Y+4, r23	; 0x04
    170e:	6b 83       	std	Y+3, r22	; 0x03
    1710:	5e 83       	std	Y+6, r21	; 0x06
    1712:	4d 83       	std	Y+5, r20	; 0x05
	if((Copy_pstrEXTIInfo !=NULL)&&(pFunAppv != NULL))
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	9a 81       	ldd	r25, Y+2	; 0x02
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	19 f1       	breq	.+70     	; 0x1762 <EXTI_enuCallBack+0x6e>
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	9c 81       	ldd	r25, Y+4	; 0x04
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	f9 f0       	breq	.+62     	; 0x1762 <EXTI_enuCallBack+0x6e>
	{
		ApFunApp[(Copy_pstrEXTIInfo->INT_Num)]= pFunAppv;
    1724:	e9 81       	ldd	r30, Y+1	; 0x01
    1726:	fa 81       	ldd	r31, Y+2	; 0x02
    1728:	81 81       	ldd	r24, Z+1	; 0x01
    172a:	88 2f       	mov	r24, r24
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	fc 01       	movw	r30, r24
    1734:	ea 50       	subi	r30, 0x0A	; 10
    1736:	fe 4f       	sbci	r31, 0xFE	; 254
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	9c 81       	ldd	r25, Y+4	; 0x04
    173c:	91 83       	std	Z+1, r25	; 0x01
    173e:	80 83       	st	Z, r24
		AvpAppParameter[(Copy_pstrEXTIInfo->INT_Num)] = Copy_pvAppParamter;
    1740:	e9 81       	ldd	r30, Y+1	; 0x01
    1742:	fa 81       	ldd	r31, Y+2	; 0x02
    1744:	81 81       	ldd	r24, Z+1	; 0x01
    1746:	88 2f       	mov	r24, r24
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	fc 01       	movw	r30, r24
    1750:	e4 50       	subi	r30, 0x04	; 4
    1752:	fe 4f       	sbci	r31, 0xFE	; 254
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	80 83       	st	Z, r24
		return ES_OK;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	8f 83       	std	Y+7, r24	; 0x07
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <EXTI_enuCallBack+0x72>
	}else
	{
		return ES_NULL_POINTER;
    1762:	83 e0       	ldi	r24, 0x03	; 3
    1764:	8f 83       	std	Y+7, r24	; 0x07
    1766:	8f 81       	ldd	r24, Y+7	; 0x07
	}
	return ES_NOK;
}
    1768:	27 96       	adiw	r28, 0x07	; 7
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <__vector_1>:

ISR(INT0_vect_1)
{
    177a:	1f 92       	push	r1
    177c:	0f 92       	push	r0
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	0f 92       	push	r0
    1782:	11 24       	eor	r1, r1
    1784:	2f 93       	push	r18
    1786:	3f 93       	push	r19
    1788:	4f 93       	push	r20
    178a:	5f 93       	push	r21
    178c:	6f 93       	push	r22
    178e:	7f 93       	push	r23
    1790:	8f 93       	push	r24
    1792:	9f 93       	push	r25
    1794:	af 93       	push	r26
    1796:	bf 93       	push	r27
    1798:	ef 93       	push	r30
    179a:	ff 93       	push	r31
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
	if(AvpAppParameter[0] != NULL)
    17a4:	80 91 fc 01 	lds	r24, 0x01FC
    17a8:	90 91 fd 01 	lds	r25, 0x01FD
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	49 f0       	breq	.+18     	; 0x17c2 <__vector_1+0x48>
	{
		ApFunApp[0](AvpAppParameter[0]);
    17b0:	e0 91 f6 01 	lds	r30, 0x01F6
    17b4:	f0 91 f7 01 	lds	r31, 0x01F7
    17b8:	80 91 fc 01 	lds	r24, 0x01FC
    17bc:	90 91 fd 01 	lds	r25, 0x01FD
    17c0:	09 95       	icall
	}
}
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	ff 91       	pop	r31
    17c8:	ef 91       	pop	r30
    17ca:	bf 91       	pop	r27
    17cc:	af 91       	pop	r26
    17ce:	9f 91       	pop	r25
    17d0:	8f 91       	pop	r24
    17d2:	7f 91       	pop	r23
    17d4:	6f 91       	pop	r22
    17d6:	5f 91       	pop	r21
    17d8:	4f 91       	pop	r20
    17da:	3f 91       	pop	r19
    17dc:	2f 91       	pop	r18
    17de:	0f 90       	pop	r0
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	0f 90       	pop	r0
    17e4:	1f 90       	pop	r1
    17e6:	18 95       	reti

000017e8 <__vector_2>:
ISR(INT1_vect_2)
{
    17e8:	1f 92       	push	r1
    17ea:	0f 92       	push	r0
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	0f 92       	push	r0
    17f0:	11 24       	eor	r1, r1
    17f2:	2f 93       	push	r18
    17f4:	3f 93       	push	r19
    17f6:	4f 93       	push	r20
    17f8:	5f 93       	push	r21
    17fa:	6f 93       	push	r22
    17fc:	7f 93       	push	r23
    17fe:	8f 93       	push	r24
    1800:	9f 93       	push	r25
    1802:	af 93       	push	r26
    1804:	bf 93       	push	r27
    1806:	ef 93       	push	r30
    1808:	ff 93       	push	r31
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
	if(AvpAppParameter[1] != NULL)
    1812:	80 91 fe 01 	lds	r24, 0x01FE
    1816:	90 91 ff 01 	lds	r25, 0x01FF
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	49 f0       	breq	.+18     	; 0x1830 <__vector_2+0x48>
	{
		ApFunApp[1](AvpAppParameter[1]);
    181e:	e0 91 f8 01 	lds	r30, 0x01F8
    1822:	f0 91 f9 01 	lds	r31, 0x01F9
    1826:	80 91 fe 01 	lds	r24, 0x01FE
    182a:	90 91 ff 01 	lds	r25, 0x01FF
    182e:	09 95       	icall
	}
}
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	ff 91       	pop	r31
    1836:	ef 91       	pop	r30
    1838:	bf 91       	pop	r27
    183a:	af 91       	pop	r26
    183c:	9f 91       	pop	r25
    183e:	8f 91       	pop	r24
    1840:	7f 91       	pop	r23
    1842:	6f 91       	pop	r22
    1844:	5f 91       	pop	r21
    1846:	4f 91       	pop	r20
    1848:	3f 91       	pop	r19
    184a:	2f 91       	pop	r18
    184c:	0f 90       	pop	r0
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	0f 90       	pop	r0
    1852:	1f 90       	pop	r1
    1854:	18 95       	reti

00001856 <__vector_3>:
ISR(INT2_vect_3)
{
    1856:	1f 92       	push	r1
    1858:	0f 92       	push	r0
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	0f 92       	push	r0
    185e:	11 24       	eor	r1, r1
    1860:	2f 93       	push	r18
    1862:	3f 93       	push	r19
    1864:	4f 93       	push	r20
    1866:	5f 93       	push	r21
    1868:	6f 93       	push	r22
    186a:	7f 93       	push	r23
    186c:	8f 93       	push	r24
    186e:	9f 93       	push	r25
    1870:	af 93       	push	r26
    1872:	bf 93       	push	r27
    1874:	ef 93       	push	r30
    1876:	ff 93       	push	r31
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
	if(AvpAppParameter[2] != NULL)
    1880:	80 91 00 02 	lds	r24, 0x0200
    1884:	90 91 01 02 	lds	r25, 0x0201
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	49 f0       	breq	.+18     	; 0x189e <__vector_3+0x48>
	{
		ApFunApp[2](AvpAppParameter[2]);
    188c:	e0 91 fa 01 	lds	r30, 0x01FA
    1890:	f0 91 fb 01 	lds	r31, 0x01FB
    1894:	80 91 00 02 	lds	r24, 0x0200
    1898:	90 91 01 02 	lds	r25, 0x0201
    189c:	09 95       	icall
	}
}
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	ff 91       	pop	r31
    18a4:	ef 91       	pop	r30
    18a6:	bf 91       	pop	r27
    18a8:	af 91       	pop	r26
    18aa:	9f 91       	pop	r25
    18ac:	8f 91       	pop	r24
    18ae:	7f 91       	pop	r23
    18b0:	6f 91       	pop	r22
    18b2:	5f 91       	pop	r21
    18b4:	4f 91       	pop	r20
    18b6:	3f 91       	pop	r19
    18b8:	2f 91       	pop	r18
    18ba:	0f 90       	pop	r0
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	0f 90       	pop	r0
    18c0:	1f 90       	pop	r1
    18c2:	18 95       	reti

000018c4 <EEPROM_write>:

@return	: Error State Value

*/
ES_t EEPROM_write(u16 u16Address, u8 u8Data)
{
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <EEPROM_write+0x6>
    18ca:	0f 92       	push	r0
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	9a 83       	std	Y+2, r25	; 0x02
    18d2:	89 83       	std	Y+1, r24	; 0x01
    18d4:	6b 83       	std	Y+3, r22	; 0x03
	/* Wait for completion of previous write */
	while(GET_BIT(EECR,EEWE));
    18d6:	ec e3       	ldi	r30, 0x3C	; 60
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	86 95       	lsr	r24
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	81 70       	andi	r24, 0x01	; 1
    18e4:	90 70       	andi	r25, 0x00	; 0
    18e6:	88 23       	and	r24, r24
    18e8:	b1 f7       	brne	.-20     	; 0x18d6 <EEPROM_write+0x12>

	while(GET_BIT(SPMCR,SPMEN));/*Optional based on bootloader present*/
    18ea:	e7 e5       	ldi	r30, 0x57	; 87
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	88 2f       	mov	r24, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	81 70       	andi	r24, 0x01	; 1
    18f6:	90 70       	andi	r25, 0x00	; 0
    18f8:	88 23       	and	r24, r24
    18fa:	b9 f7       	brne	.-18     	; 0x18ea <EEPROM_write+0x26>

	/* Set up address and data registers */
	EEAR = u16Address;
    18fc:	ee e3       	ldi	r30, 0x3E	; 62
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	80 83       	st	Z, r24
	EEDR = u8Data;
    1904:	ed e3       	ldi	r30, 0x3D	; 61
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	80 83       	st	Z, r24
	/* Write logical one to EEMWE */
	SET_BIT(EECR,EEMWE);
    190c:	ac e3       	ldi	r26, 0x3C	; 60
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ec e3       	ldi	r30, 0x3C	; 60
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	84 60       	ori	r24, 0x04	; 4
    1918:	8c 93       	st	X, r24
	/* Start eeprom write by setting EEWE */
	SET_BIT(EECR,EEWE);
    191a:	ac e3       	ldi	r26, 0x3C	; 60
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	ec e3       	ldi	r30, 0x3C	; 60
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	82 60       	ori	r24, 0x02	; 2
    1926:	8c 93       	st	X, r24
	return ES_OK;
    1928:	81 e0       	ldi	r24, 0x01	; 1
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <EEPROM_read>:

@return	: Error State Value

*/
ES_t EEPROM_read(u16 u16Address, u8 *Copy_pu8ReadValue)
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	00 d0       	rcall	.+0      	; 0x193c <EEPROM_read+0x6>
    193c:	00 d0       	rcall	.+0      	; 0x193e <EEPROM_read+0x8>
    193e:	0f 92       	push	r0
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	9a 83       	std	Y+2, r25	; 0x02
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	7c 83       	std	Y+4, r23	; 0x04
    194a:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_pu8ReadValue != NULL)
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9c 81       	ldd	r25, Y+4	; 0x04
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	f1 f0       	breq	.+60     	; 0x1990 <EEPROM_read+0x5a>
	{
		/* Wait for completion of previous write */
		while(GET_BIT(EECR,EEWE));
    1954:	ec e3       	ldi	r30, 0x3C	; 60
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	86 95       	lsr	r24
    195c:	88 2f       	mov	r24, r24
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	81 70       	andi	r24, 0x01	; 1
    1962:	90 70       	andi	r25, 0x00	; 0
    1964:	88 23       	and	r24, r24
    1966:	b1 f7       	brne	.-20     	; 0x1954 <EEPROM_read+0x1e>
		/* Set up address register */
		EEAR = u16Address;
    1968:	ee e3       	ldi	r30, 0x3E	; 62
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	80 83       	st	Z, r24
		/* Start eeprom read by writing EERE */
		SET_BIT(EECR,EERE);
    1970:	ac e3       	ldi	r26, 0x3C	; 60
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	ec e3       	ldi	r30, 0x3C	; 60
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	81 60       	ori	r24, 0x01	; 1
    197c:	8c 93       	st	X, r24
		/* Return data from data register */
		*Copy_pu8ReadValue= EEDR;
    197e:	ed e3       	ldi	r30, 0x3D	; 61
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	eb 81       	ldd	r30, Y+3	; 0x03
    1986:	fc 81       	ldd	r31, Y+4	; 0x04
    1988:	80 83       	st	Z, r24
		return ES_OK;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	8d 83       	std	Y+5, r24	; 0x05
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <EEPROM_read+0x5e>
	}else
	{
		return ES_NULL_POINTER;
    1990:	83 e0       	ldi	r24, 0x03	; 3
    1992:	8d 83       	std	Y+5, r24	; 0x05
    1994:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	return ES_NOK;
}
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <M_DIO_enuSetPortDirection>:

@return	:	Error State value

*/
ES_t M_DIO_enuSetPortDirection(DIO_DDR DIO_DDRx, u8 Copy_DDRx_Value)
{
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <M_DIO_enuSetPortDirection+0x6>
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <M_DIO_enuSetPortDirection+0x8>
    19ae:	0f 92       	push	r0
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	6a 83       	std	Y+2, r22	; 0x02
	if(DIO_DDRx <= DIO_DDRD)
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	84 30       	cpi	r24, 0x04	; 4
    19bc:	a8 f5       	brcc	.+106    	; 0x1a28 <M_DIO_enuSetPortDirection+0x82>
	{
		switch(DIO_DDRx)
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	3d 83       	std	Y+5, r19	; 0x05
    19c6:	2c 83       	std	Y+4, r18	; 0x04
    19c8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ca:	9d 81       	ldd	r25, Y+5	; 0x05
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	91 05       	cpc	r25, r1
    19d0:	d1 f0       	breq	.+52     	; 0x1a06 <M_DIO_enuSetPortDirection+0x60>
    19d2:	2c 81       	ldd	r18, Y+4	; 0x04
    19d4:	3d 81       	ldd	r19, Y+5	; 0x05
    19d6:	22 30       	cpi	r18, 0x02	; 2
    19d8:	31 05       	cpc	r19, r1
    19da:	2c f4       	brge	.+10     	; 0x19e6 <M_DIO_enuSetPortDirection+0x40>
    19dc:	8c 81       	ldd	r24, Y+4	; 0x04
    19de:	9d 81       	ldd	r25, Y+5	; 0x05
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	61 f0       	breq	.+24     	; 0x19fc <M_DIO_enuSetPortDirection+0x56>
    19e4:	1e c0       	rjmp	.+60     	; 0x1a22 <M_DIO_enuSetPortDirection+0x7c>
    19e6:	2c 81       	ldd	r18, Y+4	; 0x04
    19e8:	3d 81       	ldd	r19, Y+5	; 0x05
    19ea:	22 30       	cpi	r18, 0x02	; 2
    19ec:	31 05       	cpc	r19, r1
    19ee:	81 f0       	breq	.+32     	; 0x1a10 <M_DIO_enuSetPortDirection+0x6a>
    19f0:	8c 81       	ldd	r24, Y+4	; 0x04
    19f2:	9d 81       	ldd	r25, Y+5	; 0x05
    19f4:	83 30       	cpi	r24, 0x03	; 3
    19f6:	91 05       	cpc	r25, r1
    19f8:	81 f0       	breq	.+32     	; 0x1a1a <M_DIO_enuSetPortDirection+0x74>
    19fa:	13 c0       	rjmp	.+38     	; 0x1a22 <M_DIO_enuSetPortDirection+0x7c>
			{
				case DIO_DDRA : DDRA = Copy_DDRx_Value;break;
    19fc:	ea e3       	ldi	r30, 0x3A	; 58
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	80 83       	st	Z, r24
    1a04:	0e c0       	rjmp	.+28     	; 0x1a22 <M_DIO_enuSetPortDirection+0x7c>
				case DIO_DDRB : DDRB = Copy_DDRx_Value;break;
    1a06:	e7 e3       	ldi	r30, 0x37	; 55
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	80 83       	st	Z, r24
    1a0e:	09 c0       	rjmp	.+18     	; 0x1a22 <M_DIO_enuSetPortDirection+0x7c>
				case DIO_DDRC : DDRC = Copy_DDRx_Value;break;
    1a10:	e4 e3       	ldi	r30, 0x34	; 52
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	80 83       	st	Z, r24
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <M_DIO_enuSetPortDirection+0x7c>
				case DIO_DDRD : DDRD = Copy_DDRx_Value;break;
    1a1a:	e1 e3       	ldi	r30, 0x31	; 49
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	80 83       	st	Z, r24
			}
		return ES_OK;
    1a22:	91 e0       	ldi	r25, 0x01	; 1
    1a24:	9b 83       	std	Y+3, r25	; 0x03
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <M_DIO_enuSetPortDirection+0x86>
	}else
	{
		return ES_OUT_OF_RANGE;
    1a28:	22 e0       	ldi	r18, 0x02	; 2
    1a2a:	2b 83       	std	Y+3, r18	; 0x03
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return ES_NOK;
}
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <M_DIO_enuSetPinDirection>:

@return	:	Error State value

*/
ES_t M_DIO_enuSetPinDirection(DIO_DDR DIO_DDRx,DIO_Pin DIO_Pinx, DIO_Direction DIO_Directionx)
{
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <M_DIO_enuSetPinDirection+0x6>
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <M_DIO_enuSetPinDirection+0x8>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <M_DIO_enuSetPinDirection+0xa>
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	6a 83       	std	Y+2, r22	; 0x02
    1a50:	4b 83       	std	Y+3, r20	; 0x03
	if((DIO_DDRx <= DIO_DDRD) &&( DIO_Pinx <= DIO_Pin7) && (DIO_Directionx <=DIO_Direction_Output))
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	84 30       	cpi	r24, 0x04	; 4
    1a56:	08 f0       	brcs	.+2      	; 0x1a5a <M_DIO_enuSetPinDirection+0x1c>
    1a58:	d1 c0       	rjmp	.+418    	; 0x1bfc <M_DIO_enuSetPinDirection+0x1be>
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	88 30       	cpi	r24, 0x08	; 8
    1a5e:	08 f0       	brcs	.+2      	; 0x1a62 <M_DIO_enuSetPinDirection+0x24>
    1a60:	cd c0       	rjmp	.+410    	; 0x1bfc <M_DIO_enuSetPinDirection+0x1be>
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	82 30       	cpi	r24, 0x02	; 2
    1a66:	08 f0       	brcs	.+2      	; 0x1a6a <M_DIO_enuSetPinDirection+0x2c>
    1a68:	c9 c0       	rjmp	.+402    	; 0x1bfc <M_DIO_enuSetPinDirection+0x1be>
		{
			switch(DIO_DDRx)
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	3e 83       	std	Y+6, r19	; 0x06
    1a72:	2d 83       	std	Y+5, r18	; 0x05
    1a74:	6d 81       	ldd	r22, Y+5	; 0x05
    1a76:	7e 81       	ldd	r23, Y+6	; 0x06
    1a78:	61 30       	cpi	r22, 0x01	; 1
    1a7a:	71 05       	cpc	r23, r1
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <M_DIO_enuSetPinDirection+0x42>
    1a7e:	41 c0       	rjmp	.+130    	; 0x1b02 <M_DIO_enuSetPinDirection+0xc4>
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	82 30       	cpi	r24, 0x02	; 2
    1a86:	91 05       	cpc	r25, r1
    1a88:	34 f4       	brge	.+12     	; 0x1a96 <M_DIO_enuSetPinDirection+0x58>
    1a8a:	2d 81       	ldd	r18, Y+5	; 0x05
    1a8c:	3e 81       	ldd	r19, Y+6	; 0x06
    1a8e:	21 15       	cp	r18, r1
    1a90:	31 05       	cpc	r19, r1
    1a92:	71 f0       	breq	.+28     	; 0x1ab0 <M_DIO_enuSetPinDirection+0x72>
    1a94:	b0 c0       	rjmp	.+352    	; 0x1bf6 <M_DIO_enuSetPinDirection+0x1b8>
    1a96:	6d 81       	ldd	r22, Y+5	; 0x05
    1a98:	7e 81       	ldd	r23, Y+6	; 0x06
    1a9a:	62 30       	cpi	r22, 0x02	; 2
    1a9c:	71 05       	cpc	r23, r1
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <M_DIO_enuSetPinDirection+0x64>
    1aa0:	59 c0       	rjmp	.+178    	; 0x1b54 <M_DIO_enuSetPinDirection+0x116>
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa6:	83 30       	cpi	r24, 0x03	; 3
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <M_DIO_enuSetPinDirection+0x70>
    1aac:	7c c0       	rjmp	.+248    	; 0x1ba6 <M_DIO_enuSetPinDirection+0x168>
    1aae:	a3 c0       	rjmp	.+326    	; 0x1bf6 <M_DIO_enuSetPinDirection+0x1b8>
				{
					case DIO_DDRA : CLR_BIT(DDRA,DIO_Pinx);DDRA|=(DIO_Directionx<<DIO_Pinx);break;
    1ab0:	aa e3       	ldi	r26, 0x3A	; 58
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	ea e3       	ldi	r30, 0x3A	; 58
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	48 2f       	mov	r20, r24
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <M_DIO_enuSetPinDirection+0x8e>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	2a 95       	dec	r18
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <M_DIO_enuSetPinDirection+0x8a>
    1ad0:	80 95       	com	r24
    1ad2:	84 23       	and	r24, r20
    1ad4:	8c 93       	st	X, r24
    1ad6:	aa e3       	ldi	r26, 0x3A	; 58
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	ea e3       	ldi	r30, 0x3A	; 58
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	48 2f       	mov	r20, r24
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	88 2f       	mov	r24, r24
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	b9 01       	movw	r22, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <M_DIO_enuSetPinDirection+0xb8>
    1af2:	66 0f       	add	r22, r22
    1af4:	77 1f       	adc	r23, r23
    1af6:	8a 95       	dec	r24
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <M_DIO_enuSetPinDirection+0xb4>
    1afa:	cb 01       	movw	r24, r22
    1afc:	84 2b       	or	r24, r20
    1afe:	8c 93       	st	X, r24
    1b00:	7a c0       	rjmp	.+244    	; 0x1bf6 <M_DIO_enuSetPinDirection+0x1b8>
					case DIO_DDRB : CLR_BIT(DDRB,DIO_Pinx);DDRB|=(DIO_Directionx<<DIO_Pinx);break;
    1b02:	a7 e3       	ldi	r26, 0x37	; 55
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e7 e3       	ldi	r30, 0x37	; 55
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	48 2f       	mov	r20, r24
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <M_DIO_enuSetPinDirection+0xe0>
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	2a 95       	dec	r18
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <M_DIO_enuSetPinDirection+0xdc>
    1b22:	80 95       	com	r24
    1b24:	84 23       	and	r24, r20
    1b26:	8c 93       	st	X, r24
    1b28:	a7 e3       	ldi	r26, 0x37	; 55
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e7 e3       	ldi	r30, 0x37	; 55
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	48 2f       	mov	r20, r24
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	88 2f       	mov	r24, r24
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	b9 01       	movw	r22, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <M_DIO_enuSetPinDirection+0x10a>
    1b44:	66 0f       	add	r22, r22
    1b46:	77 1f       	adc	r23, r23
    1b48:	8a 95       	dec	r24
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <M_DIO_enuSetPinDirection+0x106>
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	84 2b       	or	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	51 c0       	rjmp	.+162    	; 0x1bf6 <M_DIO_enuSetPinDirection+0x1b8>
					case DIO_DDRC : CLR_BIT(DDRC,DIO_Pinx);DDRC|=(DIO_Directionx<<DIO_Pinx);break;
    1b54:	a4 e3       	ldi	r26, 0x34	; 52
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e4 e3       	ldi	r30, 0x34	; 52
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	48 2f       	mov	r20, r24
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <M_DIO_enuSetPinDirection+0x132>
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	2a 95       	dec	r18
    1b72:	e2 f7       	brpl	.-8      	; 0x1b6c <M_DIO_enuSetPinDirection+0x12e>
    1b74:	80 95       	com	r24
    1b76:	84 23       	and	r24, r20
    1b78:	8c 93       	st	X, r24
    1b7a:	a4 e3       	ldi	r26, 0x34	; 52
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e4 e3       	ldi	r30, 0x34	; 52
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	48 2f       	mov	r20, r24
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	88 2f       	mov	r24, r24
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	b9 01       	movw	r22, r18
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <M_DIO_enuSetPinDirection+0x15c>
    1b96:	66 0f       	add	r22, r22
    1b98:	77 1f       	adc	r23, r23
    1b9a:	8a 95       	dec	r24
    1b9c:	e2 f7       	brpl	.-8      	; 0x1b96 <M_DIO_enuSetPinDirection+0x158>
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	84 2b       	or	r24, r20
    1ba2:	8c 93       	st	X, r24
    1ba4:	28 c0       	rjmp	.+80     	; 0x1bf6 <M_DIO_enuSetPinDirection+0x1b8>
					case DIO_DDRD : CLR_BIT(DDRD,DIO_Pinx);DDRD|=(DIO_Directionx<<DIO_Pinx);break;
    1ba6:	a1 e3       	ldi	r26, 0x31	; 49
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e1 e3       	ldi	r30, 0x31	; 49
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	48 2f       	mov	r20, r24
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <M_DIO_enuSetPinDirection+0x184>
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	2a 95       	dec	r18
    1bc4:	e2 f7       	brpl	.-8      	; 0x1bbe <M_DIO_enuSetPinDirection+0x180>
    1bc6:	80 95       	com	r24
    1bc8:	84 23       	and	r24, r20
    1bca:	8c 93       	st	X, r24
    1bcc:	a1 e3       	ldi	r26, 0x31	; 49
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e1 e3       	ldi	r30, 0x31	; 49
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	48 2f       	mov	r20, r24
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	88 2f       	mov	r24, r24
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	b9 01       	movw	r22, r18
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <M_DIO_enuSetPinDirection+0x1ae>
    1be8:	66 0f       	add	r22, r22
    1bea:	77 1f       	adc	r23, r23
    1bec:	8a 95       	dec	r24
    1bee:	e2 f7       	brpl	.-8      	; 0x1be8 <M_DIO_enuSetPinDirection+0x1aa>
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	84 2b       	or	r24, r20
    1bf4:	8c 93       	st	X, r24
				}
			return ES_OK;
    1bf6:	71 e0       	ldi	r23, 0x01	; 1
    1bf8:	7c 83       	std	Y+4, r23	; 0x04
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <M_DIO_enuSetPinDirection+0x1c2>
		}else
		{
			return ES_OUT_OF_RANGE;
    1bfc:	82 e0       	ldi	r24, 0x02	; 2
    1bfe:	8c 83       	std	Y+4, r24	; 0x04
    1c00:	8c 81       	ldd	r24, Y+4	; 0x04
		}
		return ES_NOK;
}
    1c02:	26 96       	adiw	r28, 0x06	; 6
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <M_DIO_enuSetPortValue>:
@param	:	Copy_PORTx_Value Specified Value

@return	:	Error State value
*/
ES_t M_DIO_enuSetPortValue(DIO_PORT DIO_PORTx, u8 Copy_PORTx_Value)
{
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <M_DIO_enuSetPortValue+0x6>
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <M_DIO_enuSetPortValue+0x8>
    1c1c:	0f 92       	push	r0
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	6a 83       	std	Y+2, r22	; 0x02
	if(DIO_PORTx <= DIO_PORTD)
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	84 30       	cpi	r24, 0x04	; 4
    1c2a:	a8 f5       	brcc	.+106    	; 0x1c96 <M_DIO_enuSetPortValue+0x82>
	{
		switch(DIO_PORTx)
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	3d 83       	std	Y+5, r19	; 0x05
    1c34:	2c 83       	std	Y+4, r18	; 0x04
    1c36:	8c 81       	ldd	r24, Y+4	; 0x04
    1c38:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3a:	81 30       	cpi	r24, 0x01	; 1
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	d1 f0       	breq	.+52     	; 0x1c74 <M_DIO_enuSetPortValue+0x60>
    1c40:	2c 81       	ldd	r18, Y+4	; 0x04
    1c42:	3d 81       	ldd	r19, Y+5	; 0x05
    1c44:	22 30       	cpi	r18, 0x02	; 2
    1c46:	31 05       	cpc	r19, r1
    1c48:	2c f4       	brge	.+10     	; 0x1c54 <M_DIO_enuSetPortValue+0x40>
    1c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	61 f0       	breq	.+24     	; 0x1c6a <M_DIO_enuSetPortValue+0x56>
    1c52:	1e c0       	rjmp	.+60     	; 0x1c90 <M_DIO_enuSetPortValue+0x7c>
    1c54:	2c 81       	ldd	r18, Y+4	; 0x04
    1c56:	3d 81       	ldd	r19, Y+5	; 0x05
    1c58:	22 30       	cpi	r18, 0x02	; 2
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	81 f0       	breq	.+32     	; 0x1c7e <M_DIO_enuSetPortValue+0x6a>
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	9d 81       	ldd	r25, Y+5	; 0x05
    1c62:	83 30       	cpi	r24, 0x03	; 3
    1c64:	91 05       	cpc	r25, r1
    1c66:	81 f0       	breq	.+32     	; 0x1c88 <M_DIO_enuSetPortValue+0x74>
    1c68:	13 c0       	rjmp	.+38     	; 0x1c90 <M_DIO_enuSetPortValue+0x7c>
		{
		case DIO_PORTA : PORTA = Copy_PORTx_Value;break;
    1c6a:	eb e3       	ldi	r30, 0x3B	; 59
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	80 83       	st	Z, r24
    1c72:	0e c0       	rjmp	.+28     	; 0x1c90 <M_DIO_enuSetPortValue+0x7c>
		case DIO_PORTB : PORTB = Copy_PORTx_Value;break;
    1c74:	e8 e3       	ldi	r30, 0x38	; 56
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	80 83       	st	Z, r24
    1c7c:	09 c0       	rjmp	.+18     	; 0x1c90 <M_DIO_enuSetPortValue+0x7c>
		case DIO_PORTC : PORTC = Copy_PORTx_Value;break;
    1c7e:	e5 e3       	ldi	r30, 0x35	; 53
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	80 83       	st	Z, r24
    1c86:	04 c0       	rjmp	.+8      	; 0x1c90 <M_DIO_enuSetPortValue+0x7c>
		case DIO_PORTD : PORTD = Copy_PORTx_Value;break;
    1c88:	e2 e3       	ldi	r30, 0x32	; 50
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	80 83       	st	Z, r24
		}
		return ES_OK;
    1c90:	91 e0       	ldi	r25, 0x01	; 1
    1c92:	9b 83       	std	Y+3, r25	; 0x03
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <M_DIO_enuSetPortValue+0x86>
	}else
	{
		return ES_OUT_OF_RANGE;
    1c96:	22 e0       	ldi	r18, 0x02	; 2
    1c98:	2b 83       	std	Y+3, r18	; 0x03
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return ES_NOK;
}
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <M_DIO_enuSetPinValue>:

@return	:	Error State value

*/
ES_t M_DIO_enuSetPinValue(DIO_PORT DIO_PORTx,DIO_Pin DIO_Pinx, DIO_State DIO_Statex)
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <M_DIO_enuSetPinValue+0x6>
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <M_DIO_enuSetPinValue+0x8>
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <M_DIO_enuSetPinValue+0xa>
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	89 83       	std	Y+1, r24	; 0x01
    1cbc:	6a 83       	std	Y+2, r22	; 0x02
    1cbe:	4b 83       	std	Y+3, r20	; 0x03
	if(DIO_PORTx <= DIO_PORTD && DIO_Pinx <= DIO_Pin7 && DIO_Statex <=DIO_State_High)
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	84 30       	cpi	r24, 0x04	; 4
    1cc4:	08 f0       	brcs	.+2      	; 0x1cc8 <M_DIO_enuSetPinValue+0x1c>
    1cc6:	d1 c0       	rjmp	.+418    	; 0x1e6a <M_DIO_enuSetPinValue+0x1be>
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	88 30       	cpi	r24, 0x08	; 8
    1ccc:	08 f0       	brcs	.+2      	; 0x1cd0 <M_DIO_enuSetPinValue+0x24>
    1cce:	cd c0       	rjmp	.+410    	; 0x1e6a <M_DIO_enuSetPinValue+0x1be>
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	82 30       	cpi	r24, 0x02	; 2
    1cd4:	08 f0       	brcs	.+2      	; 0x1cd8 <M_DIO_enuSetPinValue+0x2c>
    1cd6:	c9 c0       	rjmp	.+402    	; 0x1e6a <M_DIO_enuSetPinValue+0x1be>
		{
			switch(DIO_PORTx)
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	3e 83       	std	Y+6, r19	; 0x06
    1ce0:	2d 83       	std	Y+5, r18	; 0x05
    1ce2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ce4:	7e 81       	ldd	r23, Y+6	; 0x06
    1ce6:	61 30       	cpi	r22, 0x01	; 1
    1ce8:	71 05       	cpc	r23, r1
    1cea:	09 f4       	brne	.+2      	; 0x1cee <M_DIO_enuSetPinValue+0x42>
    1cec:	41 c0       	rjmp	.+130    	; 0x1d70 <M_DIO_enuSetPinValue+0xc4>
    1cee:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf2:	82 30       	cpi	r24, 0x02	; 2
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	34 f4       	brge	.+12     	; 0x1d04 <M_DIO_enuSetPinValue+0x58>
    1cf8:	2d 81       	ldd	r18, Y+5	; 0x05
    1cfa:	3e 81       	ldd	r19, Y+6	; 0x06
    1cfc:	21 15       	cp	r18, r1
    1cfe:	31 05       	cpc	r19, r1
    1d00:	71 f0       	breq	.+28     	; 0x1d1e <M_DIO_enuSetPinValue+0x72>
    1d02:	b0 c0       	rjmp	.+352    	; 0x1e64 <M_DIO_enuSetPinValue+0x1b8>
    1d04:	6d 81       	ldd	r22, Y+5	; 0x05
    1d06:	7e 81       	ldd	r23, Y+6	; 0x06
    1d08:	62 30       	cpi	r22, 0x02	; 2
    1d0a:	71 05       	cpc	r23, r1
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <M_DIO_enuSetPinValue+0x64>
    1d0e:	59 c0       	rjmp	.+178    	; 0x1dc2 <M_DIO_enuSetPinValue+0x116>
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	83 30       	cpi	r24, 0x03	; 3
    1d16:	91 05       	cpc	r25, r1
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <M_DIO_enuSetPinValue+0x70>
    1d1a:	7c c0       	rjmp	.+248    	; 0x1e14 <M_DIO_enuSetPinValue+0x168>
    1d1c:	a3 c0       	rjmp	.+326    	; 0x1e64 <M_DIO_enuSetPinValue+0x1b8>
			{
				case DIO_PORTA: CLR_BIT(PORTA,DIO_Pinx);PORTA |= (DIO_Statex<<DIO_Pinx);break;
    1d1e:	ab e3       	ldi	r26, 0x3B	; 59
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	eb e3       	ldi	r30, 0x3B	; 59
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <M_DIO_enuSetPinValue+0x8e>
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	2a 95       	dec	r18
    1d3c:	e2 f7       	brpl	.-8      	; 0x1d36 <M_DIO_enuSetPinValue+0x8a>
    1d3e:	80 95       	com	r24
    1d40:	84 23       	and	r24, r20
    1d42:	8c 93       	st	X, r24
    1d44:	ab e3       	ldi	r26, 0x3B	; 59
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	eb e3       	ldi	r30, 0x3B	; 59
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	48 2f       	mov	r20, r24
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	88 2f       	mov	r24, r24
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	b9 01       	movw	r22, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <M_DIO_enuSetPinValue+0xb8>
    1d60:	66 0f       	add	r22, r22
    1d62:	77 1f       	adc	r23, r23
    1d64:	8a 95       	dec	r24
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <M_DIO_enuSetPinValue+0xb4>
    1d68:	cb 01       	movw	r24, r22
    1d6a:	84 2b       	or	r24, r20
    1d6c:	8c 93       	st	X, r24
    1d6e:	7a c0       	rjmp	.+244    	; 0x1e64 <M_DIO_enuSetPinValue+0x1b8>
				case DIO_PORTB: CLR_BIT(PORTB,DIO_Pinx);PORTB |= (DIO_Statex<<DIO_Pinx);break;
    1d70:	a8 e3       	ldi	r26, 0x38	; 56
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e8 e3       	ldi	r30, 0x38	; 56
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	48 2f       	mov	r20, r24
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <M_DIO_enuSetPinValue+0xe0>
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	2a 95       	dec	r18
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <M_DIO_enuSetPinValue+0xdc>
    1d90:	80 95       	com	r24
    1d92:	84 23       	and	r24, r20
    1d94:	8c 93       	st	X, r24
    1d96:	a8 e3       	ldi	r26, 0x38	; 56
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e8 e3       	ldi	r30, 0x38	; 56
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	48 2f       	mov	r20, r24
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	88 2f       	mov	r24, r24
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	b9 01       	movw	r22, r18
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <M_DIO_enuSetPinValue+0x10a>
    1db2:	66 0f       	add	r22, r22
    1db4:	77 1f       	adc	r23, r23
    1db6:	8a 95       	dec	r24
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <M_DIO_enuSetPinValue+0x106>
    1dba:	cb 01       	movw	r24, r22
    1dbc:	84 2b       	or	r24, r20
    1dbe:	8c 93       	st	X, r24
    1dc0:	51 c0       	rjmp	.+162    	; 0x1e64 <M_DIO_enuSetPinValue+0x1b8>
				case DIO_PORTC: CLR_BIT(PORTC,DIO_Pinx);PORTC |= (DIO_Statex<<DIO_Pinx);break;
    1dc2:	a5 e3       	ldi	r26, 0x35	; 53
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e5 e3       	ldi	r30, 0x35	; 53
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	48 2f       	mov	r20, r24
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <M_DIO_enuSetPinValue+0x132>
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	2a 95       	dec	r18
    1de0:	e2 f7       	brpl	.-8      	; 0x1dda <M_DIO_enuSetPinValue+0x12e>
    1de2:	80 95       	com	r24
    1de4:	84 23       	and	r24, r20
    1de6:	8c 93       	st	X, r24
    1de8:	a5 e3       	ldi	r26, 0x35	; 53
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e5 e3       	ldi	r30, 0x35	; 53
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	48 2f       	mov	r20, r24
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	88 2f       	mov	r24, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	b9 01       	movw	r22, r18
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <M_DIO_enuSetPinValue+0x15c>
    1e04:	66 0f       	add	r22, r22
    1e06:	77 1f       	adc	r23, r23
    1e08:	8a 95       	dec	r24
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <M_DIO_enuSetPinValue+0x158>
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	84 2b       	or	r24, r20
    1e10:	8c 93       	st	X, r24
    1e12:	28 c0       	rjmp	.+80     	; 0x1e64 <M_DIO_enuSetPinValue+0x1b8>
				case DIO_PORTD: CLR_BIT(PORTD,DIO_Pinx);PORTD |= (DIO_Statex<<DIO_Pinx);break;
    1e14:	a2 e3       	ldi	r26, 0x32	; 50
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e2 e3       	ldi	r30, 0x32	; 50
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	48 2f       	mov	r20, r24
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <M_DIO_enuSetPinValue+0x184>
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	2a 95       	dec	r18
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <M_DIO_enuSetPinValue+0x180>
    1e34:	80 95       	com	r24
    1e36:	84 23       	and	r24, r20
    1e38:	8c 93       	st	X, r24
    1e3a:	a2 e3       	ldi	r26, 0x32	; 50
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e2 e3       	ldi	r30, 0x32	; 50
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	48 2f       	mov	r20, r24
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	88 2f       	mov	r24, r24
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	b9 01       	movw	r22, r18
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <M_DIO_enuSetPinValue+0x1ae>
    1e56:	66 0f       	add	r22, r22
    1e58:	77 1f       	adc	r23, r23
    1e5a:	8a 95       	dec	r24
    1e5c:	e2 f7       	brpl	.-8      	; 0x1e56 <M_DIO_enuSetPinValue+0x1aa>
    1e5e:	cb 01       	movw	r24, r22
    1e60:	84 2b       	or	r24, r20
    1e62:	8c 93       	st	X, r24
			}
			return ES_OK;
    1e64:	71 e0       	ldi	r23, 0x01	; 1
    1e66:	7c 83       	std	Y+4, r23	; 0x04
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <M_DIO_enuSetPinValue+0x1c2>
		}else
		{
			return ES_OUT_OF_RANGE;
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	8c 83       	std	Y+4, r24	; 0x04
    1e6e:	8c 81       	ldd	r24, Y+4	; 0x04
		}
		return ES_NOK;
}
    1e70:	26 96       	adiw	r28, 0x06	; 6
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <M_DIO_enuGetPINValue>:
@return	:	Error State value

*/

ES_t M_DIO_enuGetPINValue(DIO_PIN DIO_PINx, u8* Copy_pu8ReadPIN)
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <M_DIO_enuGetPINValue+0x6>
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <M_DIO_enuGetPINValue+0x8>
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <M_DIO_enuGetPINValue+0xa>
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	7b 83       	std	Y+3, r23	; 0x03
    1e94:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_pu8ReadPIN != NULL)
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <M_DIO_enuGetPINValue+0x1e>
    1e9e:	43 c0       	rjmp	.+134    	; 0x1f26 <M_DIO_enuGetPINValue+0xa4>
	{
		if(DIO_PINx <= DIO_PIND)
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	84 30       	cpi	r24, 0x04	; 4
    1ea4:	e8 f5       	brcc	.+122    	; 0x1f20 <M_DIO_enuGetPINValue+0x9e>
		{
			switch(DIO_PINx)
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	3e 83       	std	Y+6, r19	; 0x06
    1eae:	2d 83       	std	Y+5, r18	; 0x05
    1eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb4:	81 30       	cpi	r24, 0x01	; 1
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	e1 f0       	breq	.+56     	; 0x1ef2 <M_DIO_enuGetPINValue+0x70>
    1eba:	2d 81       	ldd	r18, Y+5	; 0x05
    1ebc:	3e 81       	ldd	r19, Y+6	; 0x06
    1ebe:	22 30       	cpi	r18, 0x02	; 2
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	2c f4       	brge	.+10     	; 0x1ece <M_DIO_enuGetPINValue+0x4c>
    1ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	61 f0       	breq	.+24     	; 0x1ee4 <M_DIO_enuGetPINValue+0x62>
    1ecc:	26 c0       	rjmp	.+76     	; 0x1f1a <M_DIO_enuGetPINValue+0x98>
    1ece:	2d 81       	ldd	r18, Y+5	; 0x05
    1ed0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ed2:	22 30       	cpi	r18, 0x02	; 2
    1ed4:	31 05       	cpc	r19, r1
    1ed6:	a1 f0       	breq	.+40     	; 0x1f00 <M_DIO_enuGetPINValue+0x7e>
    1ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eda:	9e 81       	ldd	r25, Y+6	; 0x06
    1edc:	83 30       	cpi	r24, 0x03	; 3
    1ede:	91 05       	cpc	r25, r1
    1ee0:	b1 f0       	breq	.+44     	; 0x1f0e <M_DIO_enuGetPINValue+0x8c>
    1ee2:	1b c0       	rjmp	.+54     	; 0x1f1a <M_DIO_enuGetPINValue+0x98>
			{
				case DIO_PINA : *Copy_pu8ReadPIN = PINA;break;
    1ee4:	e9 e3       	ldi	r30, 0x39	; 57
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	ea 81       	ldd	r30, Y+2	; 0x02
    1eec:	fb 81       	ldd	r31, Y+3	; 0x03
    1eee:	80 83       	st	Z, r24
    1ef0:	14 c0       	rjmp	.+40     	; 0x1f1a <M_DIO_enuGetPINValue+0x98>
				case DIO_PINB : *Copy_pu8ReadPIN = PINB;break;
    1ef2:	e6 e3       	ldi	r30, 0x36	; 54
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	ea 81       	ldd	r30, Y+2	; 0x02
    1efa:	fb 81       	ldd	r31, Y+3	; 0x03
    1efc:	80 83       	st	Z, r24
    1efe:	0d c0       	rjmp	.+26     	; 0x1f1a <M_DIO_enuGetPINValue+0x98>
				case DIO_PINC : *Copy_pu8ReadPIN = PINC;break;
    1f00:	e3 e3       	ldi	r30, 0x33	; 51
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	ea 81       	ldd	r30, Y+2	; 0x02
    1f08:	fb 81       	ldd	r31, Y+3	; 0x03
    1f0a:	80 83       	st	Z, r24
    1f0c:	06 c0       	rjmp	.+12     	; 0x1f1a <M_DIO_enuGetPINValue+0x98>
				case DIO_PIND : *Copy_pu8ReadPIN = PIND;break;
    1f0e:	e0 e3       	ldi	r30, 0x30	; 48
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	ea 81       	ldd	r30, Y+2	; 0x02
    1f16:	fb 81       	ldd	r31, Y+3	; 0x03
    1f18:	80 83       	st	Z, r24
			}
			return ES_OK;
    1f1a:	91 e0       	ldi	r25, 0x01	; 1
    1f1c:	9c 83       	std	Y+4, r25	; 0x04
    1f1e:	05 c0       	rjmp	.+10     	; 0x1f2a <M_DIO_enuGetPINValue+0xa8>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    1f20:	22 e0       	ldi	r18, 0x02	; 2
    1f22:	2c 83       	std	Y+4, r18	; 0x04
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <M_DIO_enuGetPINValue+0xa8>
		}
	}else
	{
		return ES_NULL_POINTER;
    1f26:	33 e0       	ldi	r19, 0x03	; 3
    1f28:	3c 83       	std	Y+4, r19	; 0x04
    1f2a:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return ES_NOK;
}
    1f2c:	26 96       	adiw	r28, 0x06	; 6
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <M_DIO_enuGetPinValue>:

@return	:	Error State value

*/
ES_t M_DIO_enuGetPinValue(DIO_PIN DIO_PINx,DIO_Pin DIO_Pinx, u8* Copy_pu8ReadPin)
{
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	27 97       	sbiw	r28, 0x07	; 7
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	cd bf       	out	0x3d, r28	; 61
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	6a 83       	std	Y+2, r22	; 0x02
    1f56:	5c 83       	std	Y+4, r21	; 0x04
    1f58:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_pu8ReadPin != NULL)
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <M_DIO_enuGetPinValue+0x26>
    1f62:	7e c0       	rjmp	.+252    	; 0x2060 <M_DIO_enuGetPinValue+0x122>
		{
			if(DIO_PINx <= DIO_PIND && DIO_Pinx<=DIO_Pin7)
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	84 30       	cpi	r24, 0x04	; 4
    1f68:	08 f0       	brcs	.+2      	; 0x1f6c <M_DIO_enuGetPinValue+0x2e>
    1f6a:	77 c0       	rjmp	.+238    	; 0x205a <M_DIO_enuGetPinValue+0x11c>
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	88 30       	cpi	r24, 0x08	; 8
    1f70:	08 f0       	brcs	.+2      	; 0x1f74 <M_DIO_enuGetPinValue+0x36>
    1f72:	73 c0       	rjmp	.+230    	; 0x205a <M_DIO_enuGetPinValue+0x11c>
			{
				switch(DIO_PINx)
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	3f 83       	std	Y+7, r19	; 0x07
    1f7c:	2e 83       	std	Y+6, r18	; 0x06
    1f7e:	4e 81       	ldd	r20, Y+6	; 0x06
    1f80:	5f 81       	ldd	r21, Y+7	; 0x07
    1f82:	41 30       	cpi	r20, 0x01	; 1
    1f84:	51 05       	cpc	r21, r1
    1f86:	59 f1       	breq	.+86     	; 0x1fde <M_DIO_enuGetPinValue+0xa0>
    1f88:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f8c:	82 30       	cpi	r24, 0x02	; 2
    1f8e:	91 05       	cpc	r25, r1
    1f90:	34 f4       	brge	.+12     	; 0x1f9e <M_DIO_enuGetPinValue+0x60>
    1f92:	2e 81       	ldd	r18, Y+6	; 0x06
    1f94:	3f 81       	ldd	r19, Y+7	; 0x07
    1f96:	21 15       	cp	r18, r1
    1f98:	31 05       	cpc	r19, r1
    1f9a:	69 f0       	breq	.+26     	; 0x1fb6 <M_DIO_enuGetPinValue+0x78>
    1f9c:	5b c0       	rjmp	.+182    	; 0x2054 <M_DIO_enuGetPinValue+0x116>
    1f9e:	4e 81       	ldd	r20, Y+6	; 0x06
    1fa0:	5f 81       	ldd	r21, Y+7	; 0x07
    1fa2:	42 30       	cpi	r20, 0x02	; 2
    1fa4:	51 05       	cpc	r21, r1
    1fa6:	79 f1       	breq	.+94     	; 0x2006 <M_DIO_enuGetPinValue+0xc8>
    1fa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1faa:	9f 81       	ldd	r25, Y+7	; 0x07
    1fac:	83 30       	cpi	r24, 0x03	; 3
    1fae:	91 05       	cpc	r25, r1
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <M_DIO_enuGetPinValue+0x76>
    1fb2:	3d c0       	rjmp	.+122    	; 0x202e <M_DIO_enuGetPinValue+0xf0>
    1fb4:	4f c0       	rjmp	.+158    	; 0x2054 <M_DIO_enuGetPinValue+0x116>
				{
					case DIO_PINA : *Copy_pu8ReadPin = GET_BIT(PINA,DIO_Pinx) ;break;
    1fb6:	e9 e3       	ldi	r30, 0x39	; 57
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	88 2f       	mov	r24, r24
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a9 01       	movw	r20, r18
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <M_DIO_enuGetPinValue+0x90>
    1fca:	55 95       	asr	r21
    1fcc:	47 95       	ror	r20
    1fce:	8a 95       	dec	r24
    1fd0:	e2 f7       	brpl	.-8      	; 0x1fca <M_DIO_enuGetPinValue+0x8c>
    1fd2:	ca 01       	movw	r24, r20
    1fd4:	81 70       	andi	r24, 0x01	; 1
    1fd6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd8:	fc 81       	ldd	r31, Y+4	; 0x04
    1fda:	80 83       	st	Z, r24
    1fdc:	3b c0       	rjmp	.+118    	; 0x2054 <M_DIO_enuGetPinValue+0x116>
					case DIO_PINB : *Copy_pu8ReadPin = GET_BIT(PINB,DIO_Pinx) ;break;
    1fde:	e6 e3       	ldi	r30, 0x36	; 54
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	88 2f       	mov	r24, r24
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a9 01       	movw	r20, r18
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <M_DIO_enuGetPinValue+0xb8>
    1ff2:	55 95       	asr	r21
    1ff4:	47 95       	ror	r20
    1ff6:	8a 95       	dec	r24
    1ff8:	e2 f7       	brpl	.-8      	; 0x1ff2 <M_DIO_enuGetPinValue+0xb4>
    1ffa:	ca 01       	movw	r24, r20
    1ffc:	81 70       	andi	r24, 0x01	; 1
    1ffe:	eb 81       	ldd	r30, Y+3	; 0x03
    2000:	fc 81       	ldd	r31, Y+4	; 0x04
    2002:	80 83       	st	Z, r24
    2004:	27 c0       	rjmp	.+78     	; 0x2054 <M_DIO_enuGetPinValue+0x116>
					case DIO_PINC : *Copy_pu8ReadPin = GET_BIT(PINC,DIO_Pinx) ;break;
    2006:	e3 e3       	ldi	r30, 0x33	; 51
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	88 2f       	mov	r24, r24
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a9 01       	movw	r20, r18
    2018:	02 c0       	rjmp	.+4      	; 0x201e <M_DIO_enuGetPinValue+0xe0>
    201a:	55 95       	asr	r21
    201c:	47 95       	ror	r20
    201e:	8a 95       	dec	r24
    2020:	e2 f7       	brpl	.-8      	; 0x201a <M_DIO_enuGetPinValue+0xdc>
    2022:	ca 01       	movw	r24, r20
    2024:	81 70       	andi	r24, 0x01	; 1
    2026:	eb 81       	ldd	r30, Y+3	; 0x03
    2028:	fc 81       	ldd	r31, Y+4	; 0x04
    202a:	80 83       	st	Z, r24
    202c:	13 c0       	rjmp	.+38     	; 0x2054 <M_DIO_enuGetPinValue+0x116>
					case DIO_PIND : *Copy_pu8ReadPin = GET_BIT(PIND,DIO_Pinx) ;break;
    202e:	e0 e3       	ldi	r30, 0x30	; 48
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	88 2f       	mov	r24, r24
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	a9 01       	movw	r20, r18
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <M_DIO_enuGetPinValue+0x108>
    2042:	55 95       	asr	r21
    2044:	47 95       	ror	r20
    2046:	8a 95       	dec	r24
    2048:	e2 f7       	brpl	.-8      	; 0x2042 <M_DIO_enuGetPinValue+0x104>
    204a:	ca 01       	movw	r24, r20
    204c:	81 70       	andi	r24, 0x01	; 1
    204e:	eb 81       	ldd	r30, Y+3	; 0x03
    2050:	fc 81       	ldd	r31, Y+4	; 0x04
    2052:	80 83       	st	Z, r24
				}
				return ES_OK;
    2054:	51 e0       	ldi	r21, 0x01	; 1
    2056:	5d 83       	std	Y+5, r21	; 0x05
    2058:	05 c0       	rjmp	.+10     	; 0x2064 <M_DIO_enuGetPinValue+0x126>
			}
			else
			{
				return ES_OUT_OF_RANGE;
    205a:	82 e0       	ldi	r24, 0x02	; 2
    205c:	8d 83       	std	Y+5, r24	; 0x05
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <M_DIO_enuGetPinValue+0x126>
			}
		}else
		{
			return ES_NULL_POINTER;
    2060:	93 e0       	ldi	r25, 0x03	; 3
    2062:	9d 83       	std	Y+5, r25	; 0x05
    2064:	8d 81       	ldd	r24, Y+5	; 0x05
		}
		return ES_NOK;
}
    2066:	27 96       	adiw	r28, 0x07	; 7
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <M_DIO_enuTogglePortValue>:

@return	:	Error State value

*/
ES_t M_DIO_enuTogglePortValue(DIO_PORT DIO_PORTx)
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	00 d0       	rcall	.+0      	; 0x207e <M_DIO_enuTogglePortValue+0x6>
    207e:	00 d0       	rcall	.+0      	; 0x2080 <M_DIO_enuTogglePortValue+0x8>
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	89 83       	std	Y+1, r24	; 0x01
	if(DIO_PORTx <=DIO_PORTD)
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	84 30       	cpi	r24, 0x04	; 4
    208a:	08 f0       	brcs	.+2      	; 0x208e <M_DIO_enuTogglePortValue+0x16>
    208c:	41 c0       	rjmp	.+130    	; 0x2110 <M_DIO_enuTogglePortValue+0x98>
	{
		switch(DIO_PORTx)
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	3c 83       	std	Y+4, r19	; 0x04
    2096:	2b 83       	std	Y+3, r18	; 0x03
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	91 05       	cpc	r25, r1
    20a0:	e9 f0       	breq	.+58     	; 0x20dc <M_DIO_enuTogglePortValue+0x64>
    20a2:	2b 81       	ldd	r18, Y+3	; 0x03
    20a4:	3c 81       	ldd	r19, Y+4	; 0x04
    20a6:	22 30       	cpi	r18, 0x02	; 2
    20a8:	31 05       	cpc	r19, r1
    20aa:	2c f4       	brge	.+10     	; 0x20b6 <M_DIO_enuTogglePortValue+0x3e>
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	9c 81       	ldd	r25, Y+4	; 0x04
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	61 f0       	breq	.+24     	; 0x20cc <M_DIO_enuTogglePortValue+0x54>
    20b4:	2a c0       	rjmp	.+84     	; 0x210a <M_DIO_enuTogglePortValue+0x92>
    20b6:	2b 81       	ldd	r18, Y+3	; 0x03
    20b8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ba:	22 30       	cpi	r18, 0x02	; 2
    20bc:	31 05       	cpc	r19, r1
    20be:	b1 f0       	breq	.+44     	; 0x20ec <M_DIO_enuTogglePortValue+0x74>
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	83 30       	cpi	r24, 0x03	; 3
    20c6:	91 05       	cpc	r25, r1
    20c8:	c9 f0       	breq	.+50     	; 0x20fc <M_DIO_enuTogglePortValue+0x84>
    20ca:	1f c0       	rjmp	.+62     	; 0x210a <M_DIO_enuTogglePortValue+0x92>
				{
				case DIO_PORTA : PORTA ^= 0xFF;break;
    20cc:	ab e3       	ldi	r26, 0x3B	; 59
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	eb e3       	ldi	r30, 0x3B	; 59
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	80 95       	com	r24
    20d8:	8c 93       	st	X, r24
    20da:	17 c0       	rjmp	.+46     	; 0x210a <M_DIO_enuTogglePortValue+0x92>
				case DIO_PORTB : PORTB ^= 0xFF;break;
    20dc:	a8 e3       	ldi	r26, 0x38	; 56
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e8 e3       	ldi	r30, 0x38	; 56
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	80 95       	com	r24
    20e8:	8c 93       	st	X, r24
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <M_DIO_enuTogglePortValue+0x92>
				case DIO_PORTC : PORTC ^= 0xFF;break;
    20ec:	a5 e3       	ldi	r26, 0x35	; 53
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e5 e3       	ldi	r30, 0x35	; 53
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	80 95       	com	r24
    20f8:	8c 93       	st	X, r24
    20fa:	07 c0       	rjmp	.+14     	; 0x210a <M_DIO_enuTogglePortValue+0x92>
				case DIO_PORTD : PORTD ^= 0xFF;break;
    20fc:	a2 e3       	ldi	r26, 0x32	; 50
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e2 e3       	ldi	r30, 0x32	; 50
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	80 95       	com	r24
    2108:	8c 93       	st	X, r24
				}
				return ES_OK;
    210a:	91 e0       	ldi	r25, 0x01	; 1
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <M_DIO_enuTogglePortValue+0x9c>
	}else
	{
		return ES_OUT_OF_RANGE;
    2110:	22 e0       	ldi	r18, 0x02	; 2
    2112:	2a 83       	std	Y+2, r18	; 0x02
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
	}
	return ES_NOK;
}
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <M_DIO_enuTogglePinValue>:

@return	:	Error State value

*/
ES_t M_DIO_enuTogglePinValue(DIO_PORT DIO_PORTx,DIO_Pin DIO_Pinx)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <M_DIO_enuTogglePinValue+0x6>
    212a:	00 d0       	rcall	.+0      	; 0x212c <M_DIO_enuTogglePinValue+0x8>
    212c:	0f 92       	push	r0
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	6a 83       	std	Y+2, r22	; 0x02
	if(DIO_PORTx <= DIO_PORTD && DIO_Pinx <= DIO_Pin7)
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	84 30       	cpi	r24, 0x04	; 4
    213a:	08 f0       	brcs	.+2      	; 0x213e <M_DIO_enuTogglePinValue+0x1a>
    213c:	75 c0       	rjmp	.+234    	; 0x2228 <M_DIO_enuTogglePinValue+0x104>
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	88 30       	cpi	r24, 0x08	; 8
    2142:	08 f0       	brcs	.+2      	; 0x2146 <M_DIO_enuTogglePinValue+0x22>
    2144:	71 c0       	rjmp	.+226    	; 0x2228 <M_DIO_enuTogglePinValue+0x104>
			{
				switch(DIO_PORTx)
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	3d 83       	std	Y+5, r19	; 0x05
    214e:	2c 83       	std	Y+4, r18	; 0x04
    2150:	8c 81       	ldd	r24, Y+4	; 0x04
    2152:	9d 81       	ldd	r25, Y+5	; 0x05
    2154:	81 30       	cpi	r24, 0x01	; 1
    2156:	91 05       	cpc	r25, r1
    2158:	49 f1       	breq	.+82     	; 0x21ac <M_DIO_enuTogglePinValue+0x88>
    215a:	2c 81       	ldd	r18, Y+4	; 0x04
    215c:	3d 81       	ldd	r19, Y+5	; 0x05
    215e:	22 30       	cpi	r18, 0x02	; 2
    2160:	31 05       	cpc	r19, r1
    2162:	2c f4       	brge	.+10     	; 0x216e <M_DIO_enuTogglePinValue+0x4a>
    2164:	8c 81       	ldd	r24, Y+4	; 0x04
    2166:	9d 81       	ldd	r25, Y+5	; 0x05
    2168:	00 97       	sbiw	r24, 0x00	; 0
    216a:	61 f0       	breq	.+24     	; 0x2184 <M_DIO_enuTogglePinValue+0x60>
    216c:	5a c0       	rjmp	.+180    	; 0x2222 <M_DIO_enuTogglePinValue+0xfe>
    216e:	2c 81       	ldd	r18, Y+4	; 0x04
    2170:	3d 81       	ldd	r19, Y+5	; 0x05
    2172:	22 30       	cpi	r18, 0x02	; 2
    2174:	31 05       	cpc	r19, r1
    2176:	71 f1       	breq	.+92     	; 0x21d4 <M_DIO_enuTogglePinValue+0xb0>
    2178:	8c 81       	ldd	r24, Y+4	; 0x04
    217a:	9d 81       	ldd	r25, Y+5	; 0x05
    217c:	83 30       	cpi	r24, 0x03	; 3
    217e:	91 05       	cpc	r25, r1
    2180:	e9 f1       	breq	.+122    	; 0x21fc <M_DIO_enuTogglePinValue+0xd8>
    2182:	4f c0       	rjmp	.+158    	; 0x2222 <M_DIO_enuTogglePinValue+0xfe>
				{
					case DIO_PORTA: TGL_BIT(PORTA,DIO_Pinx);break;
    2184:	ab e3       	ldi	r26, 0x3B	; 59
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	eb e3       	ldi	r30, 0x3B	; 59
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	48 2f       	mov	r20, r24
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	28 2f       	mov	r18, r24
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	02 2e       	mov	r0, r18
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <M_DIO_enuTogglePinValue+0x7e>
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	0a 94       	dec	r0
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <M_DIO_enuTogglePinValue+0x7a>
    21a6:	84 27       	eor	r24, r20
    21a8:	8c 93       	st	X, r24
    21aa:	3b c0       	rjmp	.+118    	; 0x2222 <M_DIO_enuTogglePinValue+0xfe>
					case DIO_PORTB: TGL_BIT(PORTB,DIO_Pinx);break;
    21ac:	a8 e3       	ldi	r26, 0x38	; 56
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e8 e3       	ldi	r30, 0x38	; 56
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	48 2f       	mov	r20, r24
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	02 2e       	mov	r0, r18
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <M_DIO_enuTogglePinValue+0xa6>
    21c6:	88 0f       	add	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	0a 94       	dec	r0
    21cc:	e2 f7       	brpl	.-8      	; 0x21c6 <M_DIO_enuTogglePinValue+0xa2>
    21ce:	84 27       	eor	r24, r20
    21d0:	8c 93       	st	X, r24
    21d2:	27 c0       	rjmp	.+78     	; 0x2222 <M_DIO_enuTogglePinValue+0xfe>
					case DIO_PORTC: TGL_BIT(PORTC,DIO_Pinx);break;
    21d4:	a5 e3       	ldi	r26, 0x35	; 53
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e5 e3       	ldi	r30, 0x35	; 53
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	48 2f       	mov	r20, r24
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	02 2e       	mov	r0, r18
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <M_DIO_enuTogglePinValue+0xce>
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	0a 94       	dec	r0
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <M_DIO_enuTogglePinValue+0xca>
    21f6:	84 27       	eor	r24, r20
    21f8:	8c 93       	st	X, r24
    21fa:	13 c0       	rjmp	.+38     	; 0x2222 <M_DIO_enuTogglePinValue+0xfe>
					case DIO_PORTD: TGL_BIT(PORTD,DIO_Pinx);break;
    21fc:	a2 e3       	ldi	r26, 0x32	; 50
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e2 e3       	ldi	r30, 0x32	; 50
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	48 2f       	mov	r20, r24
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	28 2f       	mov	r18, r24
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	02 2e       	mov	r0, r18
    2214:	02 c0       	rjmp	.+4      	; 0x221a <M_DIO_enuTogglePinValue+0xf6>
    2216:	88 0f       	add	r24, r24
    2218:	99 1f       	adc	r25, r25
    221a:	0a 94       	dec	r0
    221c:	e2 f7       	brpl	.-8      	; 0x2216 <M_DIO_enuTogglePinValue+0xf2>
    221e:	84 27       	eor	r24, r20
    2220:	8c 93       	st	X, r24
				}
				return ES_OK;
    2222:	91 e0       	ldi	r25, 0x01	; 1
    2224:	9b 83       	std	Y+3, r25	; 0x03
    2226:	02 c0       	rjmp	.+4      	; 0x222c <M_DIO_enuTogglePinValue+0x108>
			}else
			{
				return ES_OUT_OF_RANGE;
    2228:	22 e0       	ldi	r18, 0x02	; 2
    222a:	2b 83       	std	Y+3, r18	; 0x03
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
			}
			return ES_NOK;
	return ES_NOK;
}
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <ADC_Init>:

@return	:

*/
void ADC_Init(void)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
	/*ADC Enable*/
	SET_BIT(ADCSRA,ADEN);
    2246:	a6 e2       	ldi	r26, 0x26	; 38
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e6 e2       	ldi	r30, 0x26	; 38
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	80 68       	ori	r24, 0x80	; 128
    2252:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,REFS0);
    2254:	a6 e2       	ldi	r26, 0x26	; 38
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e6 e2       	ldi	r30, 0x26	; 38
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	80 64       	ori	r24, 0x40	; 64
    2260:	8c 93       	st	X, r24
	/*channel*/
	ADMUX = ADC_Channel0;
    2262:	e7 e2       	ldi	r30, 0x27	; 39
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 e4       	ldi	r24, 0x40	; 64
    2268:	80 83       	st	Z, r24
	/*Prescaler */
	ADCSRA |= (7U<<0);
    226a:	a6 e2       	ldi	r26, 0x26	; 38
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e6 e2       	ldi	r30, 0x26	; 38
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	87 60       	ori	r24, 0x07	; 7
    2276:	8c 93       	st	X, r24
	/*ADC Interrupt*/
	SET_BIT(ADCSRA,ADIE);
    2278:	a6 e2       	ldi	r26, 0x26	; 38
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e6 e2       	ldi	r30, 0x26	; 38
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	88 60       	ori	r24, 0x08	; 8
    2284:	8c 93       	st	X, r24

}
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <ADC_Start>:

@return	:

*/
void ADC_Start(void)
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
	/*Clear flag*/
	//SET_BIT(ADCSRA,ADIF);
	/*Start Conversion*/
	SET_BIT(ADCSRA,ADSC);
    2294:	a6 e2       	ldi	r26, 0x26	; 38
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e6 e2       	ldi	r30, 0x26	; 38
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	80 64       	ori	r24, 0x40	; 64
    22a0:	8c 93       	st	X, r24
}
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <ADC_Read>:

@return	:

*/
u16 ADC_Read(void)
{
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <ADC_Read+0x6>
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
	u16 L_u8read=0;
    22b2:	1a 82       	std	Y+2, r1	; 0x02
    22b4:	19 82       	std	Y+1, r1	; 0x01
	while(!(GET_BIT(ADCSRA,ADIF)));
    22b6:	e6 e2       	ldi	r30, 0x26	; 38
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	82 95       	swap	r24
    22be:	8f 70       	andi	r24, 0x0F	; 15
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	81 70       	andi	r24, 0x01	; 1
    22c6:	90 70       	andi	r25, 0x00	; 0
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	a9 f3       	breq	.-22     	; 0x22b6 <ADC_Read+0xe>
	L_u8read= ADC;
    22cc:	e4 e2       	ldi	r30, 0x24	; 36
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	91 81       	ldd	r25, Z+1	; 0x01
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01
	return L_u8read;
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	9a 81       	ldd	r25, Y+2	; 0x02
}
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <ADC_Callback>:

@return	:

*/
void ADC_Callback(void(*pAppFun)(void),u16 **pApAppFunParameters,u8 CopyFunParametersNum)
{
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <ADC_Callback+0x6>
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <ADC_Callback+0x8>
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <ADC_Callback+0xa>
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	9b 83       	std	Y+3, r25	; 0x03
    22f6:	8a 83       	std	Y+2, r24	; 0x02
    22f8:	7d 83       	std	Y+5, r23	; 0x05
    22fa:	6c 83       	std	Y+4, r22	; 0x04
    22fc:	4e 83       	std	Y+6, r20	; 0x06
	u8 L_u8iter;
	ADC_AppFun = pAppFun;
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	9b 81       	ldd	r25, Y+3	; 0x03
    2302:	90 93 14 02 	sts	0x0214, r25
    2306:	80 93 13 02 	sts	0x0213, r24
	if(CopyFunParametersNum <=8 && CopyFunParametersNum>0)
    230a:	8e 81       	ldd	r24, Y+6	; 0x06
    230c:	89 30       	cpi	r24, 0x09	; 9
    230e:	30 f5       	brcc	.+76     	; 0x235c <ADC_Callback+0x76>
    2310:	8e 81       	ldd	r24, Y+6	; 0x06
    2312:	88 23       	and	r24, r24
    2314:	19 f1       	breq	.+70     	; 0x235c <ADC_Callback+0x76>
	{
		ADC_pAppFunParameterNum=CopyFunParametersNum;
    2316:	8e 81       	ldd	r24, Y+6	; 0x06
    2318:	80 93 15 02 	sts	0x0215, r24
		for(L_u8iter=0; L_u8iter<CopyFunParametersNum;L_u8iter++)
    231c:	19 82       	std	Y+1, r1	; 0x01
    231e:	1a c0       	rjmp	.+52     	; 0x2354 <ADC_Callback+0x6e>
		{
			ADC_pAppFunParameter[L_u8iter]= &(pApAppFunParameters[0][L_u8iter]);
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	48 2f       	mov	r20, r24
    2324:	50 e0       	ldi	r21, 0x00	; 0
    2326:	ec 81       	ldd	r30, Y+4	; 0x04
    2328:	fd 81       	ldd	r31, Y+5	; 0x05
    232a:	80 81       	ld	r24, Z
    232c:	91 81       	ldd	r25, Z+1	; 0x01
    232e:	9c 01       	movw	r18, r24
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	88 2f       	mov	r24, r24
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	88 0f       	add	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	28 0f       	add	r18, r24
    233c:	39 1f       	adc	r19, r25
    233e:	ca 01       	movw	r24, r20
    2340:	88 0f       	add	r24, r24
    2342:	99 1f       	adc	r25, r25
    2344:	fc 01       	movw	r30, r24
    2346:	ee 5f       	subi	r30, 0xFE	; 254
    2348:	fd 4f       	sbci	r31, 0xFD	; 253
    234a:	31 83       	std	Z+1, r19	; 0x01
    234c:	20 83       	st	Z, r18
	u8 L_u8iter;
	ADC_AppFun = pAppFun;
	if(CopyFunParametersNum <=8 && CopyFunParametersNum>0)
	{
		ADC_pAppFunParameterNum=CopyFunParametersNum;
		for(L_u8iter=0; L_u8iter<CopyFunParametersNum;L_u8iter++)
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	8f 5f       	subi	r24, 0xFF	; 255
    2352:	89 83       	std	Y+1, r24	; 0x01
    2354:	99 81       	ldd	r25, Y+1	; 0x01
    2356:	8e 81       	ldd	r24, Y+6	; 0x06
    2358:	98 17       	cp	r25, r24
    235a:	10 f3       	brcs	.-60     	; 0x2320 <ADC_Callback+0x3a>
		{
			ADC_pAppFunParameter[L_u8iter]= &(pApAppFunParameters[0][L_u8iter]);
		}
	}
}
    235c:	26 96       	adiw	r28, 0x06	; 6
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <__vector_16>:
/*====================================================   END_ FUNCTION   ====================================================*/
ISR(ADC_vect_16)
{
    236e:	1f 92       	push	r1
    2370:	0f 92       	push	r0
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	0f 92       	push	r0
    2376:	11 24       	eor	r1, r1
    2378:	2f 93       	push	r18
    237a:	3f 93       	push	r19
    237c:	4f 93       	push	r20
    237e:	5f 93       	push	r21
    2380:	6f 93       	push	r22
    2382:	7f 93       	push	r23
    2384:	8f 93       	push	r24
    2386:	9f 93       	push	r25
    2388:	af 93       	push	r26
    238a:	bf 93       	push	r27
    238c:	ef 93       	push	r30
    238e:	ff 93       	push	r31
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	00 d0       	rcall	.+0      	; 0x2396 <__vector_16+0x28>
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
	static u8 channel=ADC_Channel0;
	static u8 count;
	count++;
    239a:	80 91 12 02 	lds	r24, 0x0212
    239e:	8f 5f       	subi	r24, 0xFF	; 255
    23a0:	80 93 12 02 	sts	0x0212, r24
	switch(channel)
    23a4:	80 91 92 01 	lds	r24, 0x0192
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	3a 83       	std	Y+2, r19	; 0x02
    23ae:	29 83       	std	Y+1, r18	; 0x01
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	84 34       	cpi	r24, 0x44	; 68
    23b6:	91 05       	cpc	r25, r1
    23b8:	09 f4       	brne	.+2      	; 0x23bc <__vector_16+0x4e>
    23ba:	7b c0       	rjmp	.+246    	; 0x24b2 <__vector_16+0x144>
    23bc:	29 81       	ldd	r18, Y+1	; 0x01
    23be:	3a 81       	ldd	r19, Y+2	; 0x02
    23c0:	25 34       	cpi	r18, 0x45	; 69
    23c2:	31 05       	cpc	r19, r1
    23c4:	bc f4       	brge	.+46     	; 0x23f4 <__vector_16+0x86>
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ca:	82 34       	cpi	r24, 0x42	; 66
    23cc:	91 05       	cpc	r25, r1
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <__vector_16+0x64>
    23d0:	4a c0       	rjmp	.+148    	; 0x2466 <__vector_16+0xf8>
    23d2:	29 81       	ldd	r18, Y+1	; 0x01
    23d4:	3a 81       	ldd	r19, Y+2	; 0x02
    23d6:	23 34       	cpi	r18, 0x43	; 67
    23d8:	31 05       	cpc	r19, r1
    23da:	0c f0       	brlt	.+2      	; 0x23de <__vector_16+0x70>
    23dc:	57 c0       	rjmp	.+174    	; 0x248c <__vector_16+0x11e>
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	80 34       	cpi	r24, 0x40	; 64
    23e4:	91 05       	cpc	r25, r1
    23e6:	c9 f0       	breq	.+50     	; 0x241a <__vector_16+0xac>
    23e8:	29 81       	ldd	r18, Y+1	; 0x01
    23ea:	3a 81       	ldd	r19, Y+2	; 0x02
    23ec:	21 34       	cpi	r18, 0x41	; 65
    23ee:	31 05       	cpc	r19, r1
    23f0:	39 f1       	breq	.+78     	; 0x2440 <__vector_16+0xd2>
    23f2:	af c0       	rjmp	.+350    	; 0x2552 <__vector_16+0x1e4>
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	9a 81       	ldd	r25, Y+2	; 0x02
    23f8:	86 34       	cpi	r24, 0x46	; 70
    23fa:	91 05       	cpc	r25, r1
    23fc:	09 f4       	brne	.+2      	; 0x2400 <__vector_16+0x92>
    23fe:	7f c0       	rjmp	.+254    	; 0x24fe <__vector_16+0x190>
    2400:	29 81       	ldd	r18, Y+1	; 0x01
    2402:	3a 81       	ldd	r19, Y+2	; 0x02
    2404:	26 34       	cpi	r18, 0x46	; 70
    2406:	31 05       	cpc	r19, r1
    2408:	0c f4       	brge	.+2      	; 0x240c <__vector_16+0x9e>
    240a:	66 c0       	rjmp	.+204    	; 0x24d8 <__vector_16+0x16a>
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	9a 81       	ldd	r25, Y+2	; 0x02
    2410:	87 34       	cpi	r24, 0x47	; 71
    2412:	91 05       	cpc	r25, r1
    2414:	09 f4       	brne	.+2      	; 0x2418 <__vector_16+0xaa>
    2416:	86 c0       	rjmp	.+268    	; 0x2524 <__vector_16+0x1b6>
    2418:	9c c0       	rjmp	.+312    	; 0x2552 <__vector_16+0x1e4>
	{
		case ADC_Channel0:
		*ADC_pAppFunParameter[0]=ADC;
    241a:	a0 91 02 02 	lds	r26, 0x0202
    241e:	b0 91 03 02 	lds	r27, 0x0203
    2422:	e4 e2       	ldi	r30, 0x24	; 36
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	91 81       	ldd	r25, Z+1	; 0x01
    242a:	11 96       	adiw	r26, 0x01	; 1
    242c:	9c 93       	st	X, r25
    242e:	8e 93       	st	-X, r24
		ADMUX = ADC_Channel1;
    2430:	e7 e2       	ldi	r30, 0x27	; 39
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	81 e4       	ldi	r24, 0x41	; 65
    2436:	80 83       	st	Z, r24
		channel=ADC_Channel1;
    2438:	81 e4       	ldi	r24, 0x41	; 65
    243a:	80 93 92 01 	sts	0x0192, r24
    243e:	89 c0       	rjmp	.+274    	; 0x2552 <__vector_16+0x1e4>
		break;
		case ADC_Channel1:
		*ADC_pAppFunParameter[1]=ADC;
    2440:	a0 91 04 02 	lds	r26, 0x0204
    2444:	b0 91 05 02 	lds	r27, 0x0205
    2448:	e4 e2       	ldi	r30, 0x24	; 36
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	91 81       	ldd	r25, Z+1	; 0x01
    2450:	11 96       	adiw	r26, 0x01	; 1
    2452:	9c 93       	st	X, r25
    2454:	8e 93       	st	-X, r24
		ADMUX = ADC_Channel2;
    2456:	e7 e2       	ldi	r30, 0x27	; 39
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	82 e4       	ldi	r24, 0x42	; 66
    245c:	80 83       	st	Z, r24
		channel=ADC_Channel2;
    245e:	82 e4       	ldi	r24, 0x42	; 66
    2460:	80 93 92 01 	sts	0x0192, r24
    2464:	76 c0       	rjmp	.+236    	; 0x2552 <__vector_16+0x1e4>
		break;
		case ADC_Channel2:
		*ADC_pAppFunParameter[2]=ADC;
    2466:	a0 91 06 02 	lds	r26, 0x0206
    246a:	b0 91 07 02 	lds	r27, 0x0207
    246e:	e4 e2       	ldi	r30, 0x24	; 36
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	91 81       	ldd	r25, Z+1	; 0x01
    2476:	11 96       	adiw	r26, 0x01	; 1
    2478:	9c 93       	st	X, r25
    247a:	8e 93       	st	-X, r24
		ADMUX = ADC_Channel3;
    247c:	e7 e2       	ldi	r30, 0x27	; 39
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	83 e4       	ldi	r24, 0x43	; 67
    2482:	80 83       	st	Z, r24
		channel=ADC_Channel3;
    2484:	83 e4       	ldi	r24, 0x43	; 67
    2486:	80 93 92 01 	sts	0x0192, r24
    248a:	63 c0       	rjmp	.+198    	; 0x2552 <__vector_16+0x1e4>
		break;
		case ADC_Channel3:
		*ADC_pAppFunParameter[3]=ADC;
    248c:	a0 91 08 02 	lds	r26, 0x0208
    2490:	b0 91 09 02 	lds	r27, 0x0209
    2494:	e4 e2       	ldi	r30, 0x24	; 36
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	91 81       	ldd	r25, Z+1	; 0x01
    249c:	11 96       	adiw	r26, 0x01	; 1
    249e:	9c 93       	st	X, r25
    24a0:	8e 93       	st	-X, r24
		ADMUX = ADC_Channel4;
    24a2:	e7 e2       	ldi	r30, 0x27	; 39
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	84 e4       	ldi	r24, 0x44	; 68
    24a8:	80 83       	st	Z, r24
		channel=ADC_Channel4;
    24aa:	84 e4       	ldi	r24, 0x44	; 68
    24ac:	80 93 92 01 	sts	0x0192, r24
    24b0:	50 c0       	rjmp	.+160    	; 0x2552 <__vector_16+0x1e4>
		break;
		case ADC_Channel4:
				*ADC_pAppFunParameter[4]=ADC;
    24b2:	a0 91 0a 02 	lds	r26, 0x020A
    24b6:	b0 91 0b 02 	lds	r27, 0x020B
    24ba:	e4 e2       	ldi	r30, 0x24	; 36
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	91 81       	ldd	r25, Z+1	; 0x01
    24c2:	11 96       	adiw	r26, 0x01	; 1
    24c4:	9c 93       	st	X, r25
    24c6:	8e 93       	st	-X, r24
				ADMUX = ADC_Channel5;
    24c8:	e7 e2       	ldi	r30, 0x27	; 39
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	85 e4       	ldi	r24, 0x45	; 69
    24ce:	80 83       	st	Z, r24
				channel=ADC_Channel5;
    24d0:	85 e4       	ldi	r24, 0x45	; 69
    24d2:	80 93 92 01 	sts	0x0192, r24
    24d6:	3d c0       	rjmp	.+122    	; 0x2552 <__vector_16+0x1e4>
				break;
		case ADC_Channel5:
				*ADC_pAppFunParameter[5]=ADC;
    24d8:	a0 91 0c 02 	lds	r26, 0x020C
    24dc:	b0 91 0d 02 	lds	r27, 0x020D
    24e0:	e4 e2       	ldi	r30, 0x24	; 36
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	91 81       	ldd	r25, Z+1	; 0x01
    24e8:	11 96       	adiw	r26, 0x01	; 1
    24ea:	9c 93       	st	X, r25
    24ec:	8e 93       	st	-X, r24
				ADMUX = ADC_Channel6;
    24ee:	e7 e2       	ldi	r30, 0x27	; 39
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	86 e4       	ldi	r24, 0x46	; 70
    24f4:	80 83       	st	Z, r24
				channel=ADC_Channel6;
    24f6:	86 e4       	ldi	r24, 0x46	; 70
    24f8:	80 93 92 01 	sts	0x0192, r24
    24fc:	2a c0       	rjmp	.+84     	; 0x2552 <__vector_16+0x1e4>
				break;
		case ADC_Channel6:
				*ADC_pAppFunParameter[6]=ADC;
    24fe:	a0 91 0e 02 	lds	r26, 0x020E
    2502:	b0 91 0f 02 	lds	r27, 0x020F
    2506:	e4 e2       	ldi	r30, 0x24	; 36
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	91 81       	ldd	r25, Z+1	; 0x01
    250e:	11 96       	adiw	r26, 0x01	; 1
    2510:	9c 93       	st	X, r25
    2512:	8e 93       	st	-X, r24
				ADMUX = ADC_Channel7;
    2514:	e7 e2       	ldi	r30, 0x27	; 39
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	87 e4       	ldi	r24, 0x47	; 71
    251a:	80 83       	st	Z, r24
				channel=ADC_Channel7;
    251c:	87 e4       	ldi	r24, 0x47	; 71
    251e:	80 93 92 01 	sts	0x0192, r24
    2522:	17 c0       	rjmp	.+46     	; 0x2552 <__vector_16+0x1e4>
				break;
		case ADC_Channel7:
		*ADC_pAppFunParameter[7]=ADC;
    2524:	a0 91 10 02 	lds	r26, 0x0210
    2528:	b0 91 11 02 	lds	r27, 0x0211
    252c:	e4 e2       	ldi	r30, 0x24	; 36
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	91 81       	ldd	r25, Z+1	; 0x01
    2534:	11 96       	adiw	r26, 0x01	; 1
    2536:	9c 93       	st	X, r25
    2538:	8e 93       	st	-X, r24
		ADMUX = ADC_Channel0;
    253a:	e7 e2       	ldi	r30, 0x27	; 39
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 e4       	ldi	r24, 0x40	; 64
    2540:	80 83       	st	Z, r24
		channel=ADC_Channel0;
    2542:	80 e4       	ldi	r24, 0x40	; 64
    2544:	80 93 92 01 	sts	0x0192, r24
		ADC_AppFun();
    2548:	e0 91 13 02 	lds	r30, 0x0213
    254c:	f0 91 14 02 	lds	r31, 0x0214
    2550:	09 95       	icall
		break;
	}
	if(count == ADC_pAppFunParameterNum)
    2552:	90 91 12 02 	lds	r25, 0x0212
    2556:	80 91 15 02 	lds	r24, 0x0215
    255a:	98 17       	cp	r25, r24
    255c:	41 f4       	brne	.+16     	; 0x256e <__vector_16+0x200>
	{
		count = 0;
    255e:	10 92 12 02 	sts	0x0212, r1
		ADC_AppFun();
    2562:	e0 91 13 02 	lds	r30, 0x0213
    2566:	f0 91 14 02 	lds	r31, 0x0214
    256a:	09 95       	icall
    256c:	07 c0       	rjmp	.+14     	; 0x257c <__vector_16+0x20e>
	}else
	{
		/*Start Conversion*/
		SET_BIT(ADCSRA,ADSC);
    256e:	a6 e2       	ldi	r26, 0x26	; 38
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	e6 e2       	ldi	r30, 0x26	; 38
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	80 64       	ori	r24, 0x40	; 64
    257a:	8c 93       	st	X, r24
	}
}
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	ff 91       	pop	r31
    2586:	ef 91       	pop	r30
    2588:	bf 91       	pop	r27
    258a:	af 91       	pop	r26
    258c:	9f 91       	pop	r25
    258e:	8f 91       	pop	r24
    2590:	7f 91       	pop	r23
    2592:	6f 91       	pop	r22
    2594:	5f 91       	pop	r21
    2596:	4f 91       	pop	r20
    2598:	3f 91       	pop	r19
    259a:	2f 91       	pop	r18
    259c:	0f 90       	pop	r0
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	0f 90       	pop	r0
    25a2:	1f 90       	pop	r1
    25a4:	18 95       	reti

000025a6 <Switch_enuInit>:
#include "Switch_Private.h"
#include "Switch_Interface.h"

extern u8 Switch_u8SwitchNum;
ES_t Switch_enuInit(Switch_t *Copy_pAstrSwitchConfig)
{
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <Switch_enuInit+0x6>
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <Switch_enuInit+0x8>
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	9c 83       	std	Y+4, r25	; 0x04
    25b4:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = ES_NOK;
    25b6:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pAstrSwitchConfig != NULL)
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	9c 81       	ldd	r25, Y+4	; 0x04
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	09 f4       	brne	.+2      	; 0x25c2 <Switch_enuInit+0x1c>
    25c0:	5e c0       	rjmp	.+188    	; 0x267e <Switch_enuInit+0xd8>
	{
		ES_t Local_u8Iter = 0;
    25c2:	19 82       	std	Y+1, r1	; 0x01
    25c4:	53 c0       	rjmp	.+166    	; 0x266c <Switch_enuInit+0xc6>
		for(;Local_u8Iter < Switch_u8SwitchNum ; Local_u8Iter++)
		{
			M_DIO_enuSetPinDirection(Copy_pAstrSwitchConfig[Local_u8Iter].Switch_port, Copy_pAstrSwitchConfig[Local_u8Iter].Switch_Pin, DIO_Direction_Input);
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	28 2f       	mov	r18, r24
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	c9 01       	movw	r24, r18
    25ce:	88 0f       	add	r24, r24
    25d0:	99 1f       	adc	r25, r25
    25d2:	28 0f       	add	r18, r24
    25d4:	39 1f       	adc	r19, r25
    25d6:	8b 81       	ldd	r24, Y+3	; 0x03
    25d8:	9c 81       	ldd	r25, Y+4	; 0x04
    25da:	fc 01       	movw	r30, r24
    25dc:	e2 0f       	add	r30, r18
    25de:	f3 1f       	adc	r31, r19
    25e0:	40 81       	ld	r20, Z
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	c9 01       	movw	r24, r18
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	28 0f       	add	r18, r24
    25f0:	39 1f       	adc	r19, r25
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	9c 81       	ldd	r25, Y+4	; 0x04
    25f6:	fc 01       	movw	r30, r24
    25f8:	e2 0f       	add	r30, r18
    25fa:	f3 1f       	adc	r31, r19
    25fc:	91 81       	ldd	r25, Z+1	; 0x01
    25fe:	84 2f       	mov	r24, r20
    2600:	69 2f       	mov	r22, r25
    2602:	40 e0       	ldi	r20, 0x00	; 0
    2604:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
			M_DIO_enuSetPinValue(Copy_pAstrSwitchConfig[Local_u8Iter].Switch_port, Copy_pAstrSwitchConfig[Local_u8Iter].Switch_Pin, Copy_pAstrSwitchConfig[Local_u8Iter].Switch_Type);
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	28 2f       	mov	r18, r24
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	c9 01       	movw	r24, r18
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	28 0f       	add	r18, r24
    2616:	39 1f       	adc	r19, r25
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	9c 81       	ldd	r25, Y+4	; 0x04
    261c:	fc 01       	movw	r30, r24
    261e:	e2 0f       	add	r30, r18
    2620:	f3 1f       	adc	r31, r19
    2622:	50 81       	ld	r21, Z
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	28 2f       	mov	r18, r24
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	c9 01       	movw	r24, r18
    262c:	88 0f       	add	r24, r24
    262e:	99 1f       	adc	r25, r25
    2630:	28 0f       	add	r18, r24
    2632:	39 1f       	adc	r19, r25
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	9c 81       	ldd	r25, Y+4	; 0x04
    2638:	fc 01       	movw	r30, r24
    263a:	e2 0f       	add	r30, r18
    263c:	f3 1f       	adc	r31, r19
    263e:	41 81       	ldd	r20, Z+1	; 0x01
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	28 2f       	mov	r18, r24
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	c9 01       	movw	r24, r18
    2648:	88 0f       	add	r24, r24
    264a:	99 1f       	adc	r25, r25
    264c:	28 0f       	add	r18, r24
    264e:	39 1f       	adc	r19, r25
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	9c 81       	ldd	r25, Y+4	; 0x04
    2654:	fc 01       	movw	r30, r24
    2656:	e2 0f       	add	r30, r18
    2658:	f3 1f       	adc	r31, r19
    265a:	92 81       	ldd	r25, Z+2	; 0x02
    265c:	85 2f       	mov	r24, r21
    265e:	64 2f       	mov	r22, r20
    2660:	49 2f       	mov	r20, r25
    2662:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
{
	u8 Local_u8ErrorState = ES_NOK;
	if(Copy_pAstrSwitchConfig != NULL)
	{
		ES_t Local_u8Iter = 0;
		for(;Local_u8Iter < Switch_u8SwitchNum ; Local_u8Iter++)
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	8f 5f       	subi	r24, 0xFF	; 255
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	90 91 93 01 	lds	r25, 0x0193
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	89 17       	cp	r24, r25
    2674:	08 f4       	brcc	.+2      	; 0x2678 <Switch_enuInit+0xd2>
    2676:	a7 cf       	rjmp	.-178    	; 0x25c6 <Switch_enuInit+0x20>
		{
			M_DIO_enuSetPinDirection(Copy_pAstrSwitchConfig[Local_u8Iter].Switch_port, Copy_pAstrSwitchConfig[Local_u8Iter].Switch_Pin, DIO_Direction_Input);
			M_DIO_enuSetPinValue(Copy_pAstrSwitchConfig[Local_u8Iter].Switch_port, Copy_pAstrSwitchConfig[Local_u8Iter].Switch_Pin, Copy_pAstrSwitchConfig[Local_u8Iter].Switch_Type);
		}
		Local_u8ErrorState = ES_OK;
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	8a 83       	std	Y+2, r24	; 0x02
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <Switch_enuInit+0xdc>
	}else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
    267e:	83 e0       	ldi	r24, 0x03	; 3
    2680:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	08 95       	ret

00002692 <Switch_enuGetState>:
ES_t Switch_enuGetState(Switch_t *Copy_pstrSwitchInfo , u8 *Copy_StateGetStateValue)
{
    2692:	df 93       	push	r29
    2694:	cf 93       	push	r28
    2696:	cd b7       	in	r28, 0x3d	; 61
    2698:	de b7       	in	r29, 0x3e	; 62
    269a:	a1 97       	sbiw	r28, 0x21	; 33
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	f8 94       	cli
    26a0:	de bf       	out	0x3e, r29	; 62
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	cd bf       	out	0x3d, r28	; 61
    26a6:	9f 8f       	std	Y+31, r25	; 0x1f
    26a8:	8e 8f       	std	Y+30, r24	; 0x1e
    26aa:	79 a3       	std	Y+33, r23	; 0x21
    26ac:	68 a3       	std	Y+32, r22	; 0x20
	ES_t Local_u8ErrorState = ES_NOK;
    26ae:	1d 8e       	std	Y+29, r1	; 0x1d
	if(Copy_StateGetStateValue!=NULL)
    26b0:	88 a1       	ldd	r24, Y+32	; 0x20
    26b2:	99 a1       	ldd	r25, Y+33	; 0x21
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	09 f4       	brne	.+2      	; 0x26ba <Switch_enuGetState+0x28>
    26b8:	64 c1       	rjmp	.+712    	; 0x2982 <Switch_enuGetState+0x2f0>
	{
		if(Copy_pstrSwitchInfo->Switch_Type == DIO_Type_PullUp)
    26ba:	ee 8d       	ldd	r30, Y+30	; 0x1e
    26bc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    26be:	82 81       	ldd	r24, Z+2	; 0x02
    26c0:	81 30       	cpi	r24, 0x01	; 1
    26c2:	09 f0       	breq	.+2      	; 0x26c6 <Switch_enuGetState+0x34>
    26c4:	ac c0       	rjmp	.+344    	; 0x281e <Switch_enuGetState+0x18c>
		{
			M_DIO_enuGetPinValue(Copy_pstrSwitchInfo->Switch_port, Copy_pstrSwitchInfo->Switch_Pin, Copy_StateGetStateValue);
    26c6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    26c8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    26ca:	80 81       	ld	r24, Z
    26cc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    26ce:	ff 8d       	ldd	r31, Y+31	; 0x1f
    26d0:	91 81       	ldd	r25, Z+1	; 0x01
    26d2:	28 a1       	ldd	r18, Y+32	; 0x20
    26d4:	39 a1       	ldd	r19, Y+33	; 0x21
    26d6:	69 2f       	mov	r22, r25
    26d8:	a9 01       	movw	r20, r18
    26da:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <M_DIO_enuGetPinValue>
			if(!(*Copy_StateGetStateValue))
    26de:	e8 a1       	ldd	r30, Y+32	; 0x20
    26e0:	f9 a1       	ldd	r31, Y+33	; 0x21
    26e2:	80 81       	ld	r24, Z
    26e4:	88 23       	and	r24, r24
    26e6:	09 f0       	breq	.+2      	; 0x26ea <Switch_enuGetState+0x58>
    26e8:	4e c1       	rjmp	.+668    	; 0x2986 <Switch_enuGetState+0x2f4>
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	a0 e2       	ldi	r26, 0x20	; 32
    26f0:	b1 e4       	ldi	r27, 0x41	; 65
    26f2:	89 8f       	std	Y+25, r24	; 0x19
    26f4:	9a 8f       	std	Y+26, r25	; 0x1a
    26f6:	ab 8f       	std	Y+27, r26	; 0x1b
    26f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fa:	69 8d       	ldd	r22, Y+25	; 0x19
    26fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2700:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	4a e7       	ldi	r20, 0x7A	; 122
    2708:	55 e4       	ldi	r21, 0x45	; 69
    270a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	8d 8b       	std	Y+21, r24	; 0x15
    2714:	9e 8b       	std	Y+22, r25	; 0x16
    2716:	af 8b       	std	Y+23, r26	; 0x17
    2718:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    271a:	6d 89       	ldd	r22, Y+21	; 0x15
    271c:	7e 89       	ldd	r23, Y+22	; 0x16
    271e:	8f 89       	ldd	r24, Y+23	; 0x17
    2720:	98 8d       	ldd	r25, Y+24	; 0x18
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e8       	ldi	r20, 0x80	; 128
    2728:	5f e3       	ldi	r21, 0x3F	; 63
    272a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    272e:	88 23       	and	r24, r24
    2730:	2c f4       	brge	.+10     	; 0x273c <Switch_enuGetState+0xaa>
		__ticks = 1;
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	9c 8b       	std	Y+20, r25	; 0x14
    2738:	8b 8b       	std	Y+19, r24	; 0x13
    273a:	3f c0       	rjmp	.+126    	; 0x27ba <Switch_enuGetState+0x128>
	else if (__tmp > 65535)
    273c:	6d 89       	ldd	r22, Y+21	; 0x15
    273e:	7e 89       	ldd	r23, Y+22	; 0x16
    2740:	8f 89       	ldd	r24, Y+23	; 0x17
    2742:	98 8d       	ldd	r25, Y+24	; 0x18
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	3f ef       	ldi	r19, 0xFF	; 255
    2748:	4f e7       	ldi	r20, 0x7F	; 127
    274a:	57 e4       	ldi	r21, 0x47	; 71
    274c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2750:	18 16       	cp	r1, r24
    2752:	4c f5       	brge	.+82     	; 0x27a6 <Switch_enuGetState+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2754:	69 8d       	ldd	r22, Y+25	; 0x19
    2756:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2758:	8b 8d       	ldd	r24, Y+27	; 0x1b
    275a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e2       	ldi	r20, 0x20	; 32
    2762:	51 e4       	ldi	r21, 0x41	; 65
    2764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	bc 01       	movw	r22, r24
    276e:	cd 01       	movw	r24, r26
    2770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	9c 8b       	std	Y+20, r25	; 0x14
    277a:	8b 8b       	std	Y+19, r24	; 0x13
    277c:	0f c0       	rjmp	.+30     	; 0x279c <Switch_enuGetState+0x10a>
    277e:	80 e9       	ldi	r24, 0x90	; 144
    2780:	91 e0       	ldi	r25, 0x01	; 1
    2782:	9a 8b       	std	Y+18, r25	; 0x12
    2784:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2786:	89 89       	ldd	r24, Y+17	; 0x11
    2788:	9a 89       	ldd	r25, Y+18	; 0x12
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <Switch_enuGetState+0xf8>
    278e:	9a 8b       	std	Y+18, r25	; 0x12
    2790:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2792:	8b 89       	ldd	r24, Y+19	; 0x13
    2794:	9c 89       	ldd	r25, Y+20	; 0x14
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	9c 8b       	std	Y+20, r25	; 0x14
    279a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279c:	8b 89       	ldd	r24, Y+19	; 0x13
    279e:	9c 89       	ldd	r25, Y+20	; 0x14
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	69 f7       	brne	.-38     	; 0x277e <Switch_enuGetState+0xec>
    27a4:	14 c0       	rjmp	.+40     	; 0x27ce <Switch_enuGetState+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a6:	6d 89       	ldd	r22, Y+21	; 0x15
    27a8:	7e 89       	ldd	r23, Y+22	; 0x16
    27aa:	8f 89       	ldd	r24, Y+23	; 0x17
    27ac:	98 8d       	ldd	r25, Y+24	; 0x18
    27ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	9c 8b       	std	Y+20, r25	; 0x14
    27b8:	8b 8b       	std	Y+19, r24	; 0x13
    27ba:	8b 89       	ldd	r24, Y+19	; 0x13
    27bc:	9c 89       	ldd	r25, Y+20	; 0x14
    27be:	98 8b       	std	Y+16, r25	; 0x10
    27c0:	8f 87       	std	Y+15, r24	; 0x0f
    27c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27c4:	98 89       	ldd	r25, Y+16	; 0x10
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <Switch_enuGetState+0x134>
    27ca:	98 8b       	std	Y+16, r25	; 0x10
    27cc:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(10);
				M_DIO_enuGetPinValue(Copy_pstrSwitchInfo->Switch_port, Copy_pstrSwitchInfo->Switch_Pin, Copy_StateGetStateValue);
    27ce:	ee 8d       	ldd	r30, Y+30	; 0x1e
    27d0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    27d2:	80 81       	ld	r24, Z
    27d4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    27d6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    27d8:	91 81       	ldd	r25, Z+1	; 0x01
    27da:	28 a1       	ldd	r18, Y+32	; 0x20
    27dc:	39 a1       	ldd	r19, Y+33	; 0x21
    27de:	69 2f       	mov	r22, r25
    27e0:	a9 01       	movw	r20, r18
    27e2:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <M_DIO_enuGetPinValue>
				if(!(*Copy_StateGetStateValue))
    27e6:	e8 a1       	ldd	r30, Y+32	; 0x20
    27e8:	f9 a1       	ldd	r31, Y+33	; 0x21
    27ea:	80 81       	ld	r24, Z
    27ec:	88 23       	and	r24, r24
    27ee:	09 f0       	breq	.+2      	; 0x27f2 <Switch_enuGetState+0x160>
    27f0:	ca c0       	rjmp	.+404    	; 0x2986 <Switch_enuGetState+0x2f4>
    27f2:	0c c0       	rjmp	.+24     	; 0x280c <Switch_enuGetState+0x17a>
				{
					while(!(*Copy_StateGetStateValue))
					{
						M_DIO_enuGetPinValue(Copy_pstrSwitchInfo->Switch_port, Copy_pstrSwitchInfo->Switch_Pin, Copy_StateGetStateValue);
    27f4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    27f6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    27f8:	80 81       	ld	r24, Z
    27fa:	ee 8d       	ldd	r30, Y+30	; 0x1e
    27fc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    27fe:	91 81       	ldd	r25, Z+1	; 0x01
    2800:	28 a1       	ldd	r18, Y+32	; 0x20
    2802:	39 a1       	ldd	r19, Y+33	; 0x21
    2804:	69 2f       	mov	r22, r25
    2806:	a9 01       	movw	r20, r18
    2808:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <M_DIO_enuGetPinValue>
			{
				_delay_ms(10);
				M_DIO_enuGetPinValue(Copy_pstrSwitchInfo->Switch_port, Copy_pstrSwitchInfo->Switch_Pin, Copy_StateGetStateValue);
				if(!(*Copy_StateGetStateValue))
				{
					while(!(*Copy_StateGetStateValue))
    280c:	e8 a1       	ldd	r30, Y+32	; 0x20
    280e:	f9 a1       	ldd	r31, Y+33	; 0x21
    2810:	80 81       	ld	r24, Z
    2812:	88 23       	and	r24, r24
    2814:	79 f3       	breq	.-34     	; 0x27f4 <Switch_enuGetState+0x162>
					{
						M_DIO_enuGetPinValue(Copy_pstrSwitchInfo->Switch_port, Copy_pstrSwitchInfo->Switch_Pin, Copy_StateGetStateValue);
					}
					*Copy_StateGetStateValue = DIO_State_Low;
    2816:	e8 a1       	ldd	r30, Y+32	; 0x20
    2818:	f9 a1       	ldd	r31, Y+33	; 0x21
    281a:	10 82       	st	Z, r1
    281c:	b4 c0       	rjmp	.+360    	; 0x2986 <Switch_enuGetState+0x2f4>
				}

			}
		}else if(Copy_pstrSwitchInfo->Switch_Type == DIO_Type_Float)
    281e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2820:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2822:	82 81       	ldd	r24, Z+2	; 0x02
    2824:	88 23       	and	r24, r24
    2826:	09 f0       	breq	.+2      	; 0x282a <Switch_enuGetState+0x198>
    2828:	ae c0       	rjmp	.+348    	; 0x2986 <Switch_enuGetState+0x2f4>
		{
			M_DIO_enuGetPinValue(Copy_pstrSwitchInfo->Switch_port, Copy_pstrSwitchInfo->Switch_Pin, Copy_StateGetStateValue);
    282a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    282c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    282e:	80 81       	ld	r24, Z
    2830:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2832:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2834:	91 81       	ldd	r25, Z+1	; 0x01
    2836:	28 a1       	ldd	r18, Y+32	; 0x20
    2838:	39 a1       	ldd	r19, Y+33	; 0x21
    283a:	69 2f       	mov	r22, r25
    283c:	a9 01       	movw	r20, r18
    283e:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <M_DIO_enuGetPinValue>
						if(*Copy_StateGetStateValue)
    2842:	e8 a1       	ldd	r30, Y+32	; 0x20
    2844:	f9 a1       	ldd	r31, Y+33	; 0x21
    2846:	80 81       	ld	r24, Z
    2848:	88 23       	and	r24, r24
    284a:	09 f4       	brne	.+2      	; 0x284e <Switch_enuGetState+0x1bc>
    284c:	9c c0       	rjmp	.+312    	; 0x2986 <Switch_enuGetState+0x2f4>
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	a0 e2       	ldi	r26, 0x20	; 32
    2854:	b1 e4       	ldi	r27, 0x41	; 65
    2856:	8b 87       	std	Y+11, r24	; 0x0b
    2858:	9c 87       	std	Y+12, r25	; 0x0c
    285a:	ad 87       	std	Y+13, r26	; 0x0d
    285c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2860:	7c 85       	ldd	r23, Y+12	; 0x0c
    2862:	8d 85       	ldd	r24, Y+13	; 0x0d
    2864:	9e 85       	ldd	r25, Y+14	; 0x0e
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	4a e7       	ldi	r20, 0x7A	; 122
    286c:	55 e4       	ldi	r21, 0x45	; 69
    286e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	8f 83       	std	Y+7, r24	; 0x07
    2878:	98 87       	std	Y+8, r25	; 0x08
    287a:	a9 87       	std	Y+9, r26	; 0x09
    287c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    287e:	6f 81       	ldd	r22, Y+7	; 0x07
    2880:	78 85       	ldd	r23, Y+8	; 0x08
    2882:	89 85       	ldd	r24, Y+9	; 0x09
    2884:	9a 85       	ldd	r25, Y+10	; 0x0a
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e8       	ldi	r20, 0x80	; 128
    288c:	5f e3       	ldi	r21, 0x3F	; 63
    288e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2892:	88 23       	and	r24, r24
    2894:	2c f4       	brge	.+10     	; 0x28a0 <Switch_enuGetState+0x20e>
		__ticks = 1;
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	9e 83       	std	Y+6, r25	; 0x06
    289c:	8d 83       	std	Y+5, r24	; 0x05
    289e:	3f c0       	rjmp	.+126    	; 0x291e <Switch_enuGetState+0x28c>
	else if (__tmp > 65535)
    28a0:	6f 81       	ldd	r22, Y+7	; 0x07
    28a2:	78 85       	ldd	r23, Y+8	; 0x08
    28a4:	89 85       	ldd	r24, Y+9	; 0x09
    28a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	3f ef       	ldi	r19, 0xFF	; 255
    28ac:	4f e7       	ldi	r20, 0x7F	; 127
    28ae:	57 e4       	ldi	r21, 0x47	; 71
    28b0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    28b4:	18 16       	cp	r1, r24
    28b6:	4c f5       	brge	.+82     	; 0x290a <Switch_enuGetState+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    28bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28be:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	40 e2       	ldi	r20, 0x20	; 32
    28c6:	51 e4       	ldi	r21, 0x41	; 65
    28c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	bc 01       	movw	r22, r24
    28d2:	cd 01       	movw	r24, r26
    28d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	9e 83       	std	Y+6, r25	; 0x06
    28de:	8d 83       	std	Y+5, r24	; 0x05
    28e0:	0f c0       	rjmp	.+30     	; 0x2900 <Switch_enuGetState+0x26e>
    28e2:	80 e9       	ldi	r24, 0x90	; 144
    28e4:	91 e0       	ldi	r25, 0x01	; 1
    28e6:	9c 83       	std	Y+4, r25	; 0x04
    28e8:	8b 83       	std	Y+3, r24	; 0x03
    28ea:	8b 81       	ldd	r24, Y+3	; 0x03
    28ec:	9c 81       	ldd	r25, Y+4	; 0x04
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <Switch_enuGetState+0x25c>
    28f2:	9c 83       	std	Y+4, r25	; 0x04
    28f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f6:	8d 81       	ldd	r24, Y+5	; 0x05
    28f8:	9e 81       	ldd	r25, Y+6	; 0x06
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	9e 83       	std	Y+6, r25	; 0x06
    28fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2900:	8d 81       	ldd	r24, Y+5	; 0x05
    2902:	9e 81       	ldd	r25, Y+6	; 0x06
    2904:	00 97       	sbiw	r24, 0x00	; 0
    2906:	69 f7       	brne	.-38     	; 0x28e2 <Switch_enuGetState+0x250>
    2908:	14 c0       	rjmp	.+40     	; 0x2932 <Switch_enuGetState+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290a:	6f 81       	ldd	r22, Y+7	; 0x07
    290c:	78 85       	ldd	r23, Y+8	; 0x08
    290e:	89 85       	ldd	r24, Y+9	; 0x09
    2910:	9a 85       	ldd	r25, Y+10	; 0x0a
    2912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	9e 83       	std	Y+6, r25	; 0x06
    291c:	8d 83       	std	Y+5, r24	; 0x05
    291e:	8d 81       	ldd	r24, Y+5	; 0x05
    2920:	9e 81       	ldd	r25, Y+6	; 0x06
    2922:	9a 83       	std	Y+2, r25	; 0x02
    2924:	89 83       	std	Y+1, r24	; 0x01
    2926:	89 81       	ldd	r24, Y+1	; 0x01
    2928:	9a 81       	ldd	r25, Y+2	; 0x02
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	f1 f7       	brne	.-4      	; 0x292a <Switch_enuGetState+0x298>
    292e:	9a 83       	std	Y+2, r25	; 0x02
    2930:	89 83       	std	Y+1, r24	; 0x01
						{
							_delay_ms(10);
							M_DIO_enuGetPinValue(Copy_pstrSwitchInfo->Switch_port, Copy_pstrSwitchInfo->Switch_Pin, Copy_StateGetStateValue);
    2932:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2934:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2936:	80 81       	ld	r24, Z
    2938:	ee 8d       	ldd	r30, Y+30	; 0x1e
    293a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    293c:	91 81       	ldd	r25, Z+1	; 0x01
    293e:	28 a1       	ldd	r18, Y+32	; 0x20
    2940:	39 a1       	ldd	r19, Y+33	; 0x21
    2942:	69 2f       	mov	r22, r25
    2944:	a9 01       	movw	r20, r18
    2946:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <M_DIO_enuGetPinValue>
							if(*Copy_StateGetStateValue)
    294a:	e8 a1       	ldd	r30, Y+32	; 0x20
    294c:	f9 a1       	ldd	r31, Y+33	; 0x21
    294e:	80 81       	ld	r24, Z
    2950:	88 23       	and	r24, r24
    2952:	c9 f0       	breq	.+50     	; 0x2986 <Switch_enuGetState+0x2f4>
    2954:	0c c0       	rjmp	.+24     	; 0x296e <Switch_enuGetState+0x2dc>
							{
								while(*Copy_StateGetStateValue)
								{
									M_DIO_enuGetPinValue(Copy_pstrSwitchInfo->Switch_port, Copy_pstrSwitchInfo->Switch_Pin, Copy_StateGetStateValue);
    2956:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2958:	ff 8d       	ldd	r31, Y+31	; 0x1f
    295a:	80 81       	ld	r24, Z
    295c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    295e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2960:	91 81       	ldd	r25, Z+1	; 0x01
    2962:	28 a1       	ldd	r18, Y+32	; 0x20
    2964:	39 a1       	ldd	r19, Y+33	; 0x21
    2966:	69 2f       	mov	r22, r25
    2968:	a9 01       	movw	r20, r18
    296a:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <M_DIO_enuGetPinValue>
						{
							_delay_ms(10);
							M_DIO_enuGetPinValue(Copy_pstrSwitchInfo->Switch_port, Copy_pstrSwitchInfo->Switch_Pin, Copy_StateGetStateValue);
							if(*Copy_StateGetStateValue)
							{
								while(*Copy_StateGetStateValue)
    296e:	e8 a1       	ldd	r30, Y+32	; 0x20
    2970:	f9 a1       	ldd	r31, Y+33	; 0x21
    2972:	80 81       	ld	r24, Z
    2974:	88 23       	and	r24, r24
    2976:	79 f7       	brne	.-34     	; 0x2956 <Switch_enuGetState+0x2c4>
								{
									M_DIO_enuGetPinValue(Copy_pstrSwitchInfo->Switch_port, Copy_pstrSwitchInfo->Switch_Pin, Copy_StateGetStateValue);
								}
								*Copy_StateGetStateValue = DIO_State_High;
    2978:	e8 a1       	ldd	r30, Y+32	; 0x20
    297a:	f9 a1       	ldd	r31, Y+33	; 0x21
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	80 83       	st	Z, r24
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <Switch_enuGetState+0x2f4>
						}
		}

	}else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
    2982:	83 e0       	ldi	r24, 0x03	; 3
    2984:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	return Local_u8ErrorState;
    2986:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2988:	a1 96       	adiw	r28, 0x21	; 33
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	cd bf       	out	0x3d, r28	; 61
    2994:	cf 91       	pop	r28
    2996:	df 91       	pop	r29
    2998:	08 95       	ret

0000299a <SSD_enuInit>:
	0x6D,0x7D,0x07,0x7F,0x6F,0x77,
	0x7C,0x39,0x5E,0x79,0x71
};

ES_t SSD_enuInit(SSD_t* Copy_pAstrSSDConfig)
{
    299a:	df 93       	push	r29
    299c:	cf 93       	push	r28
    299e:	00 d0       	rcall	.+0      	; 0x29a0 <SSD_enuInit+0x6>
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <SSD_enuInit+0x8>
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <SSD_enuInit+0xa>
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	9c 83       	std	Y+4, r25	; 0x04
    29aa:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_ErrorState = ES_NOK;
    29ac:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pAstrSSDConfig !=NULL)
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	9c 81       	ldd	r25, Y+4	; 0x04
    29b2:	00 97       	sbiw	r24, 0x00	; 0
    29b4:	09 f4       	brne	.+2      	; 0x29b8 <SSD_enuInit+0x1e>
    29b6:	2f c5       	rjmp	.+2654   	; 0x3416 <SSD_enuInit+0xa7c>
	{
		u8 Local_u8Iter;
		for(Local_u8Iter=0;Local_u8Iter<SSD_u8SSDNum;Local_u8Iter++)
    29b8:	19 82       	std	Y+1, r1	; 0x01
    29ba:	24 c5       	rjmp	.+2632   	; 0x3404 <SSD_enuInit+0xa6a>
		{
			
			M_DIO_enuSetPinDirection(Copy_pAstrSSDConfig[Local_u8Iter].COM_Port,Copy_pAstrSSDConfig[Local_u8Iter].COM_Pin,DIO_Direction_Output);
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	48 2f       	mov	r20, r24
    29c0:	50 e0       	ldi	r21, 0x00	; 0
    29c2:	ca 01       	movw	r24, r20
    29c4:	88 0f       	add	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	9c 01       	movw	r18, r24
    29ca:	22 0f       	add	r18, r18
    29cc:	33 1f       	adc	r19, r19
    29ce:	22 0f       	add	r18, r18
    29d0:	33 1f       	adc	r19, r19
    29d2:	22 0f       	add	r18, r18
    29d4:	33 1f       	adc	r19, r19
    29d6:	82 0f       	add	r24, r18
    29d8:	93 1f       	adc	r25, r19
    29da:	9c 01       	movw	r18, r24
    29dc:	24 0f       	add	r18, r20
    29de:	35 1f       	adc	r19, r21
    29e0:	8b 81       	ldd	r24, Y+3	; 0x03
    29e2:	9c 81       	ldd	r25, Y+4	; 0x04
    29e4:	fc 01       	movw	r30, r24
    29e6:	e2 0f       	add	r30, r18
    29e8:	f3 1f       	adc	r31, r19
    29ea:	60 81       	ld	r22, Z
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	48 2f       	mov	r20, r24
    29f0:	50 e0       	ldi	r21, 0x00	; 0
    29f2:	ca 01       	movw	r24, r20
    29f4:	88 0f       	add	r24, r24
    29f6:	99 1f       	adc	r25, r25
    29f8:	9c 01       	movw	r18, r24
    29fa:	22 0f       	add	r18, r18
    29fc:	33 1f       	adc	r19, r19
    29fe:	22 0f       	add	r18, r18
    2a00:	33 1f       	adc	r19, r19
    2a02:	22 0f       	add	r18, r18
    2a04:	33 1f       	adc	r19, r19
    2a06:	82 0f       	add	r24, r18
    2a08:	93 1f       	adc	r25, r19
    2a0a:	9c 01       	movw	r18, r24
    2a0c:	24 0f       	add	r18, r20
    2a0e:	35 1f       	adc	r19, r21
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	9c 81       	ldd	r25, Y+4	; 0x04
    2a14:	fc 01       	movw	r30, r24
    2a16:	e2 0f       	add	r30, r18
    2a18:	f3 1f       	adc	r31, r19
    2a1a:	91 81       	ldd	r25, Z+1	; 0x01
    2a1c:	86 2f       	mov	r24, r22
    2a1e:	69 2f       	mov	r22, r25
    2a20:	41 e0       	ldi	r20, 0x01	; 1
    2a22:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
			M_DIO_enuSetPinDirection(Copy_pAstrSSDConfig[Local_u8Iter].A_Port,Copy_pAstrSSDConfig[Local_u8Iter].A_Pin,DIO_Direction_Output);
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	48 2f       	mov	r20, r24
    2a2a:	50 e0       	ldi	r21, 0x00	; 0
    2a2c:	ca 01       	movw	r24, r20
    2a2e:	88 0f       	add	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	9c 01       	movw	r18, r24
    2a34:	22 0f       	add	r18, r18
    2a36:	33 1f       	adc	r19, r19
    2a38:	22 0f       	add	r18, r18
    2a3a:	33 1f       	adc	r19, r19
    2a3c:	22 0f       	add	r18, r18
    2a3e:	33 1f       	adc	r19, r19
    2a40:	82 0f       	add	r24, r18
    2a42:	93 1f       	adc	r25, r19
    2a44:	9c 01       	movw	r18, r24
    2a46:	24 0f       	add	r18, r20
    2a48:	35 1f       	adc	r19, r21
    2a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4e:	fc 01       	movw	r30, r24
    2a50:	e2 0f       	add	r30, r18
    2a52:	f3 1f       	adc	r31, r19
    2a54:	62 81       	ldd	r22, Z+2	; 0x02
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	48 2f       	mov	r20, r24
    2a5a:	50 e0       	ldi	r21, 0x00	; 0
    2a5c:	ca 01       	movw	r24, r20
    2a5e:	88 0f       	add	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	9c 01       	movw	r18, r24
    2a64:	22 0f       	add	r18, r18
    2a66:	33 1f       	adc	r19, r19
    2a68:	22 0f       	add	r18, r18
    2a6a:	33 1f       	adc	r19, r19
    2a6c:	22 0f       	add	r18, r18
    2a6e:	33 1f       	adc	r19, r19
    2a70:	82 0f       	add	r24, r18
    2a72:	93 1f       	adc	r25, r19
    2a74:	9c 01       	movw	r18, r24
    2a76:	24 0f       	add	r18, r20
    2a78:	35 1f       	adc	r19, r21
    2a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7e:	fc 01       	movw	r30, r24
    2a80:	e2 0f       	add	r30, r18
    2a82:	f3 1f       	adc	r31, r19
    2a84:	93 81       	ldd	r25, Z+3	; 0x03
    2a86:	86 2f       	mov	r24, r22
    2a88:	69 2f       	mov	r22, r25
    2a8a:	41 e0       	ldi	r20, 0x01	; 1
    2a8c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
			M_DIO_enuSetPinDirection(Copy_pAstrSSDConfig[Local_u8Iter].B_Port,Copy_pAstrSSDConfig[Local_u8Iter].B_Pin,DIO_Direction_Output);
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	48 2f       	mov	r20, r24
    2a94:	50 e0       	ldi	r21, 0x00	; 0
    2a96:	ca 01       	movw	r24, r20
    2a98:	88 0f       	add	r24, r24
    2a9a:	99 1f       	adc	r25, r25
    2a9c:	9c 01       	movw	r18, r24
    2a9e:	22 0f       	add	r18, r18
    2aa0:	33 1f       	adc	r19, r19
    2aa2:	22 0f       	add	r18, r18
    2aa4:	33 1f       	adc	r19, r19
    2aa6:	22 0f       	add	r18, r18
    2aa8:	33 1f       	adc	r19, r19
    2aaa:	82 0f       	add	r24, r18
    2aac:	93 1f       	adc	r25, r19
    2aae:	9c 01       	movw	r18, r24
    2ab0:	24 0f       	add	r18, r20
    2ab2:	35 1f       	adc	r19, r21
    2ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab8:	fc 01       	movw	r30, r24
    2aba:	e2 0f       	add	r30, r18
    2abc:	f3 1f       	adc	r31, r19
    2abe:	64 81       	ldd	r22, Z+4	; 0x04
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	48 2f       	mov	r20, r24
    2ac4:	50 e0       	ldi	r21, 0x00	; 0
    2ac6:	ca 01       	movw	r24, r20
    2ac8:	88 0f       	add	r24, r24
    2aca:	99 1f       	adc	r25, r25
    2acc:	9c 01       	movw	r18, r24
    2ace:	22 0f       	add	r18, r18
    2ad0:	33 1f       	adc	r19, r19
    2ad2:	22 0f       	add	r18, r18
    2ad4:	33 1f       	adc	r19, r19
    2ad6:	22 0f       	add	r18, r18
    2ad8:	33 1f       	adc	r19, r19
    2ada:	82 0f       	add	r24, r18
    2adc:	93 1f       	adc	r25, r19
    2ade:	9c 01       	movw	r18, r24
    2ae0:	24 0f       	add	r18, r20
    2ae2:	35 1f       	adc	r19, r21
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae8:	fc 01       	movw	r30, r24
    2aea:	e2 0f       	add	r30, r18
    2aec:	f3 1f       	adc	r31, r19
    2aee:	95 81       	ldd	r25, Z+5	; 0x05
    2af0:	86 2f       	mov	r24, r22
    2af2:	69 2f       	mov	r22, r25
    2af4:	41 e0       	ldi	r20, 0x01	; 1
    2af6:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
			M_DIO_enuSetPinDirection(Copy_pAstrSSDConfig[Local_u8Iter].C_Port,Copy_pAstrSSDConfig[Local_u8Iter].C_Pin,DIO_Direction_Output);
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	48 2f       	mov	r20, r24
    2afe:	50 e0       	ldi	r21, 0x00	; 0
    2b00:	ca 01       	movw	r24, r20
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	9c 01       	movw	r18, r24
    2b08:	22 0f       	add	r18, r18
    2b0a:	33 1f       	adc	r19, r19
    2b0c:	22 0f       	add	r18, r18
    2b0e:	33 1f       	adc	r19, r19
    2b10:	22 0f       	add	r18, r18
    2b12:	33 1f       	adc	r19, r19
    2b14:	82 0f       	add	r24, r18
    2b16:	93 1f       	adc	r25, r19
    2b18:	9c 01       	movw	r18, r24
    2b1a:	24 0f       	add	r18, r20
    2b1c:	35 1f       	adc	r19, r21
    2b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b20:	9c 81       	ldd	r25, Y+4	; 0x04
    2b22:	fc 01       	movw	r30, r24
    2b24:	e2 0f       	add	r30, r18
    2b26:	f3 1f       	adc	r31, r19
    2b28:	66 81       	ldd	r22, Z+6	; 0x06
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	48 2f       	mov	r20, r24
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	ca 01       	movw	r24, r20
    2b32:	88 0f       	add	r24, r24
    2b34:	99 1f       	adc	r25, r25
    2b36:	9c 01       	movw	r18, r24
    2b38:	22 0f       	add	r18, r18
    2b3a:	33 1f       	adc	r19, r19
    2b3c:	22 0f       	add	r18, r18
    2b3e:	33 1f       	adc	r19, r19
    2b40:	22 0f       	add	r18, r18
    2b42:	33 1f       	adc	r19, r19
    2b44:	82 0f       	add	r24, r18
    2b46:	93 1f       	adc	r25, r19
    2b48:	9c 01       	movw	r18, r24
    2b4a:	24 0f       	add	r18, r20
    2b4c:	35 1f       	adc	r19, r21
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b50:	9c 81       	ldd	r25, Y+4	; 0x04
    2b52:	fc 01       	movw	r30, r24
    2b54:	e2 0f       	add	r30, r18
    2b56:	f3 1f       	adc	r31, r19
    2b58:	97 81       	ldd	r25, Z+7	; 0x07
    2b5a:	86 2f       	mov	r24, r22
    2b5c:	69 2f       	mov	r22, r25
    2b5e:	41 e0       	ldi	r20, 0x01	; 1
    2b60:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
			M_DIO_enuSetPinDirection(Copy_pAstrSSDConfig[Local_u8Iter].D_Port,Copy_pAstrSSDConfig[Local_u8Iter].D_Pin,DIO_Direction_Output);
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	48 2f       	mov	r20, r24
    2b68:	50 e0       	ldi	r21, 0x00	; 0
    2b6a:	ca 01       	movw	r24, r20
    2b6c:	88 0f       	add	r24, r24
    2b6e:	99 1f       	adc	r25, r25
    2b70:	9c 01       	movw	r18, r24
    2b72:	22 0f       	add	r18, r18
    2b74:	33 1f       	adc	r19, r19
    2b76:	22 0f       	add	r18, r18
    2b78:	33 1f       	adc	r19, r19
    2b7a:	22 0f       	add	r18, r18
    2b7c:	33 1f       	adc	r19, r19
    2b7e:	82 0f       	add	r24, r18
    2b80:	93 1f       	adc	r25, r19
    2b82:	9c 01       	movw	r18, r24
    2b84:	24 0f       	add	r18, r20
    2b86:	35 1f       	adc	r19, r21
    2b88:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	e2 0f       	add	r30, r18
    2b90:	f3 1f       	adc	r31, r19
    2b92:	60 85       	ldd	r22, Z+8	; 0x08
    2b94:	89 81       	ldd	r24, Y+1	; 0x01
    2b96:	48 2f       	mov	r20, r24
    2b98:	50 e0       	ldi	r21, 0x00	; 0
    2b9a:	ca 01       	movw	r24, r20
    2b9c:	88 0f       	add	r24, r24
    2b9e:	99 1f       	adc	r25, r25
    2ba0:	9c 01       	movw	r18, r24
    2ba2:	22 0f       	add	r18, r18
    2ba4:	33 1f       	adc	r19, r19
    2ba6:	22 0f       	add	r18, r18
    2ba8:	33 1f       	adc	r19, r19
    2baa:	22 0f       	add	r18, r18
    2bac:	33 1f       	adc	r19, r19
    2bae:	82 0f       	add	r24, r18
    2bb0:	93 1f       	adc	r25, r19
    2bb2:	9c 01       	movw	r18, r24
    2bb4:	24 0f       	add	r18, r20
    2bb6:	35 1f       	adc	r19, r21
    2bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bba:	9c 81       	ldd	r25, Y+4	; 0x04
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	e2 0f       	add	r30, r18
    2bc0:	f3 1f       	adc	r31, r19
    2bc2:	91 85       	ldd	r25, Z+9	; 0x09
    2bc4:	86 2f       	mov	r24, r22
    2bc6:	69 2f       	mov	r22, r25
    2bc8:	41 e0       	ldi	r20, 0x01	; 1
    2bca:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
			M_DIO_enuSetPinDirection(Copy_pAstrSSDConfig[Local_u8Iter].E_Port,Copy_pAstrSSDConfig[Local_u8Iter].E_Pin,DIO_Direction_Output);
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	48 2f       	mov	r20, r24
    2bd2:	50 e0       	ldi	r21, 0x00	; 0
    2bd4:	ca 01       	movw	r24, r20
    2bd6:	88 0f       	add	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	9c 01       	movw	r18, r24
    2bdc:	22 0f       	add	r18, r18
    2bde:	33 1f       	adc	r19, r19
    2be0:	22 0f       	add	r18, r18
    2be2:	33 1f       	adc	r19, r19
    2be4:	22 0f       	add	r18, r18
    2be6:	33 1f       	adc	r19, r19
    2be8:	82 0f       	add	r24, r18
    2bea:	93 1f       	adc	r25, r19
    2bec:	9c 01       	movw	r18, r24
    2bee:	24 0f       	add	r18, r20
    2bf0:	35 1f       	adc	r19, r21
    2bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	e2 0f       	add	r30, r18
    2bfa:	f3 1f       	adc	r31, r19
    2bfc:	62 85       	ldd	r22, Z+10	; 0x0a
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	48 2f       	mov	r20, r24
    2c02:	50 e0       	ldi	r21, 0x00	; 0
    2c04:	ca 01       	movw	r24, r20
    2c06:	88 0f       	add	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	9c 01       	movw	r18, r24
    2c0c:	22 0f       	add	r18, r18
    2c0e:	33 1f       	adc	r19, r19
    2c10:	22 0f       	add	r18, r18
    2c12:	33 1f       	adc	r19, r19
    2c14:	22 0f       	add	r18, r18
    2c16:	33 1f       	adc	r19, r19
    2c18:	82 0f       	add	r24, r18
    2c1a:	93 1f       	adc	r25, r19
    2c1c:	9c 01       	movw	r18, r24
    2c1e:	24 0f       	add	r18, r20
    2c20:	35 1f       	adc	r19, r21
    2c22:	8b 81       	ldd	r24, Y+3	; 0x03
    2c24:	9c 81       	ldd	r25, Y+4	; 0x04
    2c26:	fc 01       	movw	r30, r24
    2c28:	e2 0f       	add	r30, r18
    2c2a:	f3 1f       	adc	r31, r19
    2c2c:	93 85       	ldd	r25, Z+11	; 0x0b
    2c2e:	86 2f       	mov	r24, r22
    2c30:	69 2f       	mov	r22, r25
    2c32:	41 e0       	ldi	r20, 0x01	; 1
    2c34:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
			M_DIO_enuSetPinDirection(Copy_pAstrSSDConfig[Local_u8Iter].F_Port,Copy_pAstrSSDConfig[Local_u8Iter].F_Pin,DIO_Direction_Output);
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	48 2f       	mov	r20, r24
    2c3c:	50 e0       	ldi	r21, 0x00	; 0
    2c3e:	ca 01       	movw	r24, r20
    2c40:	88 0f       	add	r24, r24
    2c42:	99 1f       	adc	r25, r25
    2c44:	9c 01       	movw	r18, r24
    2c46:	22 0f       	add	r18, r18
    2c48:	33 1f       	adc	r19, r19
    2c4a:	22 0f       	add	r18, r18
    2c4c:	33 1f       	adc	r19, r19
    2c4e:	22 0f       	add	r18, r18
    2c50:	33 1f       	adc	r19, r19
    2c52:	82 0f       	add	r24, r18
    2c54:	93 1f       	adc	r25, r19
    2c56:	9c 01       	movw	r18, r24
    2c58:	24 0f       	add	r18, r20
    2c5a:	35 1f       	adc	r19, r21
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c60:	fc 01       	movw	r30, r24
    2c62:	e2 0f       	add	r30, r18
    2c64:	f3 1f       	adc	r31, r19
    2c66:	64 85       	ldd	r22, Z+12	; 0x0c
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	48 2f       	mov	r20, r24
    2c6c:	50 e0       	ldi	r21, 0x00	; 0
    2c6e:	ca 01       	movw	r24, r20
    2c70:	88 0f       	add	r24, r24
    2c72:	99 1f       	adc	r25, r25
    2c74:	9c 01       	movw	r18, r24
    2c76:	22 0f       	add	r18, r18
    2c78:	33 1f       	adc	r19, r19
    2c7a:	22 0f       	add	r18, r18
    2c7c:	33 1f       	adc	r19, r19
    2c7e:	22 0f       	add	r18, r18
    2c80:	33 1f       	adc	r19, r19
    2c82:	82 0f       	add	r24, r18
    2c84:	93 1f       	adc	r25, r19
    2c86:	9c 01       	movw	r18, r24
    2c88:	24 0f       	add	r18, r20
    2c8a:	35 1f       	adc	r19, r21
    2c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c90:	fc 01       	movw	r30, r24
    2c92:	e2 0f       	add	r30, r18
    2c94:	f3 1f       	adc	r31, r19
    2c96:	95 85       	ldd	r25, Z+13	; 0x0d
    2c98:	86 2f       	mov	r24, r22
    2c9a:	69 2f       	mov	r22, r25
    2c9c:	41 e0       	ldi	r20, 0x01	; 1
    2c9e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
			M_DIO_enuSetPinDirection(Copy_pAstrSSDConfig[Local_u8Iter].G_Port,Copy_pAstrSSDConfig[Local_u8Iter].G_Pin,DIO_Direction_Output);
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	48 2f       	mov	r20, r24
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	ca 01       	movw	r24, r20
    2caa:	88 0f       	add	r24, r24
    2cac:	99 1f       	adc	r25, r25
    2cae:	9c 01       	movw	r18, r24
    2cb0:	22 0f       	add	r18, r18
    2cb2:	33 1f       	adc	r19, r19
    2cb4:	22 0f       	add	r18, r18
    2cb6:	33 1f       	adc	r19, r19
    2cb8:	22 0f       	add	r18, r18
    2cba:	33 1f       	adc	r19, r19
    2cbc:	82 0f       	add	r24, r18
    2cbe:	93 1f       	adc	r25, r19
    2cc0:	9c 01       	movw	r18, r24
    2cc2:	24 0f       	add	r18, r20
    2cc4:	35 1f       	adc	r19, r21
    2cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cca:	fc 01       	movw	r30, r24
    2ccc:	e2 0f       	add	r30, r18
    2cce:	f3 1f       	adc	r31, r19
    2cd0:	66 85       	ldd	r22, Z+14	; 0x0e
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	48 2f       	mov	r20, r24
    2cd6:	50 e0       	ldi	r21, 0x00	; 0
    2cd8:	ca 01       	movw	r24, r20
    2cda:	88 0f       	add	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	9c 01       	movw	r18, r24
    2ce0:	22 0f       	add	r18, r18
    2ce2:	33 1f       	adc	r19, r19
    2ce4:	22 0f       	add	r18, r18
    2ce6:	33 1f       	adc	r19, r19
    2ce8:	22 0f       	add	r18, r18
    2cea:	33 1f       	adc	r19, r19
    2cec:	82 0f       	add	r24, r18
    2cee:	93 1f       	adc	r25, r19
    2cf0:	9c 01       	movw	r18, r24
    2cf2:	24 0f       	add	r18, r20
    2cf4:	35 1f       	adc	r19, r21
    2cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	e2 0f       	add	r30, r18
    2cfe:	f3 1f       	adc	r31, r19
    2d00:	97 85       	ldd	r25, Z+15	; 0x0f
    2d02:	86 2f       	mov	r24, r22
    2d04:	69 2f       	mov	r22, r25
    2d06:	41 e0       	ldi	r20, 0x01	; 1
    2d08:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
			M_DIO_enuSetPinDirection(Copy_pAstrSSDConfig[Local_u8Iter].DP_Port,Copy_pAstrSSDConfig[Local_u8Iter].DP_Pin,DIO_Direction_Output);
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	48 2f       	mov	r20, r24
    2d10:	50 e0       	ldi	r21, 0x00	; 0
    2d12:	ca 01       	movw	r24, r20
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	9c 01       	movw	r18, r24
    2d1a:	22 0f       	add	r18, r18
    2d1c:	33 1f       	adc	r19, r19
    2d1e:	22 0f       	add	r18, r18
    2d20:	33 1f       	adc	r19, r19
    2d22:	22 0f       	add	r18, r18
    2d24:	33 1f       	adc	r19, r19
    2d26:	82 0f       	add	r24, r18
    2d28:	93 1f       	adc	r25, r19
    2d2a:	9c 01       	movw	r18, r24
    2d2c:	24 0f       	add	r18, r20
    2d2e:	35 1f       	adc	r19, r21
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	9c 81       	ldd	r25, Y+4	; 0x04
    2d34:	fc 01       	movw	r30, r24
    2d36:	e2 0f       	add	r30, r18
    2d38:	f3 1f       	adc	r31, r19
    2d3a:	60 89       	ldd	r22, Z+16	; 0x10
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	48 2f       	mov	r20, r24
    2d40:	50 e0       	ldi	r21, 0x00	; 0
    2d42:	ca 01       	movw	r24, r20
    2d44:	88 0f       	add	r24, r24
    2d46:	99 1f       	adc	r25, r25
    2d48:	9c 01       	movw	r18, r24
    2d4a:	22 0f       	add	r18, r18
    2d4c:	33 1f       	adc	r19, r19
    2d4e:	22 0f       	add	r18, r18
    2d50:	33 1f       	adc	r19, r19
    2d52:	22 0f       	add	r18, r18
    2d54:	33 1f       	adc	r19, r19
    2d56:	82 0f       	add	r24, r18
    2d58:	93 1f       	adc	r25, r19
    2d5a:	9c 01       	movw	r18, r24
    2d5c:	24 0f       	add	r18, r20
    2d5e:	35 1f       	adc	r19, r21
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	9c 81       	ldd	r25, Y+4	; 0x04
    2d64:	fc 01       	movw	r30, r24
    2d66:	e2 0f       	add	r30, r18
    2d68:	f3 1f       	adc	r31, r19
    2d6a:	91 89       	ldd	r25, Z+17	; 0x11
    2d6c:	86 2f       	mov	r24, r22
    2d6e:	69 2f       	mov	r22, r25
    2d70:	41 e0       	ldi	r20, 0x01	; 1
    2d72:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>

			M_DIO_enuSetPinValue(Copy_pAstrSSDConfig[Local_u8Iter].COM_Port,Copy_pAstrSSDConfig[Local_u8Iter].COM_Pin,DIO_State_High);
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	48 2f       	mov	r20, r24
    2d7a:	50 e0       	ldi	r21, 0x00	; 0
    2d7c:	ca 01       	movw	r24, r20
    2d7e:	88 0f       	add	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	9c 01       	movw	r18, r24
    2d84:	22 0f       	add	r18, r18
    2d86:	33 1f       	adc	r19, r19
    2d88:	22 0f       	add	r18, r18
    2d8a:	33 1f       	adc	r19, r19
    2d8c:	22 0f       	add	r18, r18
    2d8e:	33 1f       	adc	r19, r19
    2d90:	82 0f       	add	r24, r18
    2d92:	93 1f       	adc	r25, r19
    2d94:	9c 01       	movw	r18, r24
    2d96:	24 0f       	add	r18, r20
    2d98:	35 1f       	adc	r19, r21
    2d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9e:	fc 01       	movw	r30, r24
    2da0:	e2 0f       	add	r30, r18
    2da2:	f3 1f       	adc	r31, r19
    2da4:	60 81       	ld	r22, Z
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	48 2f       	mov	r20, r24
    2daa:	50 e0       	ldi	r21, 0x00	; 0
    2dac:	ca 01       	movw	r24, r20
    2dae:	88 0f       	add	r24, r24
    2db0:	99 1f       	adc	r25, r25
    2db2:	9c 01       	movw	r18, r24
    2db4:	22 0f       	add	r18, r18
    2db6:	33 1f       	adc	r19, r19
    2db8:	22 0f       	add	r18, r18
    2dba:	33 1f       	adc	r19, r19
    2dbc:	22 0f       	add	r18, r18
    2dbe:	33 1f       	adc	r19, r19
    2dc0:	82 0f       	add	r24, r18
    2dc2:	93 1f       	adc	r25, r19
    2dc4:	9c 01       	movw	r18, r24
    2dc6:	24 0f       	add	r18, r20
    2dc8:	35 1f       	adc	r19, r21
    2dca:	8b 81       	ldd	r24, Y+3	; 0x03
    2dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dce:	fc 01       	movw	r30, r24
    2dd0:	e2 0f       	add	r30, r18
    2dd2:	f3 1f       	adc	r31, r19
    2dd4:	91 81       	ldd	r25, Z+1	; 0x01
    2dd6:	86 2f       	mov	r24, r22
    2dd8:	69 2f       	mov	r22, r25
    2dda:	41 e0       	ldi	r20, 0x01	; 1
    2ddc:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>

			switch(Copy_pAstrSSDConfig[Local_u8Iter].COM_Type)
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	48 2f       	mov	r20, r24
    2de4:	50 e0       	ldi	r21, 0x00	; 0
    2de6:	ca 01       	movw	r24, r20
    2de8:	88 0f       	add	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	9c 01       	movw	r18, r24
    2dee:	22 0f       	add	r18, r18
    2df0:	33 1f       	adc	r19, r19
    2df2:	22 0f       	add	r18, r18
    2df4:	33 1f       	adc	r19, r19
    2df6:	22 0f       	add	r18, r18
    2df8:	33 1f       	adc	r19, r19
    2dfa:	82 0f       	add	r24, r18
    2dfc:	93 1f       	adc	r25, r19
    2dfe:	9c 01       	movw	r18, r24
    2e00:	24 0f       	add	r18, r20
    2e02:	35 1f       	adc	r19, r21
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	9c 81       	ldd	r25, Y+4	; 0x04
    2e08:	fc 01       	movw	r30, r24
    2e0a:	e2 0f       	add	r30, r18
    2e0c:	f3 1f       	adc	r31, r19
    2e0e:	82 89       	ldd	r24, Z+18	; 0x12
    2e10:	28 2f       	mov	r18, r24
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	3e 83       	std	Y+6, r19	; 0x06
    2e16:	2d 83       	std	Y+5, r18	; 0x05
    2e18:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1c:	83 30       	cpi	r24, 0x03	; 3
    2e1e:	91 05       	cpc	r25, r1
    2e20:	39 f0       	breq	.+14     	; 0x2e30 <SSD_enuInit+0x496>
    2e22:	2d 81       	ldd	r18, Y+5	; 0x05
    2e24:	3e 81       	ldd	r19, Y+6	; 0x06
    2e26:	26 30       	cpi	r18, 0x06	; 6
    2e28:	31 05       	cpc	r19, r1
    2e2a:	09 f4       	brne	.+2      	; 0x2e2e <SSD_enuInit+0x494>
    2e2c:	75 c1       	rjmp	.+746    	; 0x3118 <SSD_enuInit+0x77e>
    2e2e:	e7 c2       	rjmp	.+1486   	; 0x33fe <SSD_enuInit+0xa64>
			{
				case COM_CATHODE:

				M_DIO_enuSetPinValue(Copy_pAstrSSDConfig[Local_u8Iter].A_Port,Copy_pAstrSSDConfig[Local_u8Iter].A_Pin,DIO_State_High);
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	48 2f       	mov	r20, r24
    2e34:	50 e0       	ldi	r21, 0x00	; 0
    2e36:	ca 01       	movw	r24, r20
    2e38:	88 0f       	add	r24, r24
    2e3a:	99 1f       	adc	r25, r25
    2e3c:	9c 01       	movw	r18, r24
    2e3e:	22 0f       	add	r18, r18
    2e40:	33 1f       	adc	r19, r19
    2e42:	22 0f       	add	r18, r18
    2e44:	33 1f       	adc	r19, r19
    2e46:	22 0f       	add	r18, r18
    2e48:	33 1f       	adc	r19, r19
    2e4a:	82 0f       	add	r24, r18
    2e4c:	93 1f       	adc	r25, r19
    2e4e:	9c 01       	movw	r18, r24
    2e50:	24 0f       	add	r18, r20
    2e52:	35 1f       	adc	r19, r21
    2e54:	8b 81       	ldd	r24, Y+3	; 0x03
    2e56:	9c 81       	ldd	r25, Y+4	; 0x04
    2e58:	fc 01       	movw	r30, r24
    2e5a:	e2 0f       	add	r30, r18
    2e5c:	f3 1f       	adc	r31, r19
    2e5e:	62 81       	ldd	r22, Z+2	; 0x02
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	48 2f       	mov	r20, r24
    2e64:	50 e0       	ldi	r21, 0x00	; 0
    2e66:	ca 01       	movw	r24, r20
    2e68:	88 0f       	add	r24, r24
    2e6a:	99 1f       	adc	r25, r25
    2e6c:	9c 01       	movw	r18, r24
    2e6e:	22 0f       	add	r18, r18
    2e70:	33 1f       	adc	r19, r19
    2e72:	22 0f       	add	r18, r18
    2e74:	33 1f       	adc	r19, r19
    2e76:	22 0f       	add	r18, r18
    2e78:	33 1f       	adc	r19, r19
    2e7a:	82 0f       	add	r24, r18
    2e7c:	93 1f       	adc	r25, r19
    2e7e:	9c 01       	movw	r18, r24
    2e80:	24 0f       	add	r18, r20
    2e82:	35 1f       	adc	r19, r21
    2e84:	8b 81       	ldd	r24, Y+3	; 0x03
    2e86:	9c 81       	ldd	r25, Y+4	; 0x04
    2e88:	fc 01       	movw	r30, r24
    2e8a:	e2 0f       	add	r30, r18
    2e8c:	f3 1f       	adc	r31, r19
    2e8e:	93 81       	ldd	r25, Z+3	; 0x03
    2e90:	86 2f       	mov	r24, r22
    2e92:	69 2f       	mov	r22, r25
    2e94:	41 e0       	ldi	r20, 0x01	; 1
    2e96:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
				M_DIO_enuSetPinValue(Copy_pAstrSSDConfig[Local_u8Iter].B_Port,Copy_pAstrSSDConfig[Local_u8Iter].B_Pin,DIO_State_High);
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	48 2f       	mov	r20, r24
    2e9e:	50 e0       	ldi	r21, 0x00	; 0
    2ea0:	ca 01       	movw	r24, r20
    2ea2:	88 0f       	add	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	9c 01       	movw	r18, r24
    2ea8:	22 0f       	add	r18, r18
    2eaa:	33 1f       	adc	r19, r19
    2eac:	22 0f       	add	r18, r18
    2eae:	33 1f       	adc	r19, r19
    2eb0:	22 0f       	add	r18, r18
    2eb2:	33 1f       	adc	r19, r19
    2eb4:	82 0f       	add	r24, r18
    2eb6:	93 1f       	adc	r25, r19
    2eb8:	9c 01       	movw	r18, r24
    2eba:	24 0f       	add	r18, r20
    2ebc:	35 1f       	adc	r19, r21
    2ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	e2 0f       	add	r30, r18
    2ec6:	f3 1f       	adc	r31, r19
    2ec8:	64 81       	ldd	r22, Z+4	; 0x04
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	48 2f       	mov	r20, r24
    2ece:	50 e0       	ldi	r21, 0x00	; 0
    2ed0:	ca 01       	movw	r24, r20
    2ed2:	88 0f       	add	r24, r24
    2ed4:	99 1f       	adc	r25, r25
    2ed6:	9c 01       	movw	r18, r24
    2ed8:	22 0f       	add	r18, r18
    2eda:	33 1f       	adc	r19, r19
    2edc:	22 0f       	add	r18, r18
    2ede:	33 1f       	adc	r19, r19
    2ee0:	22 0f       	add	r18, r18
    2ee2:	33 1f       	adc	r19, r19
    2ee4:	82 0f       	add	r24, r18
    2ee6:	93 1f       	adc	r25, r19
    2ee8:	9c 01       	movw	r18, r24
    2eea:	24 0f       	add	r18, r20
    2eec:	35 1f       	adc	r19, r21
    2eee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	e2 0f       	add	r30, r18
    2ef6:	f3 1f       	adc	r31, r19
    2ef8:	95 81       	ldd	r25, Z+5	; 0x05
    2efa:	86 2f       	mov	r24, r22
    2efc:	69 2f       	mov	r22, r25
    2efe:	41 e0       	ldi	r20, 0x01	; 1
    2f00:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
				M_DIO_enuSetPinValue(Copy_pAstrSSDConfig[Local_u8Iter].C_Port,Copy_pAstrSSDConfig[Local_u8Iter].C_Pin,DIO_State_High);
    2f04:	89 81       	ldd	r24, Y+1	; 0x01
    2f06:	48 2f       	mov	r20, r24
    2f08:	50 e0       	ldi	r21, 0x00	; 0
    2f0a:	ca 01       	movw	r24, r20
    2f0c:	88 0f       	add	r24, r24
    2f0e:	99 1f       	adc	r25, r25
    2f10:	9c 01       	movw	r18, r24
    2f12:	22 0f       	add	r18, r18
    2f14:	33 1f       	adc	r19, r19
    2f16:	22 0f       	add	r18, r18
    2f18:	33 1f       	adc	r19, r19
    2f1a:	22 0f       	add	r18, r18
    2f1c:	33 1f       	adc	r19, r19
    2f1e:	82 0f       	add	r24, r18
    2f20:	93 1f       	adc	r25, r19
    2f22:	9c 01       	movw	r18, r24
    2f24:	24 0f       	add	r18, r20
    2f26:	35 1f       	adc	r19, r21
    2f28:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	e2 0f       	add	r30, r18
    2f30:	f3 1f       	adc	r31, r19
    2f32:	66 81       	ldd	r22, Z+6	; 0x06
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	48 2f       	mov	r20, r24
    2f38:	50 e0       	ldi	r21, 0x00	; 0
    2f3a:	ca 01       	movw	r24, r20
    2f3c:	88 0f       	add	r24, r24
    2f3e:	99 1f       	adc	r25, r25
    2f40:	9c 01       	movw	r18, r24
    2f42:	22 0f       	add	r18, r18
    2f44:	33 1f       	adc	r19, r19
    2f46:	22 0f       	add	r18, r18
    2f48:	33 1f       	adc	r19, r19
    2f4a:	22 0f       	add	r18, r18
    2f4c:	33 1f       	adc	r19, r19
    2f4e:	82 0f       	add	r24, r18
    2f50:	93 1f       	adc	r25, r19
    2f52:	9c 01       	movw	r18, r24
    2f54:	24 0f       	add	r18, r20
    2f56:	35 1f       	adc	r19, r21
    2f58:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5c:	fc 01       	movw	r30, r24
    2f5e:	e2 0f       	add	r30, r18
    2f60:	f3 1f       	adc	r31, r19
    2f62:	97 81       	ldd	r25, Z+7	; 0x07
    2f64:	86 2f       	mov	r24, r22
    2f66:	69 2f       	mov	r22, r25
    2f68:	41 e0       	ldi	r20, 0x01	; 1
    2f6a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
				M_DIO_enuSetPinValue(Copy_pAstrSSDConfig[Local_u8Iter].D_Port,Copy_pAstrSSDConfig[Local_u8Iter].D_Pin,DIO_State_High);
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	48 2f       	mov	r20, r24
    2f72:	50 e0       	ldi	r21, 0x00	; 0
    2f74:	ca 01       	movw	r24, r20
    2f76:	88 0f       	add	r24, r24
    2f78:	99 1f       	adc	r25, r25
    2f7a:	9c 01       	movw	r18, r24
    2f7c:	22 0f       	add	r18, r18
    2f7e:	33 1f       	adc	r19, r19
    2f80:	22 0f       	add	r18, r18
    2f82:	33 1f       	adc	r19, r19
    2f84:	22 0f       	add	r18, r18
    2f86:	33 1f       	adc	r19, r19
    2f88:	82 0f       	add	r24, r18
    2f8a:	93 1f       	adc	r25, r19
    2f8c:	9c 01       	movw	r18, r24
    2f8e:	24 0f       	add	r18, r20
    2f90:	35 1f       	adc	r19, r21
    2f92:	8b 81       	ldd	r24, Y+3	; 0x03
    2f94:	9c 81       	ldd	r25, Y+4	; 0x04
    2f96:	fc 01       	movw	r30, r24
    2f98:	e2 0f       	add	r30, r18
    2f9a:	f3 1f       	adc	r31, r19
    2f9c:	60 85       	ldd	r22, Z+8	; 0x08
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	48 2f       	mov	r20, r24
    2fa2:	50 e0       	ldi	r21, 0x00	; 0
    2fa4:	ca 01       	movw	r24, r20
    2fa6:	88 0f       	add	r24, r24
    2fa8:	99 1f       	adc	r25, r25
    2faa:	9c 01       	movw	r18, r24
    2fac:	22 0f       	add	r18, r18
    2fae:	33 1f       	adc	r19, r19
    2fb0:	22 0f       	add	r18, r18
    2fb2:	33 1f       	adc	r19, r19
    2fb4:	22 0f       	add	r18, r18
    2fb6:	33 1f       	adc	r19, r19
    2fb8:	82 0f       	add	r24, r18
    2fba:	93 1f       	adc	r25, r19
    2fbc:	9c 01       	movw	r18, r24
    2fbe:	24 0f       	add	r18, r20
    2fc0:	35 1f       	adc	r19, r21
    2fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	e2 0f       	add	r30, r18
    2fca:	f3 1f       	adc	r31, r19
    2fcc:	91 85       	ldd	r25, Z+9	; 0x09
    2fce:	86 2f       	mov	r24, r22
    2fd0:	69 2f       	mov	r22, r25
    2fd2:	41 e0       	ldi	r20, 0x01	; 1
    2fd4:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
				M_DIO_enuSetPinValue(Copy_pAstrSSDConfig[Local_u8Iter].E_Port,Copy_pAstrSSDConfig[Local_u8Iter].E_Pin,DIO_State_High);
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
    2fda:	48 2f       	mov	r20, r24
    2fdc:	50 e0       	ldi	r21, 0x00	; 0
    2fde:	ca 01       	movw	r24, r20
    2fe0:	88 0f       	add	r24, r24
    2fe2:	99 1f       	adc	r25, r25
    2fe4:	9c 01       	movw	r18, r24
    2fe6:	22 0f       	add	r18, r18
    2fe8:	33 1f       	adc	r19, r19
    2fea:	22 0f       	add	r18, r18
    2fec:	33 1f       	adc	r19, r19
    2fee:	22 0f       	add	r18, r18
    2ff0:	33 1f       	adc	r19, r19
    2ff2:	82 0f       	add	r24, r18
    2ff4:	93 1f       	adc	r25, r19
    2ff6:	9c 01       	movw	r18, r24
    2ff8:	24 0f       	add	r18, r20
    2ffa:	35 1f       	adc	r19, r21
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    3000:	fc 01       	movw	r30, r24
    3002:	e2 0f       	add	r30, r18
    3004:	f3 1f       	adc	r31, r19
    3006:	62 85       	ldd	r22, Z+10	; 0x0a
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	48 2f       	mov	r20, r24
    300c:	50 e0       	ldi	r21, 0x00	; 0
    300e:	ca 01       	movw	r24, r20
    3010:	88 0f       	add	r24, r24
    3012:	99 1f       	adc	r25, r25
    3014:	9c 01       	movw	r18, r24
    3016:	22 0f       	add	r18, r18
    3018:	33 1f       	adc	r19, r19
    301a:	22 0f       	add	r18, r18
    301c:	33 1f       	adc	r19, r19
    301e:	22 0f       	add	r18, r18
    3020:	33 1f       	adc	r19, r19
    3022:	82 0f       	add	r24, r18
    3024:	93 1f       	adc	r25, r19
    3026:	9c 01       	movw	r18, r24
    3028:	24 0f       	add	r18, r20
    302a:	35 1f       	adc	r19, r21
    302c:	8b 81       	ldd	r24, Y+3	; 0x03
    302e:	9c 81       	ldd	r25, Y+4	; 0x04
    3030:	fc 01       	movw	r30, r24
    3032:	e2 0f       	add	r30, r18
    3034:	f3 1f       	adc	r31, r19
    3036:	93 85       	ldd	r25, Z+11	; 0x0b
    3038:	86 2f       	mov	r24, r22
    303a:	69 2f       	mov	r22, r25
    303c:	41 e0       	ldi	r20, 0x01	; 1
    303e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
				M_DIO_enuSetPinValue(Copy_pAstrSSDConfig[Local_u8Iter].F_Port,Copy_pAstrSSDConfig[Local_u8Iter].F_Pin,DIO_State_High);
    3042:	89 81       	ldd	r24, Y+1	; 0x01
    3044:	48 2f       	mov	r20, r24
    3046:	50 e0       	ldi	r21, 0x00	; 0
    3048:	ca 01       	movw	r24, r20
    304a:	88 0f       	add	r24, r24
    304c:	99 1f       	adc	r25, r25
    304e:	9c 01       	movw	r18, r24
    3050:	22 0f       	add	r18, r18
    3052:	33 1f       	adc	r19, r19
    3054:	22 0f       	add	r18, r18
    3056:	33 1f       	adc	r19, r19
    3058:	22 0f       	add	r18, r18
    305a:	33 1f       	adc	r19, r19
    305c:	82 0f       	add	r24, r18
    305e:	93 1f       	adc	r25, r19
    3060:	9c 01       	movw	r18, r24
    3062:	24 0f       	add	r18, r20
    3064:	35 1f       	adc	r19, r21
    3066:	8b 81       	ldd	r24, Y+3	; 0x03
    3068:	9c 81       	ldd	r25, Y+4	; 0x04
    306a:	fc 01       	movw	r30, r24
    306c:	e2 0f       	add	r30, r18
    306e:	f3 1f       	adc	r31, r19
    3070:	64 85       	ldd	r22, Z+12	; 0x0c
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	48 2f       	mov	r20, r24
    3076:	50 e0       	ldi	r21, 0x00	; 0
    3078:	ca 01       	movw	r24, r20
    307a:	88 0f       	add	r24, r24
    307c:	99 1f       	adc	r25, r25
    307e:	9c 01       	movw	r18, r24
    3080:	22 0f       	add	r18, r18
    3082:	33 1f       	adc	r19, r19
    3084:	22 0f       	add	r18, r18
    3086:	33 1f       	adc	r19, r19
    3088:	22 0f       	add	r18, r18
    308a:	33 1f       	adc	r19, r19
    308c:	82 0f       	add	r24, r18
    308e:	93 1f       	adc	r25, r19
    3090:	9c 01       	movw	r18, r24
    3092:	24 0f       	add	r18, r20
    3094:	35 1f       	adc	r19, r21
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	9c 81       	ldd	r25, Y+4	; 0x04
    309a:	fc 01       	movw	r30, r24
    309c:	e2 0f       	add	r30, r18
    309e:	f3 1f       	adc	r31, r19
    30a0:	95 85       	ldd	r25, Z+13	; 0x0d
    30a2:	86 2f       	mov	r24, r22
    30a4:	69 2f       	mov	r22, r25
    30a6:	41 e0       	ldi	r20, 0x01	; 1
    30a8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
				M_DIO_enuSetPinValue(Copy_pAstrSSDConfig[Local_u8Iter].G_Port,Copy_pAstrSSDConfig[Local_u8Iter].G_Pin,DIO_State_High);
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	48 2f       	mov	r20, r24
    30b0:	50 e0       	ldi	r21, 0x00	; 0
    30b2:	ca 01       	movw	r24, r20
    30b4:	88 0f       	add	r24, r24
    30b6:	99 1f       	adc	r25, r25
    30b8:	9c 01       	movw	r18, r24
    30ba:	22 0f       	add	r18, r18
    30bc:	33 1f       	adc	r19, r19
    30be:	22 0f       	add	r18, r18
    30c0:	33 1f       	adc	r19, r19
    30c2:	22 0f       	add	r18, r18
    30c4:	33 1f       	adc	r19, r19
    30c6:	82 0f       	add	r24, r18
    30c8:	93 1f       	adc	r25, r19
    30ca:	9c 01       	movw	r18, r24
    30cc:	24 0f       	add	r18, r20
    30ce:	35 1f       	adc	r19, r21
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	9c 81       	ldd	r25, Y+4	; 0x04
    30d4:	fc 01       	movw	r30, r24
    30d6:	e2 0f       	add	r30, r18
    30d8:	f3 1f       	adc	r31, r19
    30da:	66 85       	ldd	r22, Z+14	; 0x0e
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
    30de:	48 2f       	mov	r20, r24
    30e0:	50 e0       	ldi	r21, 0x00	; 0
    30e2:	ca 01       	movw	r24, r20
    30e4:	88 0f       	add	r24, r24
    30e6:	99 1f       	adc	r25, r25
    30e8:	9c 01       	movw	r18, r24
    30ea:	22 0f       	add	r18, r18
    30ec:	33 1f       	adc	r19, r19
    30ee:	22 0f       	add	r18, r18
    30f0:	33 1f       	adc	r19, r19
    30f2:	22 0f       	add	r18, r18
    30f4:	33 1f       	adc	r19, r19
    30f6:	82 0f       	add	r24, r18
    30f8:	93 1f       	adc	r25, r19
    30fa:	9c 01       	movw	r18, r24
    30fc:	24 0f       	add	r18, r20
    30fe:	35 1f       	adc	r19, r21
    3100:	8b 81       	ldd	r24, Y+3	; 0x03
    3102:	9c 81       	ldd	r25, Y+4	; 0x04
    3104:	fc 01       	movw	r30, r24
    3106:	e2 0f       	add	r30, r18
    3108:	f3 1f       	adc	r31, r19
    310a:	97 85       	ldd	r25, Z+15	; 0x0f
    310c:	86 2f       	mov	r24, r22
    310e:	69 2f       	mov	r22, r25
    3110:	41 e0       	ldi	r20, 0x01	; 1
    3112:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
    3116:	73 c1       	rjmp	.+742    	; 0x33fe <SSD_enuInit+0xa64>
				//M_DIO_enuSetPinValue(Copy_pAstrSSDConfig[Local_u8Iter].DP_Port,Copy_pAstrSSDConfig[Local_u8Iter].DP_Pin,DIO_State_High);
				break;
				case COM_ANODE:

				M_DIO_enuSetPinValue(Copy_pAstrSSDConfig[Local_u8Iter].A_Port,Copy_pAstrSSDConfig[Local_u8Iter].A_Pin,DIO_State_Low);
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	48 2f       	mov	r20, r24
    311c:	50 e0       	ldi	r21, 0x00	; 0
    311e:	ca 01       	movw	r24, r20
    3120:	88 0f       	add	r24, r24
    3122:	99 1f       	adc	r25, r25
    3124:	9c 01       	movw	r18, r24
    3126:	22 0f       	add	r18, r18
    3128:	33 1f       	adc	r19, r19
    312a:	22 0f       	add	r18, r18
    312c:	33 1f       	adc	r19, r19
    312e:	22 0f       	add	r18, r18
    3130:	33 1f       	adc	r19, r19
    3132:	82 0f       	add	r24, r18
    3134:	93 1f       	adc	r25, r19
    3136:	9c 01       	movw	r18, r24
    3138:	24 0f       	add	r18, r20
    313a:	35 1f       	adc	r19, r21
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	9c 81       	ldd	r25, Y+4	; 0x04
    3140:	fc 01       	movw	r30, r24
    3142:	e2 0f       	add	r30, r18
    3144:	f3 1f       	adc	r31, r19
    3146:	62 81       	ldd	r22, Z+2	; 0x02
    3148:	89 81       	ldd	r24, Y+1	; 0x01
    314a:	48 2f       	mov	r20, r24
    314c:	50 e0       	ldi	r21, 0x00	; 0
    314e:	ca 01       	movw	r24, r20
    3150:	88 0f       	add	r24, r24
    3152:	99 1f       	adc	r25, r25
    3154:	9c 01       	movw	r18, r24
    3156:	22 0f       	add	r18, r18
    3158:	33 1f       	adc	r19, r19
    315a:	22 0f       	add	r18, r18
    315c:	33 1f       	adc	r19, r19
    315e:	22 0f       	add	r18, r18
    3160:	33 1f       	adc	r19, r19
    3162:	82 0f       	add	r24, r18
    3164:	93 1f       	adc	r25, r19
    3166:	9c 01       	movw	r18, r24
    3168:	24 0f       	add	r18, r20
    316a:	35 1f       	adc	r19, r21
    316c:	8b 81       	ldd	r24, Y+3	; 0x03
    316e:	9c 81       	ldd	r25, Y+4	; 0x04
    3170:	fc 01       	movw	r30, r24
    3172:	e2 0f       	add	r30, r18
    3174:	f3 1f       	adc	r31, r19
    3176:	93 81       	ldd	r25, Z+3	; 0x03
    3178:	86 2f       	mov	r24, r22
    317a:	69 2f       	mov	r22, r25
    317c:	40 e0       	ldi	r20, 0x00	; 0
    317e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
				M_DIO_enuSetPinValue(Copy_pAstrSSDConfig[Local_u8Iter].B_Port,Copy_pAstrSSDConfig[Local_u8Iter].B_Pin,DIO_State_Low);
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	48 2f       	mov	r20, r24
    3186:	50 e0       	ldi	r21, 0x00	; 0
    3188:	ca 01       	movw	r24, r20
    318a:	88 0f       	add	r24, r24
    318c:	99 1f       	adc	r25, r25
    318e:	9c 01       	movw	r18, r24
    3190:	22 0f       	add	r18, r18
    3192:	33 1f       	adc	r19, r19
    3194:	22 0f       	add	r18, r18
    3196:	33 1f       	adc	r19, r19
    3198:	22 0f       	add	r18, r18
    319a:	33 1f       	adc	r19, r19
    319c:	82 0f       	add	r24, r18
    319e:	93 1f       	adc	r25, r19
    31a0:	9c 01       	movw	r18, r24
    31a2:	24 0f       	add	r18, r20
    31a4:	35 1f       	adc	r19, r21
    31a6:	8b 81       	ldd	r24, Y+3	; 0x03
    31a8:	9c 81       	ldd	r25, Y+4	; 0x04
    31aa:	fc 01       	movw	r30, r24
    31ac:	e2 0f       	add	r30, r18
    31ae:	f3 1f       	adc	r31, r19
    31b0:	64 81       	ldd	r22, Z+4	; 0x04
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	48 2f       	mov	r20, r24
    31b6:	50 e0       	ldi	r21, 0x00	; 0
    31b8:	ca 01       	movw	r24, r20
    31ba:	88 0f       	add	r24, r24
    31bc:	99 1f       	adc	r25, r25
    31be:	9c 01       	movw	r18, r24
    31c0:	22 0f       	add	r18, r18
    31c2:	33 1f       	adc	r19, r19
    31c4:	22 0f       	add	r18, r18
    31c6:	33 1f       	adc	r19, r19
    31c8:	22 0f       	add	r18, r18
    31ca:	33 1f       	adc	r19, r19
    31cc:	82 0f       	add	r24, r18
    31ce:	93 1f       	adc	r25, r19
    31d0:	9c 01       	movw	r18, r24
    31d2:	24 0f       	add	r18, r20
    31d4:	35 1f       	adc	r19, r21
    31d6:	8b 81       	ldd	r24, Y+3	; 0x03
    31d8:	9c 81       	ldd	r25, Y+4	; 0x04
    31da:	fc 01       	movw	r30, r24
    31dc:	e2 0f       	add	r30, r18
    31de:	f3 1f       	adc	r31, r19
    31e0:	95 81       	ldd	r25, Z+5	; 0x05
    31e2:	86 2f       	mov	r24, r22
    31e4:	69 2f       	mov	r22, r25
    31e6:	40 e0       	ldi	r20, 0x00	; 0
    31e8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
				M_DIO_enuSetPinValue(Copy_pAstrSSDConfig[Local_u8Iter].C_Port,Copy_pAstrSSDConfig[Local_u8Iter].C_Pin,DIO_State_Low);
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	48 2f       	mov	r20, r24
    31f0:	50 e0       	ldi	r21, 0x00	; 0
    31f2:	ca 01       	movw	r24, r20
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	9c 01       	movw	r18, r24
    31fa:	22 0f       	add	r18, r18
    31fc:	33 1f       	adc	r19, r19
    31fe:	22 0f       	add	r18, r18
    3200:	33 1f       	adc	r19, r19
    3202:	22 0f       	add	r18, r18
    3204:	33 1f       	adc	r19, r19
    3206:	82 0f       	add	r24, r18
    3208:	93 1f       	adc	r25, r19
    320a:	9c 01       	movw	r18, r24
    320c:	24 0f       	add	r18, r20
    320e:	35 1f       	adc	r19, r21
    3210:	8b 81       	ldd	r24, Y+3	; 0x03
    3212:	9c 81       	ldd	r25, Y+4	; 0x04
    3214:	fc 01       	movw	r30, r24
    3216:	e2 0f       	add	r30, r18
    3218:	f3 1f       	adc	r31, r19
    321a:	66 81       	ldd	r22, Z+6	; 0x06
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	48 2f       	mov	r20, r24
    3220:	50 e0       	ldi	r21, 0x00	; 0
    3222:	ca 01       	movw	r24, r20
    3224:	88 0f       	add	r24, r24
    3226:	99 1f       	adc	r25, r25
    3228:	9c 01       	movw	r18, r24
    322a:	22 0f       	add	r18, r18
    322c:	33 1f       	adc	r19, r19
    322e:	22 0f       	add	r18, r18
    3230:	33 1f       	adc	r19, r19
    3232:	22 0f       	add	r18, r18
    3234:	33 1f       	adc	r19, r19
    3236:	82 0f       	add	r24, r18
    3238:	93 1f       	adc	r25, r19
    323a:	9c 01       	movw	r18, r24
    323c:	24 0f       	add	r18, r20
    323e:	35 1f       	adc	r19, r21
    3240:	8b 81       	ldd	r24, Y+3	; 0x03
    3242:	9c 81       	ldd	r25, Y+4	; 0x04
    3244:	fc 01       	movw	r30, r24
    3246:	e2 0f       	add	r30, r18
    3248:	f3 1f       	adc	r31, r19
    324a:	97 81       	ldd	r25, Z+7	; 0x07
    324c:	86 2f       	mov	r24, r22
    324e:	69 2f       	mov	r22, r25
    3250:	40 e0       	ldi	r20, 0x00	; 0
    3252:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
				M_DIO_enuSetPinValue(Copy_pAstrSSDConfig[Local_u8Iter].D_Port,Copy_pAstrSSDConfig[Local_u8Iter].D_Pin,DIO_State_Low);
    3256:	89 81       	ldd	r24, Y+1	; 0x01
    3258:	48 2f       	mov	r20, r24
    325a:	50 e0       	ldi	r21, 0x00	; 0
    325c:	ca 01       	movw	r24, r20
    325e:	88 0f       	add	r24, r24
    3260:	99 1f       	adc	r25, r25
    3262:	9c 01       	movw	r18, r24
    3264:	22 0f       	add	r18, r18
    3266:	33 1f       	adc	r19, r19
    3268:	22 0f       	add	r18, r18
    326a:	33 1f       	adc	r19, r19
    326c:	22 0f       	add	r18, r18
    326e:	33 1f       	adc	r19, r19
    3270:	82 0f       	add	r24, r18
    3272:	93 1f       	adc	r25, r19
    3274:	9c 01       	movw	r18, r24
    3276:	24 0f       	add	r18, r20
    3278:	35 1f       	adc	r19, r21
    327a:	8b 81       	ldd	r24, Y+3	; 0x03
    327c:	9c 81       	ldd	r25, Y+4	; 0x04
    327e:	fc 01       	movw	r30, r24
    3280:	e2 0f       	add	r30, r18
    3282:	f3 1f       	adc	r31, r19
    3284:	60 85       	ldd	r22, Z+8	; 0x08
    3286:	89 81       	ldd	r24, Y+1	; 0x01
    3288:	48 2f       	mov	r20, r24
    328a:	50 e0       	ldi	r21, 0x00	; 0
    328c:	ca 01       	movw	r24, r20
    328e:	88 0f       	add	r24, r24
    3290:	99 1f       	adc	r25, r25
    3292:	9c 01       	movw	r18, r24
    3294:	22 0f       	add	r18, r18
    3296:	33 1f       	adc	r19, r19
    3298:	22 0f       	add	r18, r18
    329a:	33 1f       	adc	r19, r19
    329c:	22 0f       	add	r18, r18
    329e:	33 1f       	adc	r19, r19
    32a0:	82 0f       	add	r24, r18
    32a2:	93 1f       	adc	r25, r19
    32a4:	9c 01       	movw	r18, r24
    32a6:	24 0f       	add	r18, r20
    32a8:	35 1f       	adc	r19, r21
    32aa:	8b 81       	ldd	r24, Y+3	; 0x03
    32ac:	9c 81       	ldd	r25, Y+4	; 0x04
    32ae:	fc 01       	movw	r30, r24
    32b0:	e2 0f       	add	r30, r18
    32b2:	f3 1f       	adc	r31, r19
    32b4:	91 85       	ldd	r25, Z+9	; 0x09
    32b6:	86 2f       	mov	r24, r22
    32b8:	69 2f       	mov	r22, r25
    32ba:	40 e0       	ldi	r20, 0x00	; 0
    32bc:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
				M_DIO_enuSetPinValue(Copy_pAstrSSDConfig[Local_u8Iter].E_Port,Copy_pAstrSSDConfig[Local_u8Iter].E_Pin,DIO_State_Low);
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	48 2f       	mov	r20, r24
    32c4:	50 e0       	ldi	r21, 0x00	; 0
    32c6:	ca 01       	movw	r24, r20
    32c8:	88 0f       	add	r24, r24
    32ca:	99 1f       	adc	r25, r25
    32cc:	9c 01       	movw	r18, r24
    32ce:	22 0f       	add	r18, r18
    32d0:	33 1f       	adc	r19, r19
    32d2:	22 0f       	add	r18, r18
    32d4:	33 1f       	adc	r19, r19
    32d6:	22 0f       	add	r18, r18
    32d8:	33 1f       	adc	r19, r19
    32da:	82 0f       	add	r24, r18
    32dc:	93 1f       	adc	r25, r19
    32de:	9c 01       	movw	r18, r24
    32e0:	24 0f       	add	r18, r20
    32e2:	35 1f       	adc	r19, r21
    32e4:	8b 81       	ldd	r24, Y+3	; 0x03
    32e6:	9c 81       	ldd	r25, Y+4	; 0x04
    32e8:	fc 01       	movw	r30, r24
    32ea:	e2 0f       	add	r30, r18
    32ec:	f3 1f       	adc	r31, r19
    32ee:	62 85       	ldd	r22, Z+10	; 0x0a
    32f0:	89 81       	ldd	r24, Y+1	; 0x01
    32f2:	48 2f       	mov	r20, r24
    32f4:	50 e0       	ldi	r21, 0x00	; 0
    32f6:	ca 01       	movw	r24, r20
    32f8:	88 0f       	add	r24, r24
    32fa:	99 1f       	adc	r25, r25
    32fc:	9c 01       	movw	r18, r24
    32fe:	22 0f       	add	r18, r18
    3300:	33 1f       	adc	r19, r19
    3302:	22 0f       	add	r18, r18
    3304:	33 1f       	adc	r19, r19
    3306:	22 0f       	add	r18, r18
    3308:	33 1f       	adc	r19, r19
    330a:	82 0f       	add	r24, r18
    330c:	93 1f       	adc	r25, r19
    330e:	9c 01       	movw	r18, r24
    3310:	24 0f       	add	r18, r20
    3312:	35 1f       	adc	r19, r21
    3314:	8b 81       	ldd	r24, Y+3	; 0x03
    3316:	9c 81       	ldd	r25, Y+4	; 0x04
    3318:	fc 01       	movw	r30, r24
    331a:	e2 0f       	add	r30, r18
    331c:	f3 1f       	adc	r31, r19
    331e:	93 85       	ldd	r25, Z+11	; 0x0b
    3320:	86 2f       	mov	r24, r22
    3322:	69 2f       	mov	r22, r25
    3324:	40 e0       	ldi	r20, 0x00	; 0
    3326:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
				M_DIO_enuSetPinValue(Copy_pAstrSSDConfig[Local_u8Iter].F_Port,Copy_pAstrSSDConfig[Local_u8Iter].F_Pin,DIO_State_Low);
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	48 2f       	mov	r20, r24
    332e:	50 e0       	ldi	r21, 0x00	; 0
    3330:	ca 01       	movw	r24, r20
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	9c 01       	movw	r18, r24
    3338:	22 0f       	add	r18, r18
    333a:	33 1f       	adc	r19, r19
    333c:	22 0f       	add	r18, r18
    333e:	33 1f       	adc	r19, r19
    3340:	22 0f       	add	r18, r18
    3342:	33 1f       	adc	r19, r19
    3344:	82 0f       	add	r24, r18
    3346:	93 1f       	adc	r25, r19
    3348:	9c 01       	movw	r18, r24
    334a:	24 0f       	add	r18, r20
    334c:	35 1f       	adc	r19, r21
    334e:	8b 81       	ldd	r24, Y+3	; 0x03
    3350:	9c 81       	ldd	r25, Y+4	; 0x04
    3352:	fc 01       	movw	r30, r24
    3354:	e2 0f       	add	r30, r18
    3356:	f3 1f       	adc	r31, r19
    3358:	64 85       	ldd	r22, Z+12	; 0x0c
    335a:	89 81       	ldd	r24, Y+1	; 0x01
    335c:	48 2f       	mov	r20, r24
    335e:	50 e0       	ldi	r21, 0x00	; 0
    3360:	ca 01       	movw	r24, r20
    3362:	88 0f       	add	r24, r24
    3364:	99 1f       	adc	r25, r25
    3366:	9c 01       	movw	r18, r24
    3368:	22 0f       	add	r18, r18
    336a:	33 1f       	adc	r19, r19
    336c:	22 0f       	add	r18, r18
    336e:	33 1f       	adc	r19, r19
    3370:	22 0f       	add	r18, r18
    3372:	33 1f       	adc	r19, r19
    3374:	82 0f       	add	r24, r18
    3376:	93 1f       	adc	r25, r19
    3378:	9c 01       	movw	r18, r24
    337a:	24 0f       	add	r18, r20
    337c:	35 1f       	adc	r19, r21
    337e:	8b 81       	ldd	r24, Y+3	; 0x03
    3380:	9c 81       	ldd	r25, Y+4	; 0x04
    3382:	fc 01       	movw	r30, r24
    3384:	e2 0f       	add	r30, r18
    3386:	f3 1f       	adc	r31, r19
    3388:	95 85       	ldd	r25, Z+13	; 0x0d
    338a:	86 2f       	mov	r24, r22
    338c:	69 2f       	mov	r22, r25
    338e:	40 e0       	ldi	r20, 0x00	; 0
    3390:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
				M_DIO_enuSetPinValue(Copy_pAstrSSDConfig[Local_u8Iter].G_Port,Copy_pAstrSSDConfig[Local_u8Iter].G_Pin,DIO_State_Low);
    3394:	89 81       	ldd	r24, Y+1	; 0x01
    3396:	48 2f       	mov	r20, r24
    3398:	50 e0       	ldi	r21, 0x00	; 0
    339a:	ca 01       	movw	r24, r20
    339c:	88 0f       	add	r24, r24
    339e:	99 1f       	adc	r25, r25
    33a0:	9c 01       	movw	r18, r24
    33a2:	22 0f       	add	r18, r18
    33a4:	33 1f       	adc	r19, r19
    33a6:	22 0f       	add	r18, r18
    33a8:	33 1f       	adc	r19, r19
    33aa:	22 0f       	add	r18, r18
    33ac:	33 1f       	adc	r19, r19
    33ae:	82 0f       	add	r24, r18
    33b0:	93 1f       	adc	r25, r19
    33b2:	9c 01       	movw	r18, r24
    33b4:	24 0f       	add	r18, r20
    33b6:	35 1f       	adc	r19, r21
    33b8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ba:	9c 81       	ldd	r25, Y+4	; 0x04
    33bc:	fc 01       	movw	r30, r24
    33be:	e2 0f       	add	r30, r18
    33c0:	f3 1f       	adc	r31, r19
    33c2:	66 85       	ldd	r22, Z+14	; 0x0e
    33c4:	89 81       	ldd	r24, Y+1	; 0x01
    33c6:	48 2f       	mov	r20, r24
    33c8:	50 e0       	ldi	r21, 0x00	; 0
    33ca:	ca 01       	movw	r24, r20
    33cc:	88 0f       	add	r24, r24
    33ce:	99 1f       	adc	r25, r25
    33d0:	9c 01       	movw	r18, r24
    33d2:	22 0f       	add	r18, r18
    33d4:	33 1f       	adc	r19, r19
    33d6:	22 0f       	add	r18, r18
    33d8:	33 1f       	adc	r19, r19
    33da:	22 0f       	add	r18, r18
    33dc:	33 1f       	adc	r19, r19
    33de:	82 0f       	add	r24, r18
    33e0:	93 1f       	adc	r25, r19
    33e2:	9c 01       	movw	r18, r24
    33e4:	24 0f       	add	r18, r20
    33e6:	35 1f       	adc	r19, r21
    33e8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ea:	9c 81       	ldd	r25, Y+4	; 0x04
    33ec:	fc 01       	movw	r30, r24
    33ee:	e2 0f       	add	r30, r18
    33f0:	f3 1f       	adc	r31, r19
    33f2:	97 85       	ldd	r25, Z+15	; 0x0f
    33f4:	86 2f       	mov	r24, r22
    33f6:	69 2f       	mov	r22, r25
    33f8:	40 e0       	ldi	r20, 0x00	; 0
    33fa:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
{
	u8 Local_ErrorState = ES_NOK;
	if(Copy_pAstrSSDConfig !=NULL)
	{
		u8 Local_u8Iter;
		for(Local_u8Iter=0;Local_u8Iter<SSD_u8SSDNum;Local_u8Iter++)
    33fe:	89 81       	ldd	r24, Y+1	; 0x01
    3400:	8f 5f       	subi	r24, 0xFF	; 255
    3402:	89 83       	std	Y+1, r24	; 0x01
    3404:	90 91 a0 01 	lds	r25, 0x01A0
    3408:	89 81       	ldd	r24, Y+1	; 0x01
    340a:	89 17       	cp	r24, r25
    340c:	08 f4       	brcc	.+2      	; 0x3410 <SSD_enuInit+0xa76>
    340e:	d6 ca       	rjmp	.-2644   	; 0x29bc <SSD_enuInit+0x22>
			
			
			
			
		}
		Local_ErrorState = ES_OK;
    3410:	81 e0       	ldi	r24, 0x01	; 1
    3412:	8a 83       	std	Y+2, r24	; 0x02
    3414:	02 c0       	rjmp	.+4      	; 0x341a <SSD_enuInit+0xa80>
	}else
	{
		Local_ErrorState =ES_NULL_POINTER;
    3416:	83 e0       	ldi	r24, 0x03	; 3
    3418:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	
	return Local_ErrorState;
    341a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    341c:	26 96       	adiw	r28, 0x06	; 6
    341e:	0f b6       	in	r0, 0x3f	; 63
    3420:	f8 94       	cli
    3422:	de bf       	out	0x3e, r29	; 62
    3424:	0f be       	out	0x3f, r0	; 63
    3426:	cd bf       	out	0x3d, r28	; 61
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <SSD_enuDisplaySingleNumber>:
ES_t SSD_enuDisplaySingleNumber(SSD_t *Copy_pAstrSSDinfo,u8 Copy_u8Number)
{
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	00 d0       	rcall	.+0      	; 0x3434 <SSD_enuDisplaySingleNumber+0x6>
    3434:	00 d0       	rcall	.+0      	; 0x3436 <SSD_enuDisplaySingleNumber+0x8>
    3436:	00 d0       	rcall	.+0      	; 0x3438 <SSD_enuDisplaySingleNumber+0xa>
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
    343c:	9b 83       	std	Y+3, r25	; 0x03
    343e:	8a 83       	std	Y+2, r24	; 0x02
    3440:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState=ES_NOK;
    3442:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Number <= 15)
    3444:	8c 81       	ldd	r24, Y+4	; 0x04
    3446:	80 31       	cpi	r24, 0x10	; 16
    3448:	08 f0       	brcs	.+2      	; 0x344c <SSD_enuDisplaySingleNumber+0x1e>
    344a:	bb c1       	rjmp	.+886    	; 0x37c2 <SSD_enuDisplaySingleNumber+0x394>
	{
		switch(Copy_pAstrSSDinfo->COM_Type)
    344c:	ea 81       	ldd	r30, Y+2	; 0x02
    344e:	fb 81       	ldd	r31, Y+3	; 0x03
    3450:	82 89       	ldd	r24, Z+18	; 0x12
    3452:	28 2f       	mov	r18, r24
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	3e 83       	std	Y+6, r19	; 0x06
    3458:	2d 83       	std	Y+5, r18	; 0x05
    345a:	8d 81       	ldd	r24, Y+5	; 0x05
    345c:	9e 81       	ldd	r25, Y+6	; 0x06
    345e:	83 30       	cpi	r24, 0x03	; 3
    3460:	91 05       	cpc	r25, r1
    3462:	39 f0       	breq	.+14     	; 0x3472 <SSD_enuDisplaySingleNumber+0x44>
    3464:	2d 81       	ldd	r18, Y+5	; 0x05
    3466:	3e 81       	ldd	r19, Y+6	; 0x06
    3468:	26 30       	cpi	r18, 0x06	; 6
    346a:	31 05       	cpc	r19, r1
    346c:	09 f4       	brne	.+2      	; 0x3470 <SSD_enuDisplaySingleNumber+0x42>
    346e:	d4 c0       	rjmp	.+424    	; 0x3618 <SSD_enuDisplaySingleNumber+0x1ea>
    3470:	a5 c1       	rjmp	.+842    	; 0x37bc <SSD_enuDisplaySingleNumber+0x38e>
		{
			case COM_CATHODE:
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->A_Port,Copy_pAstrSSDinfo->A_Pin,DIO_State_High);
    3472:	ea 81       	ldd	r30, Y+2	; 0x02
    3474:	fb 81       	ldd	r31, Y+3	; 0x03
    3476:	82 81       	ldd	r24, Z+2	; 0x02
    3478:	ea 81       	ldd	r30, Y+2	; 0x02
    347a:	fb 81       	ldd	r31, Y+3	; 0x03
    347c:	93 81       	ldd	r25, Z+3	; 0x03
    347e:	69 2f       	mov	r22, r25
    3480:	41 e0       	ldi	r20, 0x01	; 1
    3482:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->B_Port,Copy_pAstrSSDinfo->B_Pin,DIO_State_High);
    3486:	ea 81       	ldd	r30, Y+2	; 0x02
    3488:	fb 81       	ldd	r31, Y+3	; 0x03
    348a:	84 81       	ldd	r24, Z+4	; 0x04
    348c:	ea 81       	ldd	r30, Y+2	; 0x02
    348e:	fb 81       	ldd	r31, Y+3	; 0x03
    3490:	95 81       	ldd	r25, Z+5	; 0x05
    3492:	69 2f       	mov	r22, r25
    3494:	41 e0       	ldi	r20, 0x01	; 1
    3496:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->C_Port,Copy_pAstrSSDinfo->C_Pin,DIO_State_High);
    349a:	ea 81       	ldd	r30, Y+2	; 0x02
    349c:	fb 81       	ldd	r31, Y+3	; 0x03
    349e:	86 81       	ldd	r24, Z+6	; 0x06
    34a0:	ea 81       	ldd	r30, Y+2	; 0x02
    34a2:	fb 81       	ldd	r31, Y+3	; 0x03
    34a4:	97 81       	ldd	r25, Z+7	; 0x07
    34a6:	69 2f       	mov	r22, r25
    34a8:	41 e0       	ldi	r20, 0x01	; 1
    34aa:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->D_Port,Copy_pAstrSSDinfo->D_Pin,DIO_State_High);
    34ae:	ea 81       	ldd	r30, Y+2	; 0x02
    34b0:	fb 81       	ldd	r31, Y+3	; 0x03
    34b2:	80 85       	ldd	r24, Z+8	; 0x08
    34b4:	ea 81       	ldd	r30, Y+2	; 0x02
    34b6:	fb 81       	ldd	r31, Y+3	; 0x03
    34b8:	91 85       	ldd	r25, Z+9	; 0x09
    34ba:	69 2f       	mov	r22, r25
    34bc:	41 e0       	ldi	r20, 0x01	; 1
    34be:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->E_Port,Copy_pAstrSSDinfo->E_Pin,DIO_State_High);
    34c2:	ea 81       	ldd	r30, Y+2	; 0x02
    34c4:	fb 81       	ldd	r31, Y+3	; 0x03
    34c6:	82 85       	ldd	r24, Z+10	; 0x0a
    34c8:	ea 81       	ldd	r30, Y+2	; 0x02
    34ca:	fb 81       	ldd	r31, Y+3	; 0x03
    34cc:	93 85       	ldd	r25, Z+11	; 0x0b
    34ce:	69 2f       	mov	r22, r25
    34d0:	41 e0       	ldi	r20, 0x01	; 1
    34d2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->F_Port,Copy_pAstrSSDinfo->F_Pin,DIO_State_High);
    34d6:	ea 81       	ldd	r30, Y+2	; 0x02
    34d8:	fb 81       	ldd	r31, Y+3	; 0x03
    34da:	84 85       	ldd	r24, Z+12	; 0x0c
    34dc:	ea 81       	ldd	r30, Y+2	; 0x02
    34de:	fb 81       	ldd	r31, Y+3	; 0x03
    34e0:	95 85       	ldd	r25, Z+13	; 0x0d
    34e2:	69 2f       	mov	r22, r25
    34e4:	41 e0       	ldi	r20, 0x01	; 1
    34e6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->G_Port,Copy_pAstrSSDinfo->G_Pin,DIO_State_High);
    34ea:	ea 81       	ldd	r30, Y+2	; 0x02
    34ec:	fb 81       	ldd	r31, Y+3	; 0x03
    34ee:	86 85       	ldd	r24, Z+14	; 0x0e
    34f0:	ea 81       	ldd	r30, Y+2	; 0x02
    34f2:	fb 81       	ldd	r31, Y+3	; 0x03
    34f4:	97 85       	ldd	r25, Z+15	; 0x0f
    34f6:	69 2f       	mov	r22, r25
    34f8:	41 e0       	ldi	r20, 0x01	; 1
    34fa:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->A_Port,Copy_pAstrSSDinfo->A_Pin,((catSeg[Copy_u8Number])&(1<<DIO_Pin0)));
    34fe:	ea 81       	ldd	r30, Y+2	; 0x02
    3500:	fb 81       	ldd	r31, Y+3	; 0x03
    3502:	22 81       	ldd	r18, Z+2	; 0x02
    3504:	ea 81       	ldd	r30, Y+2	; 0x02
    3506:	fb 81       	ldd	r31, Y+3	; 0x03
    3508:	33 81       	ldd	r19, Z+3	; 0x03
    350a:	8c 81       	ldd	r24, Y+4	; 0x04
    350c:	88 2f       	mov	r24, r24
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	fc 01       	movw	r30, r24
    3512:	e9 53       	subi	r30, 0x39	; 57
    3514:	fe 4f       	sbci	r31, 0xFE	; 254
    3516:	80 81       	ld	r24, Z
    3518:	98 2f       	mov	r25, r24
    351a:	91 70       	andi	r25, 0x01	; 1
    351c:	82 2f       	mov	r24, r18
    351e:	63 2f       	mov	r22, r19
    3520:	49 2f       	mov	r20, r25
    3522:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->B_Port,Copy_pAstrSSDinfo->B_Pin,((catSeg[Copy_u8Number])&(1<<DIO_Pin1)));
    3526:	ea 81       	ldd	r30, Y+2	; 0x02
    3528:	fb 81       	ldd	r31, Y+3	; 0x03
    352a:	24 81       	ldd	r18, Z+4	; 0x04
    352c:	ea 81       	ldd	r30, Y+2	; 0x02
    352e:	fb 81       	ldd	r31, Y+3	; 0x03
    3530:	35 81       	ldd	r19, Z+5	; 0x05
    3532:	8c 81       	ldd	r24, Y+4	; 0x04
    3534:	88 2f       	mov	r24, r24
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	fc 01       	movw	r30, r24
    353a:	e9 53       	subi	r30, 0x39	; 57
    353c:	fe 4f       	sbci	r31, 0xFE	; 254
    353e:	80 81       	ld	r24, Z
    3540:	98 2f       	mov	r25, r24
    3542:	92 70       	andi	r25, 0x02	; 2
    3544:	82 2f       	mov	r24, r18
    3546:	63 2f       	mov	r22, r19
    3548:	49 2f       	mov	r20, r25
    354a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->C_Port,Copy_pAstrSSDinfo->C_Pin,((catSeg[Copy_u8Number])&(1<<DIO_Pin2)));
    354e:	ea 81       	ldd	r30, Y+2	; 0x02
    3550:	fb 81       	ldd	r31, Y+3	; 0x03
    3552:	26 81       	ldd	r18, Z+6	; 0x06
    3554:	ea 81       	ldd	r30, Y+2	; 0x02
    3556:	fb 81       	ldd	r31, Y+3	; 0x03
    3558:	37 81       	ldd	r19, Z+7	; 0x07
    355a:	8c 81       	ldd	r24, Y+4	; 0x04
    355c:	88 2f       	mov	r24, r24
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	fc 01       	movw	r30, r24
    3562:	e9 53       	subi	r30, 0x39	; 57
    3564:	fe 4f       	sbci	r31, 0xFE	; 254
    3566:	80 81       	ld	r24, Z
    3568:	98 2f       	mov	r25, r24
    356a:	94 70       	andi	r25, 0x04	; 4
    356c:	82 2f       	mov	r24, r18
    356e:	63 2f       	mov	r22, r19
    3570:	49 2f       	mov	r20, r25
    3572:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->D_Port,Copy_pAstrSSDinfo->D_Pin,((catSeg[Copy_u8Number])&(1<<DIO_Pin3)));
    3576:	ea 81       	ldd	r30, Y+2	; 0x02
    3578:	fb 81       	ldd	r31, Y+3	; 0x03
    357a:	20 85       	ldd	r18, Z+8	; 0x08
    357c:	ea 81       	ldd	r30, Y+2	; 0x02
    357e:	fb 81       	ldd	r31, Y+3	; 0x03
    3580:	31 85       	ldd	r19, Z+9	; 0x09
    3582:	8c 81       	ldd	r24, Y+4	; 0x04
    3584:	88 2f       	mov	r24, r24
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	fc 01       	movw	r30, r24
    358a:	e9 53       	subi	r30, 0x39	; 57
    358c:	fe 4f       	sbci	r31, 0xFE	; 254
    358e:	80 81       	ld	r24, Z
    3590:	98 2f       	mov	r25, r24
    3592:	98 70       	andi	r25, 0x08	; 8
    3594:	82 2f       	mov	r24, r18
    3596:	63 2f       	mov	r22, r19
    3598:	49 2f       	mov	r20, r25
    359a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->E_Port,Copy_pAstrSSDinfo->E_Pin,((catSeg[Copy_u8Number])&(1<<DIO_Pin4)));
    359e:	ea 81       	ldd	r30, Y+2	; 0x02
    35a0:	fb 81       	ldd	r31, Y+3	; 0x03
    35a2:	22 85       	ldd	r18, Z+10	; 0x0a
    35a4:	ea 81       	ldd	r30, Y+2	; 0x02
    35a6:	fb 81       	ldd	r31, Y+3	; 0x03
    35a8:	33 85       	ldd	r19, Z+11	; 0x0b
    35aa:	8c 81       	ldd	r24, Y+4	; 0x04
    35ac:	88 2f       	mov	r24, r24
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	fc 01       	movw	r30, r24
    35b2:	e9 53       	subi	r30, 0x39	; 57
    35b4:	fe 4f       	sbci	r31, 0xFE	; 254
    35b6:	80 81       	ld	r24, Z
    35b8:	98 2f       	mov	r25, r24
    35ba:	90 71       	andi	r25, 0x10	; 16
    35bc:	82 2f       	mov	r24, r18
    35be:	63 2f       	mov	r22, r19
    35c0:	49 2f       	mov	r20, r25
    35c2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->F_Port,Copy_pAstrSSDinfo->F_Pin,((catSeg[Copy_u8Number])&(1<<DIO_Pin5)));
    35c6:	ea 81       	ldd	r30, Y+2	; 0x02
    35c8:	fb 81       	ldd	r31, Y+3	; 0x03
    35ca:	24 85       	ldd	r18, Z+12	; 0x0c
    35cc:	ea 81       	ldd	r30, Y+2	; 0x02
    35ce:	fb 81       	ldd	r31, Y+3	; 0x03
    35d0:	35 85       	ldd	r19, Z+13	; 0x0d
    35d2:	8c 81       	ldd	r24, Y+4	; 0x04
    35d4:	88 2f       	mov	r24, r24
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	fc 01       	movw	r30, r24
    35da:	e9 53       	subi	r30, 0x39	; 57
    35dc:	fe 4f       	sbci	r31, 0xFE	; 254
    35de:	80 81       	ld	r24, Z
    35e0:	98 2f       	mov	r25, r24
    35e2:	90 72       	andi	r25, 0x20	; 32
    35e4:	82 2f       	mov	r24, r18
    35e6:	63 2f       	mov	r22, r19
    35e8:	49 2f       	mov	r20, r25
    35ea:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->G_Port,Copy_pAstrSSDinfo->G_Pin,((catSeg[Copy_u8Number])&(1<<DIO_Pin6)));
    35ee:	ea 81       	ldd	r30, Y+2	; 0x02
    35f0:	fb 81       	ldd	r31, Y+3	; 0x03
    35f2:	26 85       	ldd	r18, Z+14	; 0x0e
    35f4:	ea 81       	ldd	r30, Y+2	; 0x02
    35f6:	fb 81       	ldd	r31, Y+3	; 0x03
    35f8:	37 85       	ldd	r19, Z+15	; 0x0f
    35fa:	8c 81       	ldd	r24, Y+4	; 0x04
    35fc:	88 2f       	mov	r24, r24
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	fc 01       	movw	r30, r24
    3602:	e9 53       	subi	r30, 0x39	; 57
    3604:	fe 4f       	sbci	r31, 0xFE	; 254
    3606:	80 81       	ld	r24, Z
    3608:	98 2f       	mov	r25, r24
    360a:	90 74       	andi	r25, 0x40	; 64
    360c:	82 2f       	mov	r24, r18
    360e:	63 2f       	mov	r22, r19
    3610:	49 2f       	mov	r20, r25
    3612:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
    3616:	d2 c0       	rjmp	.+420    	; 0x37bc <SSD_enuDisplaySingleNumber+0x38e>
			
			break;
			case COM_ANODE:
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->A_Port,Copy_pAstrSSDinfo->A_Pin,DIO_State_Low);
    3618:	ea 81       	ldd	r30, Y+2	; 0x02
    361a:	fb 81       	ldd	r31, Y+3	; 0x03
    361c:	82 81       	ldd	r24, Z+2	; 0x02
    361e:	ea 81       	ldd	r30, Y+2	; 0x02
    3620:	fb 81       	ldd	r31, Y+3	; 0x03
    3622:	93 81       	ldd	r25, Z+3	; 0x03
    3624:	69 2f       	mov	r22, r25
    3626:	40 e0       	ldi	r20, 0x00	; 0
    3628:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->B_Port,Copy_pAstrSSDinfo->B_Pin,DIO_State_Low);
    362c:	ea 81       	ldd	r30, Y+2	; 0x02
    362e:	fb 81       	ldd	r31, Y+3	; 0x03
    3630:	84 81       	ldd	r24, Z+4	; 0x04
    3632:	ea 81       	ldd	r30, Y+2	; 0x02
    3634:	fb 81       	ldd	r31, Y+3	; 0x03
    3636:	95 81       	ldd	r25, Z+5	; 0x05
    3638:	69 2f       	mov	r22, r25
    363a:	40 e0       	ldi	r20, 0x00	; 0
    363c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->C_Port,Copy_pAstrSSDinfo->C_Pin,DIO_State_Low);
    3640:	ea 81       	ldd	r30, Y+2	; 0x02
    3642:	fb 81       	ldd	r31, Y+3	; 0x03
    3644:	86 81       	ldd	r24, Z+6	; 0x06
    3646:	ea 81       	ldd	r30, Y+2	; 0x02
    3648:	fb 81       	ldd	r31, Y+3	; 0x03
    364a:	97 81       	ldd	r25, Z+7	; 0x07
    364c:	69 2f       	mov	r22, r25
    364e:	40 e0       	ldi	r20, 0x00	; 0
    3650:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->D_Port,Copy_pAstrSSDinfo->D_Pin,DIO_State_Low);
    3654:	ea 81       	ldd	r30, Y+2	; 0x02
    3656:	fb 81       	ldd	r31, Y+3	; 0x03
    3658:	80 85       	ldd	r24, Z+8	; 0x08
    365a:	ea 81       	ldd	r30, Y+2	; 0x02
    365c:	fb 81       	ldd	r31, Y+3	; 0x03
    365e:	91 85       	ldd	r25, Z+9	; 0x09
    3660:	69 2f       	mov	r22, r25
    3662:	40 e0       	ldi	r20, 0x00	; 0
    3664:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->E_Port,Copy_pAstrSSDinfo->E_Pin,DIO_State_Low);
    3668:	ea 81       	ldd	r30, Y+2	; 0x02
    366a:	fb 81       	ldd	r31, Y+3	; 0x03
    366c:	82 85       	ldd	r24, Z+10	; 0x0a
    366e:	ea 81       	ldd	r30, Y+2	; 0x02
    3670:	fb 81       	ldd	r31, Y+3	; 0x03
    3672:	93 85       	ldd	r25, Z+11	; 0x0b
    3674:	69 2f       	mov	r22, r25
    3676:	40 e0       	ldi	r20, 0x00	; 0
    3678:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->F_Port,Copy_pAstrSSDinfo->F_Pin,DIO_State_Low);
    367c:	ea 81       	ldd	r30, Y+2	; 0x02
    367e:	fb 81       	ldd	r31, Y+3	; 0x03
    3680:	84 85       	ldd	r24, Z+12	; 0x0c
    3682:	ea 81       	ldd	r30, Y+2	; 0x02
    3684:	fb 81       	ldd	r31, Y+3	; 0x03
    3686:	95 85       	ldd	r25, Z+13	; 0x0d
    3688:	69 2f       	mov	r22, r25
    368a:	40 e0       	ldi	r20, 0x00	; 0
    368c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->G_Port,Copy_pAstrSSDinfo->G_Pin,DIO_State_Low);
    3690:	ea 81       	ldd	r30, Y+2	; 0x02
    3692:	fb 81       	ldd	r31, Y+3	; 0x03
    3694:	86 85       	ldd	r24, Z+14	; 0x0e
    3696:	ea 81       	ldd	r30, Y+2	; 0x02
    3698:	fb 81       	ldd	r31, Y+3	; 0x03
    369a:	97 85       	ldd	r25, Z+15	; 0x0f
    369c:	69 2f       	mov	r22, r25
    369e:	40 e0       	ldi	r20, 0x00	; 0
    36a0:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->A_Port,Copy_pAstrSSDinfo->A_Pin,((catSeg[Copy_u8Number])& ~(1<<DIO_Pin0)));
    36a4:	ea 81       	ldd	r30, Y+2	; 0x02
    36a6:	fb 81       	ldd	r31, Y+3	; 0x03
    36a8:	22 81       	ldd	r18, Z+2	; 0x02
    36aa:	ea 81       	ldd	r30, Y+2	; 0x02
    36ac:	fb 81       	ldd	r31, Y+3	; 0x03
    36ae:	33 81       	ldd	r19, Z+3	; 0x03
    36b0:	8c 81       	ldd	r24, Y+4	; 0x04
    36b2:	88 2f       	mov	r24, r24
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	fc 01       	movw	r30, r24
    36b8:	e9 53       	subi	r30, 0x39	; 57
    36ba:	fe 4f       	sbci	r31, 0xFE	; 254
    36bc:	80 81       	ld	r24, Z
    36be:	98 2f       	mov	r25, r24
    36c0:	9e 7f       	andi	r25, 0xFE	; 254
    36c2:	82 2f       	mov	r24, r18
    36c4:	63 2f       	mov	r22, r19
    36c6:	49 2f       	mov	r20, r25
    36c8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->B_Port,Copy_pAstrSSDinfo->B_Pin,((catSeg[Copy_u8Number])& ~(1<<DIO_Pin1)));
    36cc:	ea 81       	ldd	r30, Y+2	; 0x02
    36ce:	fb 81       	ldd	r31, Y+3	; 0x03
    36d0:	24 81       	ldd	r18, Z+4	; 0x04
    36d2:	ea 81       	ldd	r30, Y+2	; 0x02
    36d4:	fb 81       	ldd	r31, Y+3	; 0x03
    36d6:	35 81       	ldd	r19, Z+5	; 0x05
    36d8:	8c 81       	ldd	r24, Y+4	; 0x04
    36da:	88 2f       	mov	r24, r24
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	fc 01       	movw	r30, r24
    36e0:	e9 53       	subi	r30, 0x39	; 57
    36e2:	fe 4f       	sbci	r31, 0xFE	; 254
    36e4:	80 81       	ld	r24, Z
    36e6:	98 2f       	mov	r25, r24
    36e8:	9d 7f       	andi	r25, 0xFD	; 253
    36ea:	82 2f       	mov	r24, r18
    36ec:	63 2f       	mov	r22, r19
    36ee:	49 2f       	mov	r20, r25
    36f0:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->C_Port,Copy_pAstrSSDinfo->C_Pin,((catSeg[Copy_u8Number])& ~(1<<DIO_Pin2)));
    36f4:	ea 81       	ldd	r30, Y+2	; 0x02
    36f6:	fb 81       	ldd	r31, Y+3	; 0x03
    36f8:	26 81       	ldd	r18, Z+6	; 0x06
    36fa:	ea 81       	ldd	r30, Y+2	; 0x02
    36fc:	fb 81       	ldd	r31, Y+3	; 0x03
    36fe:	37 81       	ldd	r19, Z+7	; 0x07
    3700:	8c 81       	ldd	r24, Y+4	; 0x04
    3702:	88 2f       	mov	r24, r24
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	fc 01       	movw	r30, r24
    3708:	e9 53       	subi	r30, 0x39	; 57
    370a:	fe 4f       	sbci	r31, 0xFE	; 254
    370c:	80 81       	ld	r24, Z
    370e:	98 2f       	mov	r25, r24
    3710:	9b 7f       	andi	r25, 0xFB	; 251
    3712:	82 2f       	mov	r24, r18
    3714:	63 2f       	mov	r22, r19
    3716:	49 2f       	mov	r20, r25
    3718:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->D_Port,Copy_pAstrSSDinfo->D_Pin,((catSeg[Copy_u8Number])& ~(1<<DIO_Pin3)));
    371c:	ea 81       	ldd	r30, Y+2	; 0x02
    371e:	fb 81       	ldd	r31, Y+3	; 0x03
    3720:	20 85       	ldd	r18, Z+8	; 0x08
    3722:	ea 81       	ldd	r30, Y+2	; 0x02
    3724:	fb 81       	ldd	r31, Y+3	; 0x03
    3726:	31 85       	ldd	r19, Z+9	; 0x09
    3728:	8c 81       	ldd	r24, Y+4	; 0x04
    372a:	88 2f       	mov	r24, r24
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	fc 01       	movw	r30, r24
    3730:	e9 53       	subi	r30, 0x39	; 57
    3732:	fe 4f       	sbci	r31, 0xFE	; 254
    3734:	80 81       	ld	r24, Z
    3736:	98 2f       	mov	r25, r24
    3738:	97 7f       	andi	r25, 0xF7	; 247
    373a:	82 2f       	mov	r24, r18
    373c:	63 2f       	mov	r22, r19
    373e:	49 2f       	mov	r20, r25
    3740:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->E_Port,Copy_pAstrSSDinfo->E_Pin,((catSeg[Copy_u8Number])& ~(1<<DIO_Pin4)));
    3744:	ea 81       	ldd	r30, Y+2	; 0x02
    3746:	fb 81       	ldd	r31, Y+3	; 0x03
    3748:	22 85       	ldd	r18, Z+10	; 0x0a
    374a:	ea 81       	ldd	r30, Y+2	; 0x02
    374c:	fb 81       	ldd	r31, Y+3	; 0x03
    374e:	33 85       	ldd	r19, Z+11	; 0x0b
    3750:	8c 81       	ldd	r24, Y+4	; 0x04
    3752:	88 2f       	mov	r24, r24
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	fc 01       	movw	r30, r24
    3758:	e9 53       	subi	r30, 0x39	; 57
    375a:	fe 4f       	sbci	r31, 0xFE	; 254
    375c:	80 81       	ld	r24, Z
    375e:	98 2f       	mov	r25, r24
    3760:	9f 7e       	andi	r25, 0xEF	; 239
    3762:	82 2f       	mov	r24, r18
    3764:	63 2f       	mov	r22, r19
    3766:	49 2f       	mov	r20, r25
    3768:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->F_Port,Copy_pAstrSSDinfo->F_Pin,((catSeg[Copy_u8Number])& ~(1<<DIO_Pin5)));
    376c:	ea 81       	ldd	r30, Y+2	; 0x02
    376e:	fb 81       	ldd	r31, Y+3	; 0x03
    3770:	24 85       	ldd	r18, Z+12	; 0x0c
    3772:	ea 81       	ldd	r30, Y+2	; 0x02
    3774:	fb 81       	ldd	r31, Y+3	; 0x03
    3776:	35 85       	ldd	r19, Z+13	; 0x0d
    3778:	8c 81       	ldd	r24, Y+4	; 0x04
    377a:	88 2f       	mov	r24, r24
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	fc 01       	movw	r30, r24
    3780:	e9 53       	subi	r30, 0x39	; 57
    3782:	fe 4f       	sbci	r31, 0xFE	; 254
    3784:	80 81       	ld	r24, Z
    3786:	98 2f       	mov	r25, r24
    3788:	9f 7d       	andi	r25, 0xDF	; 223
    378a:	82 2f       	mov	r24, r18
    378c:	63 2f       	mov	r22, r19
    378e:	49 2f       	mov	r20, r25
    3790:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->G_Port,Copy_pAstrSSDinfo->G_Pin,((catSeg[Copy_u8Number])& ~(1<<DIO_Pin6)));
    3794:	ea 81       	ldd	r30, Y+2	; 0x02
    3796:	fb 81       	ldd	r31, Y+3	; 0x03
    3798:	26 85       	ldd	r18, Z+14	; 0x0e
    379a:	ea 81       	ldd	r30, Y+2	; 0x02
    379c:	fb 81       	ldd	r31, Y+3	; 0x03
    379e:	37 85       	ldd	r19, Z+15	; 0x0f
    37a0:	8c 81       	ldd	r24, Y+4	; 0x04
    37a2:	88 2f       	mov	r24, r24
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	fc 01       	movw	r30, r24
    37a8:	e9 53       	subi	r30, 0x39	; 57
    37aa:	fe 4f       	sbci	r31, 0xFE	; 254
    37ac:	80 81       	ld	r24, Z
    37ae:	98 2f       	mov	r25, r24
    37b0:	9f 7b       	andi	r25, 0xBF	; 191
    37b2:	82 2f       	mov	r24, r18
    37b4:	63 2f       	mov	r22, r19
    37b6:	49 2f       	mov	r20, r25
    37b8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			break;
		}
		Local_u8ErrorState  = ES_OK;
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	89 83       	std	Y+1, r24	; 0x01
    37c0:	02 c0       	rjmp	.+4      	; 0x37c6 <SSD_enuDisplaySingleNumber+0x398>
	}else
	{
		Local_u8ErrorState = ES_OUT_OF_RANGE;
    37c2:	82 e0       	ldi	r24, 0x02	; 2
    37c4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    37c8:	26 96       	adiw	r28, 0x06	; 6
    37ca:	0f b6       	in	r0, 0x3f	; 63
    37cc:	f8 94       	cli
    37ce:	de bf       	out	0x3e, r29	; 62
    37d0:	0f be       	out	0x3f, r0	; 63
    37d2:	cd bf       	out	0x3d, r28	; 61
    37d4:	cf 91       	pop	r28
    37d6:	df 91       	pop	r29
    37d8:	08 95       	ret

000037da <SSD_enuEnableDisplay>:

ES_t SSD_enuEnableDisplay(SSD_t *Copy_pAstrSSDinfo)
{
    37da:	df 93       	push	r29
    37dc:	cf 93       	push	r28
    37de:	00 d0       	rcall	.+0      	; 0x37e0 <SSD_enuEnableDisplay+0x6>
    37e0:	cd b7       	in	r28, 0x3d	; 61
    37e2:	de b7       	in	r29, 0x3e	; 62
    37e4:	9a 83       	std	Y+2, r25	; 0x02
    37e6:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->COM_Port,Copy_pAstrSSDinfo->COM_Pin,DIO_State_High);
    37e8:	e9 81       	ldd	r30, Y+1	; 0x01
    37ea:	fa 81       	ldd	r31, Y+2	; 0x02
    37ec:	80 81       	ld	r24, Z
    37ee:	e9 81       	ldd	r30, Y+1	; 0x01
    37f0:	fa 81       	ldd	r31, Y+2	; 0x02
    37f2:	91 81       	ldd	r25, Z+1	; 0x01
    37f4:	69 2f       	mov	r22, r25
    37f6:	41 e0       	ldi	r20, 0x01	; 1
    37f8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>

	return ES_OK;
    37fc:	81 e0       	ldi	r24, 0x01	; 1
}
    37fe:	0f 90       	pop	r0
    3800:	0f 90       	pop	r0
    3802:	cf 91       	pop	r28
    3804:	df 91       	pop	r29
    3806:	08 95       	ret

00003808 <SSD_enuDisableDisplay>:
ES_t SSD_enuDisableDisplay(SSD_t *Copy_pAstrSSDinfo)
{
    3808:	df 93       	push	r29
    380a:	cf 93       	push	r28
    380c:	00 d0       	rcall	.+0      	; 0x380e <SSD_enuDisableDisplay+0x6>
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
    3812:	9a 83       	std	Y+2, r25	; 0x02
    3814:	89 83       	std	Y+1, r24	; 0x01
	
	M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->COM_Port,Copy_pAstrSSDinfo->COM_Pin,DIO_State_Low);
    3816:	e9 81       	ldd	r30, Y+1	; 0x01
    3818:	fa 81       	ldd	r31, Y+2	; 0x02
    381a:	80 81       	ld	r24, Z
    381c:	e9 81       	ldd	r30, Y+1	; 0x01
    381e:	fa 81       	ldd	r31, Y+2	; 0x02
    3820:	91 81       	ldd	r25, Z+1	; 0x01
    3822:	69 2f       	mov	r22, r25
    3824:	40 e0       	ldi	r20, 0x00	; 0
    3826:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	return ES_OK;
    382a:	81 e0       	ldi	r24, 0x01	; 1
}
    382c:	0f 90       	pop	r0
    382e:	0f 90       	pop	r0
    3830:	cf 91       	pop	r28
    3832:	df 91       	pop	r29
    3834:	08 95       	ret

00003836 <SSD_enuEnableDot>:
ES_t SSD_enuEnableDot(SSD_t *Copy_pAstrSSDinfo)
{
    3836:	df 93       	push	r29
    3838:	cf 93       	push	r28
    383a:	00 d0       	rcall	.+0      	; 0x383c <SSD_enuEnableDot+0x6>
    383c:	cd b7       	in	r28, 0x3d	; 61
    383e:	de b7       	in	r29, 0x3e	; 62
    3840:	9a 83       	std	Y+2, r25	; 0x02
    3842:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->DP_Port,Copy_pAstrSSDinfo->DP_Pin,DIO_State_High);
    3844:	e9 81       	ldd	r30, Y+1	; 0x01
    3846:	fa 81       	ldd	r31, Y+2	; 0x02
    3848:	80 89       	ldd	r24, Z+16	; 0x10
    384a:	e9 81       	ldd	r30, Y+1	; 0x01
    384c:	fa 81       	ldd	r31, Y+2	; 0x02
    384e:	91 89       	ldd	r25, Z+17	; 0x11
    3850:	69 2f       	mov	r22, r25
    3852:	41 e0       	ldi	r20, 0x01	; 1
    3854:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	return ES_OK;
    3858:	81 e0       	ldi	r24, 0x01	; 1
}
    385a:	0f 90       	pop	r0
    385c:	0f 90       	pop	r0
    385e:	cf 91       	pop	r28
    3860:	df 91       	pop	r29
    3862:	08 95       	ret

00003864 <SSD_enuDisableDot>:
ES_t SSD_enuDisableDot(SSD_t *Copy_pAstrSSDinfo)
{
    3864:	df 93       	push	r29
    3866:	cf 93       	push	r28
    3868:	00 d0       	rcall	.+0      	; 0x386a <SSD_enuDisableDot+0x6>
    386a:	cd b7       	in	r28, 0x3d	; 61
    386c:	de b7       	in	r29, 0x3e	; 62
    386e:	9a 83       	std	Y+2, r25	; 0x02
    3870:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_enuSetPinValue(Copy_pAstrSSDinfo->DP_Port,Copy_pAstrSSDinfo->DP_Pin,DIO_State_Low);
    3872:	e9 81       	ldd	r30, Y+1	; 0x01
    3874:	fa 81       	ldd	r31, Y+2	; 0x02
    3876:	80 89       	ldd	r24, Z+16	; 0x10
    3878:	e9 81       	ldd	r30, Y+1	; 0x01
    387a:	fa 81       	ldd	r31, Y+2	; 0x02
    387c:	91 89       	ldd	r25, Z+17	; 0x11
    387e:	69 2f       	mov	r22, r25
    3880:	40 e0       	ldi	r20, 0x00	; 0
    3882:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	return ES_OK;
    3886:	81 e0       	ldi	r24, 0x01	; 1
}
    3888:	0f 90       	pop	r0
    388a:	0f 90       	pop	r0
    388c:	cf 91       	pop	r28
    388e:	df 91       	pop	r29
    3890:	08 95       	ret

00003892 <SSD_enuDisplayNumbers>:
ES_t SSD_enuDisplayNumbers(SSD_t *Copy_pAstrSSDinfo,u8 Copy_u8Number)
{
    3892:	df 93       	push	r29
    3894:	cf 93       	push	r28
    3896:	cd b7       	in	r28, 0x3d	; 61
    3898:	de b7       	in	r29, 0x3e	; 62
    389a:	a0 97       	sbiw	r28, 0x20	; 32
    389c:	0f b6       	in	r0, 0x3f	; 63
    389e:	f8 94       	cli
    38a0:	de bf       	out	0x3e, r29	; 62
    38a2:	0f be       	out	0x3f, r0	; 63
    38a4:	cd bf       	out	0x3d, r28	; 61
    38a6:	9f 8f       	std	Y+31, r25	; 0x1f
    38a8:	8e 8f       	std	Y+30, r24	; 0x1e
    38aa:	68 a3       	std	Y+32, r22	; 0x20
	u8 Local_u8ErrorState=ES_NOK;
    38ac:	1d 8e       	std	Y+29, r1	; 0x1d
	if(Copy_pAstrSSDinfo != NULL)
    38ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38b0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38b2:	00 97       	sbiw	r24, 0x00	; 0
    38b4:	09 f4       	brne	.+2      	; 0x38b8 <SSD_enuDisplayNumbers+0x26>
    38b6:	12 c1       	rjmp	.+548    	; 0x3adc <SSD_enuDisplayNumbers+0x24a>
	{
		if(Copy_u8Number>15)
    38b8:	88 a1       	ldd	r24, Y+32	; 0x20
    38ba:	80 31       	cpi	r24, 0x10	; 16
    38bc:	08 f4       	brcc	.+2      	; 0x38c0 <SSD_enuDisplayNumbers+0x2e>
    38be:	0b c1       	rjmp	.+534    	; 0x3ad6 <SSD_enuDisplayNumbers+0x244>
		{
			SSD_enuEnableDisplay(Copy_pAstrSSDinfo+0);
    38c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38c4:	0e 94 ed 1b 	call	0x37da	; 0x37da <SSD_enuEnableDisplay>
			SSD_enuDisableDisplay(Copy_pAstrSSDinfo+1);
    38c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38cc:	43 96       	adiw	r24, 0x13	; 19
    38ce:	0e 94 04 1c 	call	0x3808	; 0x3808 <SSD_enuDisableDisplay>
			SSD_enuDisplaySingleNumber(Copy_pAstrSSDinfo+0,(Copy_u8Number%16));
    38d2:	88 a1       	ldd	r24, Y+32	; 0x20
    38d4:	28 2f       	mov	r18, r24
    38d6:	2f 70       	andi	r18, 0x0F	; 15
    38d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38da:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38dc:	62 2f       	mov	r22, r18
    38de:	0e 94 17 1a 	call	0x342e	; 0x342e <SSD_enuDisplaySingleNumber>
    38e2:	80 e0       	ldi	r24, 0x00	; 0
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	a0 e2       	ldi	r26, 0x20	; 32
    38e8:	b1 e4       	ldi	r27, 0x41	; 65
    38ea:	89 8f       	std	Y+25, r24	; 0x19
    38ec:	9a 8f       	std	Y+26, r25	; 0x1a
    38ee:	ab 8f       	std	Y+27, r26	; 0x1b
    38f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38f2:	69 8d       	ldd	r22, Y+25	; 0x19
    38f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	4a e7       	ldi	r20, 0x7A	; 122
    3900:	55 e4       	ldi	r21, 0x45	; 69
    3902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3906:	dc 01       	movw	r26, r24
    3908:	cb 01       	movw	r24, r22
    390a:	8d 8b       	std	Y+21, r24	; 0x15
    390c:	9e 8b       	std	Y+22, r25	; 0x16
    390e:	af 8b       	std	Y+23, r26	; 0x17
    3910:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3912:	6d 89       	ldd	r22, Y+21	; 0x15
    3914:	7e 89       	ldd	r23, Y+22	; 0x16
    3916:	8f 89       	ldd	r24, Y+23	; 0x17
    3918:	98 8d       	ldd	r25, Y+24	; 0x18
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	40 e8       	ldi	r20, 0x80	; 128
    3920:	5f e3       	ldi	r21, 0x3F	; 63
    3922:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3926:	88 23       	and	r24, r24
    3928:	2c f4       	brge	.+10     	; 0x3934 <SSD_enuDisplayNumbers+0xa2>
		__ticks = 1;
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	9c 8b       	std	Y+20, r25	; 0x14
    3930:	8b 8b       	std	Y+19, r24	; 0x13
    3932:	3f c0       	rjmp	.+126    	; 0x39b2 <SSD_enuDisplayNumbers+0x120>
	else if (__tmp > 65535)
    3934:	6d 89       	ldd	r22, Y+21	; 0x15
    3936:	7e 89       	ldd	r23, Y+22	; 0x16
    3938:	8f 89       	ldd	r24, Y+23	; 0x17
    393a:	98 8d       	ldd	r25, Y+24	; 0x18
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	3f ef       	ldi	r19, 0xFF	; 255
    3940:	4f e7       	ldi	r20, 0x7F	; 127
    3942:	57 e4       	ldi	r21, 0x47	; 71
    3944:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3948:	18 16       	cp	r1, r24
    394a:	4c f5       	brge	.+82     	; 0x399e <SSD_enuDisplayNumbers+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    394c:	69 8d       	ldd	r22, Y+25	; 0x19
    394e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3950:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3952:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	30 e0       	ldi	r19, 0x00	; 0
    3958:	40 e2       	ldi	r20, 0x20	; 32
    395a:	51 e4       	ldi	r21, 0x41	; 65
    395c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	bc 01       	movw	r22, r24
    3966:	cd 01       	movw	r24, r26
    3968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	9c 8b       	std	Y+20, r25	; 0x14
    3972:	8b 8b       	std	Y+19, r24	; 0x13
    3974:	0f c0       	rjmp	.+30     	; 0x3994 <SSD_enuDisplayNumbers+0x102>
    3976:	80 e9       	ldi	r24, 0x90	; 144
    3978:	91 e0       	ldi	r25, 0x01	; 1
    397a:	9a 8b       	std	Y+18, r25	; 0x12
    397c:	89 8b       	std	Y+17, r24	; 0x11
    397e:	89 89       	ldd	r24, Y+17	; 0x11
    3980:	9a 89       	ldd	r25, Y+18	; 0x12
    3982:	01 97       	sbiw	r24, 0x01	; 1
    3984:	f1 f7       	brne	.-4      	; 0x3982 <SSD_enuDisplayNumbers+0xf0>
    3986:	9a 8b       	std	Y+18, r25	; 0x12
    3988:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    398a:	8b 89       	ldd	r24, Y+19	; 0x13
    398c:	9c 89       	ldd	r25, Y+20	; 0x14
    398e:	01 97       	sbiw	r24, 0x01	; 1
    3990:	9c 8b       	std	Y+20, r25	; 0x14
    3992:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3994:	8b 89       	ldd	r24, Y+19	; 0x13
    3996:	9c 89       	ldd	r25, Y+20	; 0x14
    3998:	00 97       	sbiw	r24, 0x00	; 0
    399a:	69 f7       	brne	.-38     	; 0x3976 <SSD_enuDisplayNumbers+0xe4>
    399c:	14 c0       	rjmp	.+40     	; 0x39c6 <SSD_enuDisplayNumbers+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    399e:	6d 89       	ldd	r22, Y+21	; 0x15
    39a0:	7e 89       	ldd	r23, Y+22	; 0x16
    39a2:	8f 89       	ldd	r24, Y+23	; 0x17
    39a4:	98 8d       	ldd	r25, Y+24	; 0x18
    39a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	9c 8b       	std	Y+20, r25	; 0x14
    39b0:	8b 8b       	std	Y+19, r24	; 0x13
    39b2:	8b 89       	ldd	r24, Y+19	; 0x13
    39b4:	9c 89       	ldd	r25, Y+20	; 0x14
    39b6:	98 8b       	std	Y+16, r25	; 0x10
    39b8:	8f 87       	std	Y+15, r24	; 0x0f
    39ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    39bc:	98 89       	ldd	r25, Y+16	; 0x10
    39be:	01 97       	sbiw	r24, 0x01	; 1
    39c0:	f1 f7       	brne	.-4      	; 0x39be <SSD_enuDisplayNumbers+0x12c>
    39c2:	98 8b       	std	Y+16, r25	; 0x10
    39c4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			SSD_enuEnableDisplay(Copy_pAstrSSDinfo+1);
    39c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    39c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    39ca:	43 96       	adiw	r24, 0x13	; 19
    39cc:	0e 94 ed 1b 	call	0x37da	; 0x37da <SSD_enuEnableDisplay>
			SSD_enuDisableDisplay(Copy_pAstrSSDinfo+0);
    39d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    39d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    39d4:	0e 94 04 1c 	call	0x3808	; 0x3808 <SSD_enuDisableDisplay>
			SSD_enuDisplaySingleNumber(Copy_pAstrSSDinfo+1,(Copy_u8Number/16));
    39d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    39da:	9f 8d       	ldd	r25, Y+31	; 0x1f
    39dc:	9c 01       	movw	r18, r24
    39de:	2d 5e       	subi	r18, 0xED	; 237
    39e0:	3f 4f       	sbci	r19, 0xFF	; 255
    39e2:	88 a1       	ldd	r24, Y+32	; 0x20
    39e4:	48 2f       	mov	r20, r24
    39e6:	42 95       	swap	r20
    39e8:	4f 70       	andi	r20, 0x0F	; 15
    39ea:	c9 01       	movw	r24, r18
    39ec:	64 2f       	mov	r22, r20
    39ee:	0e 94 17 1a 	call	0x342e	; 0x342e <SSD_enuDisplaySingleNumber>
    39f2:	80 e0       	ldi	r24, 0x00	; 0
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	a0 e2       	ldi	r26, 0x20	; 32
    39f8:	b1 e4       	ldi	r27, 0x41	; 65
    39fa:	8b 87       	std	Y+11, r24	; 0x0b
    39fc:	9c 87       	std	Y+12, r25	; 0x0c
    39fe:	ad 87       	std	Y+13, r26	; 0x0d
    3a00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a02:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a04:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a06:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a08:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a0a:	20 e0       	ldi	r18, 0x00	; 0
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	4a e7       	ldi	r20, 0x7A	; 122
    3a10:	55 e4       	ldi	r21, 0x45	; 69
    3a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a16:	dc 01       	movw	r26, r24
    3a18:	cb 01       	movw	r24, r22
    3a1a:	8f 83       	std	Y+7, r24	; 0x07
    3a1c:	98 87       	std	Y+8, r25	; 0x08
    3a1e:	a9 87       	std	Y+9, r26	; 0x09
    3a20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a22:	6f 81       	ldd	r22, Y+7	; 0x07
    3a24:	78 85       	ldd	r23, Y+8	; 0x08
    3a26:	89 85       	ldd	r24, Y+9	; 0x09
    3a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	40 e8       	ldi	r20, 0x80	; 128
    3a30:	5f e3       	ldi	r21, 0x3F	; 63
    3a32:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a36:	88 23       	and	r24, r24
    3a38:	2c f4       	brge	.+10     	; 0x3a44 <SSD_enuDisplayNumbers+0x1b2>
		__ticks = 1;
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	9e 83       	std	Y+6, r25	; 0x06
    3a40:	8d 83       	std	Y+5, r24	; 0x05
    3a42:	3f c0       	rjmp	.+126    	; 0x3ac2 <SSD_enuDisplayNumbers+0x230>
	else if (__tmp > 65535)
    3a44:	6f 81       	ldd	r22, Y+7	; 0x07
    3a46:	78 85       	ldd	r23, Y+8	; 0x08
    3a48:	89 85       	ldd	r24, Y+9	; 0x09
    3a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	3f ef       	ldi	r19, 0xFF	; 255
    3a50:	4f e7       	ldi	r20, 0x7F	; 127
    3a52:	57 e4       	ldi	r21, 0x47	; 71
    3a54:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a58:	18 16       	cp	r1, r24
    3a5a:	4c f5       	brge	.+82     	; 0x3aae <SSD_enuDisplayNumbers+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a60:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a62:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	40 e2       	ldi	r20, 0x20	; 32
    3a6a:	51 e4       	ldi	r21, 0x41	; 65
    3a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	bc 01       	movw	r22, r24
    3a76:	cd 01       	movw	r24, r26
    3a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	cb 01       	movw	r24, r22
    3a80:	9e 83       	std	Y+6, r25	; 0x06
    3a82:	8d 83       	std	Y+5, r24	; 0x05
    3a84:	0f c0       	rjmp	.+30     	; 0x3aa4 <SSD_enuDisplayNumbers+0x212>
    3a86:	80 e9       	ldi	r24, 0x90	; 144
    3a88:	91 e0       	ldi	r25, 0x01	; 1
    3a8a:	9c 83       	std	Y+4, r25	; 0x04
    3a8c:	8b 83       	std	Y+3, r24	; 0x03
    3a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a90:	9c 81       	ldd	r25, Y+4	; 0x04
    3a92:	01 97       	sbiw	r24, 0x01	; 1
    3a94:	f1 f7       	brne	.-4      	; 0x3a92 <SSD_enuDisplayNumbers+0x200>
    3a96:	9c 83       	std	Y+4, r25	; 0x04
    3a98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9e:	01 97       	sbiw	r24, 0x01	; 1
    3aa0:	9e 83       	std	Y+6, r25	; 0x06
    3aa2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa8:	00 97       	sbiw	r24, 0x00	; 0
    3aaa:	69 f7       	brne	.-38     	; 0x3a86 <SSD_enuDisplayNumbers+0x1f4>
    3aac:	14 c0       	rjmp	.+40     	; 0x3ad6 <SSD_enuDisplayNumbers+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aae:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab0:	78 85       	ldd	r23, Y+8	; 0x08
    3ab2:	89 85       	ldd	r24, Y+9	; 0x09
    3ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aba:	dc 01       	movw	r26, r24
    3abc:	cb 01       	movw	r24, r22
    3abe:	9e 83       	std	Y+6, r25	; 0x06
    3ac0:	8d 83       	std	Y+5, r24	; 0x05
    3ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac6:	9a 83       	std	Y+2, r25	; 0x02
    3ac8:	89 83       	std	Y+1, r24	; 0x01
    3aca:	89 81       	ldd	r24, Y+1	; 0x01
    3acc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ace:	01 97       	sbiw	r24, 0x01	; 1
    3ad0:	f1 f7       	brne	.-4      	; 0x3ace <SSD_enuDisplayNumbers+0x23c>
    3ad2:	9a 83       	std	Y+2, r25	; 0x02
    3ad4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
		}
		
		Local_u8ErrorState  = ES_OK;
    3ad6:	81 e0       	ldi	r24, 0x01	; 1
    3ad8:	8d 8f       	std	Y+29, r24	; 0x1d
    3ada:	02 c0       	rjmp	.+4      	; 0x3ae0 <SSD_enuDisplayNumbers+0x24e>
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
    3adc:	83 e0       	ldi	r24, 0x03	; 3
    3ade:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	return Local_u8ErrorState;
    3ae0:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    3ae2:	a0 96       	adiw	r28, 0x20	; 32
    3ae4:	0f b6       	in	r0, 0x3f	; 63
    3ae6:	f8 94       	cli
    3ae8:	de bf       	out	0x3e, r29	; 62
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	cd bf       	out	0x3d, r28	; 61
    3aee:	cf 91       	pop	r28
    3af0:	df 91       	pop	r29
    3af2:	08 95       	ret

00003af4 <Relay_enuInit>:
#include "Relay_Config.h"
#include "Relay_Interface.h"

extern u8 Relay_u8RelayNum;
ES_t Relay_enuInit(Relay_t *Copy_pAstrConfig)
{
    3af4:	df 93       	push	r29
    3af6:	cf 93       	push	r28
    3af8:	00 d0       	rcall	.+0      	; 0x3afa <Relay_enuInit+0x6>
    3afa:	00 d0       	rcall	.+0      	; 0x3afc <Relay_enuInit+0x8>
    3afc:	cd b7       	in	r28, 0x3d	; 61
    3afe:	de b7       	in	r29, 0x3e	; 62
    3b00:	9c 83       	std	Y+4, r25	; 0x04
    3b02:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = ES_NOK;
    3b04:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pAstrConfig !=NULL)
    3b06:	8b 81       	ldd	r24, Y+3	; 0x03
    3b08:	9c 81       	ldd	r25, Y+4	; 0x04
    3b0a:	00 97       	sbiw	r24, 0x00	; 0
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <Relay_enuInit+0x1c>
    3b0e:	46 c0       	rjmp	.+140    	; 0x3b9c <Relay_enuInit+0xa8>
	{
		u8 Local_u8Iter;
		for(Local_u8Iter=0; Local_u8Iter<Relay_u8RelayNum; Local_u8Iter++)
    3b10:	19 82       	std	Y+1, r1	; 0x01
    3b12:	3d c0       	rjmp	.+122    	; 0x3b8e <Relay_enuInit+0x9a>
		{
			M_DIO_enuSetPinDirection(Copy_pAstrConfig[Local_u8Iter].Relay_Port,Copy_pAstrConfig[Local_u8Iter].Relay_Pin,DIO_Direction_Output);
    3b14:	89 81       	ldd	r24, Y+1	; 0x01
    3b16:	88 2f       	mov	r24, r24
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	9c 01       	movw	r18, r24
    3b1c:	22 0f       	add	r18, r18
    3b1e:	33 1f       	adc	r19, r19
    3b20:	8b 81       	ldd	r24, Y+3	; 0x03
    3b22:	9c 81       	ldd	r25, Y+4	; 0x04
    3b24:	fc 01       	movw	r30, r24
    3b26:	e2 0f       	add	r30, r18
    3b28:	f3 1f       	adc	r31, r19
    3b2a:	40 81       	ld	r20, Z
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	88 2f       	mov	r24, r24
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	9c 01       	movw	r18, r24
    3b34:	22 0f       	add	r18, r18
    3b36:	33 1f       	adc	r19, r19
    3b38:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b3c:	fc 01       	movw	r30, r24
    3b3e:	e2 0f       	add	r30, r18
    3b40:	f3 1f       	adc	r31, r19
    3b42:	91 81       	ldd	r25, Z+1	; 0x01
    3b44:	84 2f       	mov	r24, r20
    3b46:	69 2f       	mov	r22, r25
    3b48:	41 e0       	ldi	r20, 0x01	; 1
    3b4a:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
			M_DIO_enuSetPinValue(Copy_pAstrConfig[Local_u8Iter].Relay_Port,Copy_pAstrConfig[Local_u8Iter].Relay_Pin,DIO_State_Low);
    3b4e:	89 81       	ldd	r24, Y+1	; 0x01
    3b50:	88 2f       	mov	r24, r24
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	9c 01       	movw	r18, r24
    3b56:	22 0f       	add	r18, r18
    3b58:	33 1f       	adc	r19, r19
    3b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b5e:	fc 01       	movw	r30, r24
    3b60:	e2 0f       	add	r30, r18
    3b62:	f3 1f       	adc	r31, r19
    3b64:	40 81       	ld	r20, Z
    3b66:	89 81       	ldd	r24, Y+1	; 0x01
    3b68:	88 2f       	mov	r24, r24
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	9c 01       	movw	r18, r24
    3b6e:	22 0f       	add	r18, r18
    3b70:	33 1f       	adc	r19, r19
    3b72:	8b 81       	ldd	r24, Y+3	; 0x03
    3b74:	9c 81       	ldd	r25, Y+4	; 0x04
    3b76:	fc 01       	movw	r30, r24
    3b78:	e2 0f       	add	r30, r18
    3b7a:	f3 1f       	adc	r31, r19
    3b7c:	91 81       	ldd	r25, Z+1	; 0x01
    3b7e:	84 2f       	mov	r24, r20
    3b80:	69 2f       	mov	r22, r25
    3b82:	40 e0       	ldi	r20, 0x00	; 0
    3b84:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
{
	u8 Local_u8ErrorState = ES_NOK;
	if(Copy_pAstrConfig !=NULL)
	{
		u8 Local_u8Iter;
		for(Local_u8Iter=0; Local_u8Iter<Relay_u8RelayNum; Local_u8Iter++)
    3b88:	89 81       	ldd	r24, Y+1	; 0x01
    3b8a:	8f 5f       	subi	r24, 0xFF	; 255
    3b8c:	89 83       	std	Y+1, r24	; 0x01
    3b8e:	90 91 d7 01 	lds	r25, 0x01D7
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
    3b94:	89 17       	cp	r24, r25
    3b96:	08 f4       	brcc	.+2      	; 0x3b9a <Relay_enuInit+0xa6>
    3b98:	bd cf       	rjmp	.-134    	; 0x3b14 <Relay_enuInit+0x20>
    3b9a:	02 c0       	rjmp	.+4      	; 0x3ba0 <Relay_enuInit+0xac>
			M_DIO_enuSetPinDirection(Copy_pAstrConfig[Local_u8Iter].Relay_Port,Copy_pAstrConfig[Local_u8Iter].Relay_Pin,DIO_Direction_Output);
			M_DIO_enuSetPinValue(Copy_pAstrConfig[Local_u8Iter].Relay_Port,Copy_pAstrConfig[Local_u8Iter].Relay_Pin,DIO_State_Low);
		}
	}else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
    3b9c:	83 e0       	ldi	r24, 0x03	; 3
    3b9e:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    3ba0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3ba2:	0f 90       	pop	r0
    3ba4:	0f 90       	pop	r0
    3ba6:	0f 90       	pop	r0
    3ba8:	0f 90       	pop	r0
    3baa:	cf 91       	pop	r28
    3bac:	df 91       	pop	r29
    3bae:	08 95       	ret

00003bb0 <Relay_enuTrip>:
ES_t Relay_enuTrip(Relay_t *Copy_pstrRelayInfo)
{
    3bb0:	df 93       	push	r29
    3bb2:	cf 93       	push	r28
    3bb4:	00 d0       	rcall	.+0      	; 0x3bb6 <Relay_enuTrip+0x6>
    3bb6:	cd b7       	in	r28, 0x3d	; 61
    3bb8:	de b7       	in	r29, 0x3e	; 62
    3bba:	9a 83       	std	Y+2, r25	; 0x02
    3bbc:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_enuSetPinValue(Copy_pstrRelayInfo->Relay_Port,Copy_pstrRelayInfo->Relay_Pin,DIO_State_High);
    3bbe:	e9 81       	ldd	r30, Y+1	; 0x01
    3bc0:	fa 81       	ldd	r31, Y+2	; 0x02
    3bc2:	80 81       	ld	r24, Z
    3bc4:	e9 81       	ldd	r30, Y+1	; 0x01
    3bc6:	fa 81       	ldd	r31, Y+2	; 0x02
    3bc8:	91 81       	ldd	r25, Z+1	; 0x01
    3bca:	69 2f       	mov	r22, r25
    3bcc:	41 e0       	ldi	r20, 0x01	; 1
    3bce:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	return ES_OK;
    3bd2:	81 e0       	ldi	r24, 0x01	; 1
}
    3bd4:	0f 90       	pop	r0
    3bd6:	0f 90       	pop	r0
    3bd8:	cf 91       	pop	r28
    3bda:	df 91       	pop	r29
    3bdc:	08 95       	ret

00003bde <Relay_enuSwitch>:
ES_t Relay_enuSwitch(Relay_t *Copy_pstrRelayInfo)
{
    3bde:	df 93       	push	r29
    3be0:	cf 93       	push	r28
    3be2:	00 d0       	rcall	.+0      	; 0x3be4 <Relay_enuSwitch+0x6>
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
    3be8:	9a 83       	std	Y+2, r25	; 0x02
    3bea:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_enuSetPinValue(Copy_pstrRelayInfo->Relay_Port,Copy_pstrRelayInfo->Relay_Pin,DIO_State_Low);
    3bec:	e9 81       	ldd	r30, Y+1	; 0x01
    3bee:	fa 81       	ldd	r31, Y+2	; 0x02
    3bf0:	80 81       	ld	r24, Z
    3bf2:	e9 81       	ldd	r30, Y+1	; 0x01
    3bf4:	fa 81       	ldd	r31, Y+2	; 0x02
    3bf6:	91 81       	ldd	r25, Z+1	; 0x01
    3bf8:	69 2f       	mov	r22, r25
    3bfa:	40 e0       	ldi	r20, 0x00	; 0
    3bfc:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	return ES_OK;
    3c00:	81 e0       	ldi	r24, 0x01	; 1
}
    3c02:	0f 90       	pop	r0
    3c04:	0f 90       	pop	r0
    3c06:	cf 91       	pop	r28
    3c08:	df 91       	pop	r29
    3c0a:	08 95       	ret

00003c0c <LED_enuInit>:
#include "LED_Interface.h"

extern u8 LED_u8LEDNum;

ES_t LED_enuInit(LED_t *Copy_pAstrLEDConfig)
{
    3c0c:	df 93       	push	r29
    3c0e:	cf 93       	push	r28
    3c10:	00 d0       	rcall	.+0      	; 0x3c12 <LED_enuInit+0x6>
    3c12:	00 d0       	rcall	.+0      	; 0x3c14 <LED_enuInit+0x8>
    3c14:	cd b7       	in	r28, 0x3d	; 61
    3c16:	de b7       	in	r29, 0x3e	; 62
    3c18:	9c 83       	std	Y+4, r25	; 0x04
    3c1a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = ES_NOK;
    3c1c:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pAstrLEDConfig != NULL)
    3c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c20:	9c 81       	ldd	r25, Y+4	; 0x04
    3c22:	00 97       	sbiw	r24, 0x00	; 0
    3c24:	09 f4       	brne	.+2      	; 0x3c28 <LED_enuInit+0x1c>
    3c26:	48 c0       	rjmp	.+144    	; 0x3cb8 <LED_enuInit+0xac>
	{
		u8 Local_u8Iter = 0;
    3c28:	19 82       	std	Y+1, r1	; 0x01
    3c2a:	3d c0       	rjmp	.+122    	; 0x3ca6 <LED_enuInit+0x9a>
		for(;Local_u8Iter < LED_u8LEDNum ; Local_u8Iter++)
		{
			M_DIO_enuSetPinDirection(Copy_pAstrLEDConfig[Local_u8Iter].LED_Port , Copy_pAstrLEDConfig[Local_u8Iter].LED_Pin, DIO_Direction_Output);
    3c2c:	89 81       	ldd	r24, Y+1	; 0x01
    3c2e:	88 2f       	mov	r24, r24
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	9c 01       	movw	r18, r24
    3c34:	22 0f       	add	r18, r18
    3c36:	33 1f       	adc	r19, r19
    3c38:	8b 81       	ldd	r24, Y+3	; 0x03
    3c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c3c:	fc 01       	movw	r30, r24
    3c3e:	e2 0f       	add	r30, r18
    3c40:	f3 1f       	adc	r31, r19
    3c42:	40 81       	ld	r20, Z
    3c44:	89 81       	ldd	r24, Y+1	; 0x01
    3c46:	88 2f       	mov	r24, r24
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	9c 01       	movw	r18, r24
    3c4c:	22 0f       	add	r18, r18
    3c4e:	33 1f       	adc	r19, r19
    3c50:	8b 81       	ldd	r24, Y+3	; 0x03
    3c52:	9c 81       	ldd	r25, Y+4	; 0x04
    3c54:	fc 01       	movw	r30, r24
    3c56:	e2 0f       	add	r30, r18
    3c58:	f3 1f       	adc	r31, r19
    3c5a:	91 81       	ldd	r25, Z+1	; 0x01
    3c5c:	84 2f       	mov	r24, r20
    3c5e:	69 2f       	mov	r22, r25
    3c60:	41 e0       	ldi	r20, 0x01	; 1
    3c62:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
			M_DIO_enuSetPinValue(Copy_pAstrLEDConfig[Local_u8Iter].LED_Port , Copy_pAstrLEDConfig[Local_u8Iter].LED_Pin, DIO_State_Low);
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
    3c68:	88 2f       	mov	r24, r24
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	9c 01       	movw	r18, r24
    3c6e:	22 0f       	add	r18, r18
    3c70:	33 1f       	adc	r19, r19
    3c72:	8b 81       	ldd	r24, Y+3	; 0x03
    3c74:	9c 81       	ldd	r25, Y+4	; 0x04
    3c76:	fc 01       	movw	r30, r24
    3c78:	e2 0f       	add	r30, r18
    3c7a:	f3 1f       	adc	r31, r19
    3c7c:	40 81       	ld	r20, Z
    3c7e:	89 81       	ldd	r24, Y+1	; 0x01
    3c80:	88 2f       	mov	r24, r24
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	9c 01       	movw	r18, r24
    3c86:	22 0f       	add	r18, r18
    3c88:	33 1f       	adc	r19, r19
    3c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c8e:	fc 01       	movw	r30, r24
    3c90:	e2 0f       	add	r30, r18
    3c92:	f3 1f       	adc	r31, r19
    3c94:	91 81       	ldd	r25, Z+1	; 0x01
    3c96:	84 2f       	mov	r24, r20
    3c98:	69 2f       	mov	r22, r25
    3c9a:	40 e0       	ldi	r20, 0x00	; 0
    3c9c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
{
	u8 Local_u8ErrorState = ES_NOK;
	if(Copy_pAstrLEDConfig != NULL)
	{
		u8 Local_u8Iter = 0;
		for(;Local_u8Iter < LED_u8LEDNum ; Local_u8Iter++)
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	8f 5f       	subi	r24, 0xFF	; 255
    3ca4:	89 83       	std	Y+1, r24	; 0x01
    3ca6:	90 91 dc 01 	lds	r25, 0x01DC
    3caa:	89 81       	ldd	r24, Y+1	; 0x01
    3cac:	89 17       	cp	r24, r25
    3cae:	08 f4       	brcc	.+2      	; 0x3cb2 <LED_enuInit+0xa6>
    3cb0:	bd cf       	rjmp	.-134    	; 0x3c2c <LED_enuInit+0x20>
		{
			M_DIO_enuSetPinDirection(Copy_pAstrLEDConfig[Local_u8Iter].LED_Port , Copy_pAstrLEDConfig[Local_u8Iter].LED_Pin, DIO_Direction_Output);
			M_DIO_enuSetPinValue(Copy_pAstrLEDConfig[Local_u8Iter].LED_Port , Copy_pAstrLEDConfig[Local_u8Iter].LED_Pin, DIO_State_Low);
		}
		Local_u8ErrorState = ES_OK;
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
    3cb4:	8a 83       	std	Y+2, r24	; 0x02
    3cb6:	02 c0       	rjmp	.+4      	; 0x3cbc <LED_enuInit+0xb0>
	}else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
    3cb8:	83 e0       	ldi	r24, 0x03	; 3
    3cba:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    3cbc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	0f 90       	pop	r0
    3cc4:	0f 90       	pop	r0
    3cc6:	cf 91       	pop	r28
    3cc8:	df 91       	pop	r29
    3cca:	08 95       	ret

00003ccc <LED_enuOffAll>:
ES_t LED_enuOffAll(LED_t *Copy_pAstrLEDConfig)
{
    3ccc:	df 93       	push	r29
    3cce:	cf 93       	push	r28
    3cd0:	00 d0       	rcall	.+0      	; 0x3cd2 <LED_enuOffAll+0x6>
    3cd2:	00 d0       	rcall	.+0      	; 0x3cd4 <LED_enuOffAll+0x8>
    3cd4:	cd b7       	in	r28, 0x3d	; 61
    3cd6:	de b7       	in	r29, 0x3e	; 62
    3cd8:	9c 83       	std	Y+4, r25	; 0x04
    3cda:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = ES_NOK;
    3cdc:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pAstrLEDConfig != NULL)
    3cde:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce2:	00 97       	sbiw	r24, 0x00	; 0
    3ce4:	51 f1       	breq	.+84     	; 0x3d3a <LED_enuOffAll+0x6e>
	{
		u8 Local_u8Iter = 0;
    3ce6:	19 82       	std	Y+1, r1	; 0x01
    3ce8:	20 c0       	rjmp	.+64     	; 0x3d2a <LED_enuOffAll+0x5e>
		for(;Local_u8Iter < LED_u8LEDNum ; Local_u8Iter++)
		{
			M_DIO_enuSetPinValue(Copy_pAstrLEDConfig[Local_u8Iter].LED_Port , Copy_pAstrLEDConfig[Local_u8Iter].LED_Pin, DIO_State_Low);
    3cea:	89 81       	ldd	r24, Y+1	; 0x01
    3cec:	88 2f       	mov	r24, r24
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	9c 01       	movw	r18, r24
    3cf2:	22 0f       	add	r18, r18
    3cf4:	33 1f       	adc	r19, r19
    3cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cfa:	fc 01       	movw	r30, r24
    3cfc:	e2 0f       	add	r30, r18
    3cfe:	f3 1f       	adc	r31, r19
    3d00:	40 81       	ld	r20, Z
    3d02:	89 81       	ldd	r24, Y+1	; 0x01
    3d04:	88 2f       	mov	r24, r24
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	9c 01       	movw	r18, r24
    3d0a:	22 0f       	add	r18, r18
    3d0c:	33 1f       	adc	r19, r19
    3d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d10:	9c 81       	ldd	r25, Y+4	; 0x04
    3d12:	fc 01       	movw	r30, r24
    3d14:	e2 0f       	add	r30, r18
    3d16:	f3 1f       	adc	r31, r19
    3d18:	91 81       	ldd	r25, Z+1	; 0x01
    3d1a:	84 2f       	mov	r24, r20
    3d1c:	69 2f       	mov	r22, r25
    3d1e:	40 e0       	ldi	r20, 0x00	; 0
    3d20:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
{
	u8 Local_u8ErrorState = ES_NOK;
	if(Copy_pAstrLEDConfig != NULL)
	{
		u8 Local_u8Iter = 0;
		for(;Local_u8Iter < LED_u8LEDNum ; Local_u8Iter++)
    3d24:	89 81       	ldd	r24, Y+1	; 0x01
    3d26:	8f 5f       	subi	r24, 0xFF	; 255
    3d28:	89 83       	std	Y+1, r24	; 0x01
    3d2a:	90 91 dc 01 	lds	r25, 0x01DC
    3d2e:	89 81       	ldd	r24, Y+1	; 0x01
    3d30:	89 17       	cp	r24, r25
    3d32:	d8 f2       	brcs	.-74     	; 0x3cea <LED_enuOffAll+0x1e>
		{
			M_DIO_enuSetPinValue(Copy_pAstrLEDConfig[Local_u8Iter].LED_Port , Copy_pAstrLEDConfig[Local_u8Iter].LED_Pin, DIO_State_Low);
		}
		Local_u8ErrorState = ES_OK;
    3d34:	81 e0       	ldi	r24, 0x01	; 1
    3d36:	8a 83       	std	Y+2, r24	; 0x02
    3d38:	02 c0       	rjmp	.+4      	; 0x3d3e <LED_enuOffAll+0x72>
	}else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
    3d3a:	83 e0       	ldi	r24, 0x03	; 3
    3d3c:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    3d3e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3d40:	0f 90       	pop	r0
    3d42:	0f 90       	pop	r0
    3d44:	0f 90       	pop	r0
    3d46:	0f 90       	pop	r0
    3d48:	cf 91       	pop	r28
    3d4a:	df 91       	pop	r29
    3d4c:	08 95       	ret

00003d4e <LED_enuOnAll>:
ES_t LED_enuOnAll(LED_t *Copy_pAstrLEDConfig)
{
    3d4e:	df 93       	push	r29
    3d50:	cf 93       	push	r28
    3d52:	00 d0       	rcall	.+0      	; 0x3d54 <LED_enuOnAll+0x6>
    3d54:	00 d0       	rcall	.+0      	; 0x3d56 <LED_enuOnAll+0x8>
    3d56:	cd b7       	in	r28, 0x3d	; 61
    3d58:	de b7       	in	r29, 0x3e	; 62
    3d5a:	9c 83       	std	Y+4, r25	; 0x04
    3d5c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = ES_NOK;
    3d5e:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pAstrLEDConfig != NULL)
    3d60:	8b 81       	ldd	r24, Y+3	; 0x03
    3d62:	9c 81       	ldd	r25, Y+4	; 0x04
    3d64:	00 97       	sbiw	r24, 0x00	; 0
    3d66:	51 f1       	breq	.+84     	; 0x3dbc <LED_enuOnAll+0x6e>
	{
		u8 Local_u8Iter = 0;
    3d68:	19 82       	std	Y+1, r1	; 0x01
    3d6a:	20 c0       	rjmp	.+64     	; 0x3dac <LED_enuOnAll+0x5e>
		for(;Local_u8Iter < LED_u8LEDNum ; Local_u8Iter++)
		{
			M_DIO_enuSetPinValue(Copy_pAstrLEDConfig[Local_u8Iter].LED_Port , Copy_pAstrLEDConfig[Local_u8Iter].LED_Pin, DIO_State_High);
    3d6c:	89 81       	ldd	r24, Y+1	; 0x01
    3d6e:	88 2f       	mov	r24, r24
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	9c 01       	movw	r18, r24
    3d74:	22 0f       	add	r18, r18
    3d76:	33 1f       	adc	r19, r19
    3d78:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d7c:	fc 01       	movw	r30, r24
    3d7e:	e2 0f       	add	r30, r18
    3d80:	f3 1f       	adc	r31, r19
    3d82:	40 81       	ld	r20, Z
    3d84:	89 81       	ldd	r24, Y+1	; 0x01
    3d86:	88 2f       	mov	r24, r24
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	9c 01       	movw	r18, r24
    3d8c:	22 0f       	add	r18, r18
    3d8e:	33 1f       	adc	r19, r19
    3d90:	8b 81       	ldd	r24, Y+3	; 0x03
    3d92:	9c 81       	ldd	r25, Y+4	; 0x04
    3d94:	fc 01       	movw	r30, r24
    3d96:	e2 0f       	add	r30, r18
    3d98:	f3 1f       	adc	r31, r19
    3d9a:	91 81       	ldd	r25, Z+1	; 0x01
    3d9c:	84 2f       	mov	r24, r20
    3d9e:	69 2f       	mov	r22, r25
    3da0:	41 e0       	ldi	r20, 0x01	; 1
    3da2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
{
	u8 Local_u8ErrorState = ES_NOK;
	if(Copy_pAstrLEDConfig != NULL)
	{
		u8 Local_u8Iter = 0;
		for(;Local_u8Iter < LED_u8LEDNum ; Local_u8Iter++)
    3da6:	89 81       	ldd	r24, Y+1	; 0x01
    3da8:	8f 5f       	subi	r24, 0xFF	; 255
    3daa:	89 83       	std	Y+1, r24	; 0x01
    3dac:	90 91 dc 01 	lds	r25, 0x01DC
    3db0:	89 81       	ldd	r24, Y+1	; 0x01
    3db2:	89 17       	cp	r24, r25
    3db4:	d8 f2       	brcs	.-74     	; 0x3d6c <LED_enuOnAll+0x1e>
		{
			M_DIO_enuSetPinValue(Copy_pAstrLEDConfig[Local_u8Iter].LED_Port , Copy_pAstrLEDConfig[Local_u8Iter].LED_Pin, DIO_State_High);
		}
		Local_u8ErrorState = ES_OK;
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	8a 83       	std	Y+2, r24	; 0x02
    3dba:	02 c0       	rjmp	.+4      	; 0x3dc0 <LED_enuOnAll+0x72>
	}else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
    3dbc:	83 e0       	ldi	r24, 0x03	; 3
    3dbe:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    3dc0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3dc2:	0f 90       	pop	r0
    3dc4:	0f 90       	pop	r0
    3dc6:	0f 90       	pop	r0
    3dc8:	0f 90       	pop	r0
    3dca:	cf 91       	pop	r28
    3dcc:	df 91       	pop	r29
    3dce:	08 95       	ret

00003dd0 <LED_enuOn>:
ES_t LED_enuOn(LED_t *Copy_pstrLEDInfo)
{
    3dd0:	df 93       	push	r29
    3dd2:	cf 93       	push	r28
    3dd4:	00 d0       	rcall	.+0      	; 0x3dd6 <LED_enuOn+0x6>
    3dd6:	cd b7       	in	r28, 0x3d	; 61
    3dd8:	de b7       	in	r29, 0x3e	; 62
    3dda:	9a 83       	std	Y+2, r25	; 0x02
    3ddc:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_enuSetPinValue(Copy_pstrLEDInfo->LED_Port , Copy_pstrLEDInfo->LED_Pin, DIO_State_High);
    3dde:	e9 81       	ldd	r30, Y+1	; 0x01
    3de0:	fa 81       	ldd	r31, Y+2	; 0x02
    3de2:	80 81       	ld	r24, Z
    3de4:	e9 81       	ldd	r30, Y+1	; 0x01
    3de6:	fa 81       	ldd	r31, Y+2	; 0x02
    3de8:	91 81       	ldd	r25, Z+1	; 0x01
    3dea:	69 2f       	mov	r22, r25
    3dec:	41 e0       	ldi	r20, 0x01	; 1
    3dee:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	return ES_OK;
    3df2:	81 e0       	ldi	r24, 0x01	; 1
}
    3df4:	0f 90       	pop	r0
    3df6:	0f 90       	pop	r0
    3df8:	cf 91       	pop	r28
    3dfa:	df 91       	pop	r29
    3dfc:	08 95       	ret

00003dfe <LED_enuOff>:
ES_t LED_enuOff(LED_t *Copy_pstrLEDInfo)
{
    3dfe:	df 93       	push	r29
    3e00:	cf 93       	push	r28
    3e02:	00 d0       	rcall	.+0      	; 0x3e04 <LED_enuOff+0x6>
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	9a 83       	std	Y+2, r25	; 0x02
    3e0a:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_enuSetPinValue(Copy_pstrLEDInfo->LED_Port , Copy_pstrLEDInfo->LED_Pin, DIO_State_Low);
    3e0c:	e9 81       	ldd	r30, Y+1	; 0x01
    3e0e:	fa 81       	ldd	r31, Y+2	; 0x02
    3e10:	80 81       	ld	r24, Z
    3e12:	e9 81       	ldd	r30, Y+1	; 0x01
    3e14:	fa 81       	ldd	r31, Y+2	; 0x02
    3e16:	91 81       	ldd	r25, Z+1	; 0x01
    3e18:	69 2f       	mov	r22, r25
    3e1a:	40 e0       	ldi	r20, 0x00	; 0
    3e1c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	return ES_OK;
    3e20:	81 e0       	ldi	r24, 0x01	; 1
}
    3e22:	0f 90       	pop	r0
    3e24:	0f 90       	pop	r0
    3e26:	cf 91       	pop	r28
    3e28:	df 91       	pop	r29
    3e2a:	08 95       	ret

00003e2c <LED_enuToggle>:
ES_t LED_enuToggle(LED_t *Copy_pstrLEDInfo)
{
    3e2c:	df 93       	push	r29
    3e2e:	cf 93       	push	r28
    3e30:	00 d0       	rcall	.+0      	; 0x3e32 <LED_enuToggle+0x6>
    3e32:	cd b7       	in	r28, 0x3d	; 61
    3e34:	de b7       	in	r29, 0x3e	; 62
    3e36:	9a 83       	std	Y+2, r25	; 0x02
    3e38:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_enuTogglePinValue(Copy_pstrLEDInfo->LED_Port , Copy_pstrLEDInfo->LED_Pin);
    3e3a:	e9 81       	ldd	r30, Y+1	; 0x01
    3e3c:	fa 81       	ldd	r31, Y+2	; 0x02
    3e3e:	80 81       	ld	r24, Z
    3e40:	e9 81       	ldd	r30, Y+1	; 0x01
    3e42:	fa 81       	ldd	r31, Y+2	; 0x02
    3e44:	91 81       	ldd	r25, Z+1	; 0x01
    3e46:	69 2f       	mov	r22, r25
    3e48:	0e 94 92 10 	call	0x2124	; 0x2124 <M_DIO_enuTogglePinValue>
	return ES_OK;
    3e4c:	81 e0       	ldi	r24, 0x01	; 1
}
    3e4e:	0f 90       	pop	r0
    3e50:	0f 90       	pop	r0
    3e52:	cf 91       	pop	r28
    3e54:	df 91       	pop	r29
    3e56:	08 95       	ret

00003e58 <LED_enuState>:

ES_t LED_enuState(LED_t *Copy_pstrLEDInfo , u8 *Copy_StateGetStateValue)
{
    3e58:	df 93       	push	r29
    3e5a:	cf 93       	push	r28
    3e5c:	00 d0       	rcall	.+0      	; 0x3e5e <LED_enuState+0x6>
    3e5e:	00 d0       	rcall	.+0      	; 0x3e60 <LED_enuState+0x8>
    3e60:	0f 92       	push	r0
    3e62:	cd b7       	in	r28, 0x3d	; 61
    3e64:	de b7       	in	r29, 0x3e	; 62
    3e66:	9b 83       	std	Y+3, r25	; 0x03
    3e68:	8a 83       	std	Y+2, r24	; 0x02
    3e6a:	7d 83       	std	Y+5, r23	; 0x05
    3e6c:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = ES_NOK;
    3e6e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_StateGetStateValue!=NULL)
    3e70:	8c 81       	ldd	r24, Y+4	; 0x04
    3e72:	9d 81       	ldd	r25, Y+5	; 0x05
    3e74:	00 97       	sbiw	r24, 0x00	; 0
    3e76:	79 f0       	breq	.+30     	; 0x3e96 <LED_enuState+0x3e>
	{
		M_DIO_enuGetPinValue(Copy_pstrLEDInfo->LED_Port , Copy_pstrLEDInfo->LED_Pin, Copy_StateGetStateValue);
    3e78:	ea 81       	ldd	r30, Y+2	; 0x02
    3e7a:	fb 81       	ldd	r31, Y+3	; 0x03
    3e7c:	80 81       	ld	r24, Z
    3e7e:	ea 81       	ldd	r30, Y+2	; 0x02
    3e80:	fb 81       	ldd	r31, Y+3	; 0x03
    3e82:	91 81       	ldd	r25, Z+1	; 0x01
    3e84:	2c 81       	ldd	r18, Y+4	; 0x04
    3e86:	3d 81       	ldd	r19, Y+5	; 0x05
    3e88:	69 2f       	mov	r22, r25
    3e8a:	a9 01       	movw	r20, r18
    3e8c:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <M_DIO_enuGetPinValue>
		Local_u8ErrorState = ES_OK;
    3e90:	81 e0       	ldi	r24, 0x01	; 1
    3e92:	89 83       	std	Y+1, r24	; 0x01
    3e94:	02 c0       	rjmp	.+4      	; 0x3e9a <LED_enuState+0x42>
	}else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
    3e96:	83 e0       	ldi	r24, 0x03	; 3
    3e98:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3e9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e9c:	0f 90       	pop	r0
    3e9e:	0f 90       	pop	r0
    3ea0:	0f 90       	pop	r0
    3ea2:	0f 90       	pop	r0
    3ea4:	0f 90       	pop	r0
    3ea6:	cf 91       	pop	r28
    3ea8:	df 91       	pop	r29
    3eaa:	08 95       	ret

00003eac <LCD_enuInit>:
#include "LCD_Config.h"
#include "LCD_Private.h"


ES_t LCD_enuInit(void)
{
    3eac:	0f 93       	push	r16
    3eae:	1f 93       	push	r17
    3eb0:	df 93       	push	r29
    3eb2:	cf 93       	push	r28
    3eb4:	cd b7       	in	r28, 0x3d	; 61
    3eb6:	de b7       	in	r29, 0x3e	; 62
    3eb8:	c5 55       	subi	r28, 0x55	; 85
    3eba:	d0 40       	sbci	r29, 0x00	; 0
    3ebc:	0f b6       	in	r0, 0x3f	; 63
    3ebe:	f8 94       	cli
    3ec0:	de bf       	out	0x3e, r29	; 62
    3ec2:	0f be       	out	0x3f, r0	; 63
    3ec4:	cd bf       	out	0x3d, r28	; 61
    3ec6:	fe 01       	movw	r30, r28
    3ec8:	ef 5a       	subi	r30, 0xAF	; 175
    3eca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	ac e0       	ldi	r26, 0x0C	; 12
    3ed2:	b2 e4       	ldi	r27, 0x42	; 66
    3ed4:	80 83       	st	Z, r24
    3ed6:	91 83       	std	Z+1, r25	; 0x01
    3ed8:	a2 83       	std	Z+2, r26	; 0x02
    3eda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3edc:	8e 01       	movw	r16, r28
    3ede:	03 5b       	subi	r16, 0xB3	; 179
    3ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	ef 5a       	subi	r30, 0xAF	; 175
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	60 81       	ld	r22, Z
    3eea:	71 81       	ldd	r23, Z+1	; 0x01
    3eec:	82 81       	ldd	r24, Z+2	; 0x02
    3eee:	93 81       	ldd	r25, Z+3	; 0x03
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	4a e7       	ldi	r20, 0x7A	; 122
    3ef6:	55 e4       	ldi	r21, 0x45	; 69
    3ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3efc:	dc 01       	movw	r26, r24
    3efe:	cb 01       	movw	r24, r22
    3f00:	f8 01       	movw	r30, r16
    3f02:	80 83       	st	Z, r24
    3f04:	91 83       	std	Z+1, r25	; 0x01
    3f06:	a2 83       	std	Z+2, r26	; 0x02
    3f08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f0a:	fe 01       	movw	r30, r28
    3f0c:	e3 5b       	subi	r30, 0xB3	; 179
    3f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f10:	60 81       	ld	r22, Z
    3f12:	71 81       	ldd	r23, Z+1	; 0x01
    3f14:	82 81       	ldd	r24, Z+2	; 0x02
    3f16:	93 81       	ldd	r25, Z+3	; 0x03
    3f18:	20 e0       	ldi	r18, 0x00	; 0
    3f1a:	30 e0       	ldi	r19, 0x00	; 0
    3f1c:	40 e8       	ldi	r20, 0x80	; 128
    3f1e:	5f e3       	ldi	r21, 0x3F	; 63
    3f20:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f24:	88 23       	and	r24, r24
    3f26:	44 f4       	brge	.+16     	; 0x3f38 <LCD_enuInit+0x8c>
		__ticks = 1;
    3f28:	fe 01       	movw	r30, r28
    3f2a:	e5 5b       	subi	r30, 0xB5	; 181
    3f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	91 83       	std	Z+1, r25	; 0x01
    3f34:	80 83       	st	Z, r24
    3f36:	64 c0       	rjmp	.+200    	; 0x4000 <LCD_enuInit+0x154>
	else if (__tmp > 65535)
    3f38:	fe 01       	movw	r30, r28
    3f3a:	e3 5b       	subi	r30, 0xB3	; 179
    3f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3e:	60 81       	ld	r22, Z
    3f40:	71 81       	ldd	r23, Z+1	; 0x01
    3f42:	82 81       	ldd	r24, Z+2	; 0x02
    3f44:	93 81       	ldd	r25, Z+3	; 0x03
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	3f ef       	ldi	r19, 0xFF	; 255
    3f4a:	4f e7       	ldi	r20, 0x7F	; 127
    3f4c:	57 e4       	ldi	r21, 0x47	; 71
    3f4e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f52:	18 16       	cp	r1, r24
    3f54:	0c f0       	brlt	.+2      	; 0x3f58 <LCD_enuInit+0xac>
    3f56:	43 c0       	rjmp	.+134    	; 0x3fde <LCD_enuInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f58:	fe 01       	movw	r30, r28
    3f5a:	ef 5a       	subi	r30, 0xAF	; 175
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	60 81       	ld	r22, Z
    3f60:	71 81       	ldd	r23, Z+1	; 0x01
    3f62:	82 81       	ldd	r24, Z+2	; 0x02
    3f64:	93 81       	ldd	r25, Z+3	; 0x03
    3f66:	20 e0       	ldi	r18, 0x00	; 0
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	40 e2       	ldi	r20, 0x20	; 32
    3f6c:	51 e4       	ldi	r21, 0x41	; 65
    3f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f72:	dc 01       	movw	r26, r24
    3f74:	cb 01       	movw	r24, r22
    3f76:	8e 01       	movw	r16, r28
    3f78:	05 5b       	subi	r16, 0xB5	; 181
    3f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f7c:	bc 01       	movw	r22, r24
    3f7e:	cd 01       	movw	r24, r26
    3f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f84:	dc 01       	movw	r26, r24
    3f86:	cb 01       	movw	r24, r22
    3f88:	f8 01       	movw	r30, r16
    3f8a:	91 83       	std	Z+1, r25	; 0x01
    3f8c:	80 83       	st	Z, r24
    3f8e:	1f c0       	rjmp	.+62     	; 0x3fce <LCD_enuInit+0x122>
    3f90:	fe 01       	movw	r30, r28
    3f92:	e7 5b       	subi	r30, 0xB7	; 183
    3f94:	ff 4f       	sbci	r31, 0xFF	; 255
    3f96:	80 e9       	ldi	r24, 0x90	; 144
    3f98:	91 e0       	ldi	r25, 0x01	; 1
    3f9a:	91 83       	std	Z+1, r25	; 0x01
    3f9c:	80 83       	st	Z, r24
    3f9e:	fe 01       	movw	r30, r28
    3fa0:	e7 5b       	subi	r30, 0xB7	; 183
    3fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa4:	80 81       	ld	r24, Z
    3fa6:	91 81       	ldd	r25, Z+1	; 0x01
    3fa8:	01 97       	sbiw	r24, 0x01	; 1
    3faa:	f1 f7       	brne	.-4      	; 0x3fa8 <LCD_enuInit+0xfc>
    3fac:	fe 01       	movw	r30, r28
    3fae:	e7 5b       	subi	r30, 0xB7	; 183
    3fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb2:	91 83       	std	Z+1, r25	; 0x01
    3fb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb6:	de 01       	movw	r26, r28
    3fb8:	a5 5b       	subi	r26, 0xB5	; 181
    3fba:	bf 4f       	sbci	r27, 0xFF	; 255
    3fbc:	fe 01       	movw	r30, r28
    3fbe:	e5 5b       	subi	r30, 0xB5	; 181
    3fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc2:	80 81       	ld	r24, Z
    3fc4:	91 81       	ldd	r25, Z+1	; 0x01
    3fc6:	01 97       	sbiw	r24, 0x01	; 1
    3fc8:	11 96       	adiw	r26, 0x01	; 1
    3fca:	9c 93       	st	X, r25
    3fcc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fce:	fe 01       	movw	r30, r28
    3fd0:	e5 5b       	subi	r30, 0xB5	; 181
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	80 81       	ld	r24, Z
    3fd6:	91 81       	ldd	r25, Z+1	; 0x01
    3fd8:	00 97       	sbiw	r24, 0x00	; 0
    3fda:	d1 f6       	brne	.-76     	; 0x3f90 <LCD_enuInit+0xe4>
    3fdc:	27 c0       	rjmp	.+78     	; 0x402c <LCD_enuInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fde:	8e 01       	movw	r16, r28
    3fe0:	05 5b       	subi	r16, 0xB5	; 181
    3fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	e3 5b       	subi	r30, 0xB3	; 179
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	60 81       	ld	r22, Z
    3fec:	71 81       	ldd	r23, Z+1	; 0x01
    3fee:	82 81       	ldd	r24, Z+2	; 0x02
    3ff0:	93 81       	ldd	r25, Z+3	; 0x03
    3ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	cb 01       	movw	r24, r22
    3ffa:	f8 01       	movw	r30, r16
    3ffc:	91 83       	std	Z+1, r25	; 0x01
    3ffe:	80 83       	st	Z, r24
    4000:	de 01       	movw	r26, r28
    4002:	a9 5b       	subi	r26, 0xB9	; 185
    4004:	bf 4f       	sbci	r27, 0xFF	; 255
    4006:	fe 01       	movw	r30, r28
    4008:	e5 5b       	subi	r30, 0xB5	; 181
    400a:	ff 4f       	sbci	r31, 0xFF	; 255
    400c:	80 81       	ld	r24, Z
    400e:	91 81       	ldd	r25, Z+1	; 0x01
    4010:	8d 93       	st	X+, r24
    4012:	9c 93       	st	X, r25
    4014:	fe 01       	movw	r30, r28
    4016:	e9 5b       	subi	r30, 0xB9	; 185
    4018:	ff 4f       	sbci	r31, 0xFF	; 255
    401a:	80 81       	ld	r24, Z
    401c:	91 81       	ldd	r25, Z+1	; 0x01
    401e:	01 97       	sbiw	r24, 0x01	; 1
    4020:	f1 f7       	brne	.-4      	; 0x401e <LCD_enuInit+0x172>
    4022:	fe 01       	movw	r30, r28
    4024:	e9 5b       	subi	r30, 0xB9	; 185
    4026:	ff 4f       	sbci	r31, 0xFF	; 255
    4028:	91 83       	std	Z+1, r25	; 0x01
    402a:	80 83       	st	Z, r24
	_delay_ms(35);
	u8 Local_u8ErrorState = ES_NOK;
    402c:	fe 01       	movw	r30, r28
    402e:	eb 5a       	subi	r30, 0xAB	; 171
    4030:	ff 4f       	sbci	r31, 0xFF	; 255
    4032:	10 82       	st	Z, r1
	
	M_DIO_enuSetPinDirection(LCD_CTRL_RS_PORT,LCD_CTRL_RS_PIN,DIO_Direction_Output);
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	61 e0       	ldi	r22, 0x01	; 1
    4038:	41 e0       	ldi	r20, 0x01	; 1
    403a:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
	M_DIO_enuSetPinDirection(LCD_CTRL_RW_PORT,LCD_CTRL_RW_PIN,DIO_Direction_Output);
    403e:	81 e0       	ldi	r24, 0x01	; 1
    4040:	62 e0       	ldi	r22, 0x02	; 2
    4042:	41 e0       	ldi	r20, 0x01	; 1
    4044:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
	M_DIO_enuSetPinDirection(LCD_CTRL_EN_PORT,LCD_CTRL_EN_PIN,DIO_Direction_Output);
    4048:	81 e0       	ldi	r24, 0x01	; 1
    404a:	63 e0       	ldi	r22, 0x03	; 3
    404c:	41 e0       	ldi	r20, 0x01	; 1
    404e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>

	M_DIO_enuSetPinDirection(LCD_DATA_D7_PORT,LCD_DATA_D7_PIN,DIO_Direction_Output);
    4052:	81 e0       	ldi	r24, 0x01	; 1
    4054:	67 e0       	ldi	r22, 0x07	; 7
    4056:	41 e0       	ldi	r20, 0x01	; 1
    4058:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
	M_DIO_enuSetPinDirection(LCD_DATA_D6_PORT,LCD_DATA_D6_PIN,DIO_Direction_Output);
    405c:	81 e0       	ldi	r24, 0x01	; 1
    405e:	66 e0       	ldi	r22, 0x06	; 6
    4060:	41 e0       	ldi	r20, 0x01	; 1
    4062:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
	M_DIO_enuSetPinDirection(LCD_DATA_D5_PORT,LCD_DATA_D5_PIN,DIO_Direction_Output);
    4066:	81 e0       	ldi	r24, 0x01	; 1
    4068:	65 e0       	ldi	r22, 0x05	; 5
    406a:	41 e0       	ldi	r20, 0x01	; 1
    406c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
	M_DIO_enuSetPinDirection(LCD_DATA_D4_PORT,LCD_DATA_D4_PIN,DIO_Direction_Output);
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	64 e0       	ldi	r22, 0x04	; 4
    4074:	41 e0       	ldi	r20, 0x01	; 1
    4076:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
	_delay_ms(35);
	LCD_enuLatch((0x30 | (N_DISPLAY_LINES<<3)|(F_DISPLAY_FONT<<2)));
	_delay_ms(1);
	#elif LCD_MODE == FOUR_BIT_MODE

	M_DIO_enuSetPinValue(LCD_CTRL_RS_PORT,LCD_CTRL_RS_PIN,DIO_State_Low);
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	61 e0       	ldi	r22, 0x01	; 1
    407e:	40 e0       	ldi	r20, 0x00	; 0
    4080:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	/*Function Set*/
	M_DIO_enuSetPinValue(LCD_DATA_D7_PORT, LCD_DATA_D7_PIN, 0);
    4084:	81 e0       	ldi	r24, 0x01	; 1
    4086:	67 e0       	ldi	r22, 0x07	; 7
    4088:	40 e0       	ldi	r20, 0x00	; 0
    408a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(LCD_DATA_D6_PORT, LCD_DATA_D6_PIN, 0);
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	66 e0       	ldi	r22, 0x06	; 6
    4092:	40 e0       	ldi	r20, 0x00	; 0
    4094:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(LCD_DATA_D5_PORT, LCD_DATA_D5_PIN, 1);
    4098:	81 e0       	ldi	r24, 0x01	; 1
    409a:	65 e0       	ldi	r22, 0x05	; 5
    409c:	41 e0       	ldi	r20, 0x01	; 1
    409e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(LCD_DATA_D4_PORT, LCD_DATA_D4_PIN, 0);
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	64 e0       	ldi	r22, 0x04	; 4
    40a6:	40 e0       	ldi	r20, 0x00	; 0
    40a8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(LCD_CTRL_EN_PORT, LCD_CTRL_EN_PIN, DIO_State_High);
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	63 e0       	ldi	r22, 0x03	; 3
    40b0:	41 e0       	ldi	r20, 0x01	; 1
    40b2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
    40b6:	fe 01       	movw	r30, r28
    40b8:	ed 5b       	subi	r30, 0xBD	; 189
    40ba:	ff 4f       	sbci	r31, 0xFF	; 255
    40bc:	80 e0       	ldi	r24, 0x00	; 0
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	a0 ea       	ldi	r26, 0xA0	; 160
    40c2:	b0 e4       	ldi	r27, 0x40	; 64
    40c4:	80 83       	st	Z, r24
    40c6:	91 83       	std	Z+1, r25	; 0x01
    40c8:	a2 83       	std	Z+2, r26	; 0x02
    40ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40cc:	8e 01       	movw	r16, r28
    40ce:	01 5c       	subi	r16, 0xC1	; 193
    40d0:	1f 4f       	sbci	r17, 0xFF	; 255
    40d2:	fe 01       	movw	r30, r28
    40d4:	ed 5b       	subi	r30, 0xBD	; 189
    40d6:	ff 4f       	sbci	r31, 0xFF	; 255
    40d8:	60 81       	ld	r22, Z
    40da:	71 81       	ldd	r23, Z+1	; 0x01
    40dc:	82 81       	ldd	r24, Z+2	; 0x02
    40de:	93 81       	ldd	r25, Z+3	; 0x03
    40e0:	20 e0       	ldi	r18, 0x00	; 0
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	4a e7       	ldi	r20, 0x7A	; 122
    40e6:	55 e4       	ldi	r21, 0x45	; 69
    40e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	f8 01       	movw	r30, r16
    40f2:	80 83       	st	Z, r24
    40f4:	91 83       	std	Z+1, r25	; 0x01
    40f6:	a2 83       	std	Z+2, r26	; 0x02
    40f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40fa:	fe 01       	movw	r30, r28
    40fc:	ff 96       	adiw	r30, 0x3f	; 63
    40fe:	60 81       	ld	r22, Z
    4100:	71 81       	ldd	r23, Z+1	; 0x01
    4102:	82 81       	ldd	r24, Z+2	; 0x02
    4104:	93 81       	ldd	r25, Z+3	; 0x03
    4106:	20 e0       	ldi	r18, 0x00	; 0
    4108:	30 e0       	ldi	r19, 0x00	; 0
    410a:	40 e8       	ldi	r20, 0x80	; 128
    410c:	5f e3       	ldi	r21, 0x3F	; 63
    410e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4112:	88 23       	and	r24, r24
    4114:	2c f4       	brge	.+10     	; 0x4120 <LCD_enuInit+0x274>
		__ticks = 1;
    4116:	81 e0       	ldi	r24, 0x01	; 1
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	9e af       	std	Y+62, r25	; 0x3e
    411c:	8d af       	std	Y+61, r24	; 0x3d
    411e:	46 c0       	rjmp	.+140    	; 0x41ac <LCD_enuInit+0x300>
	else if (__tmp > 65535)
    4120:	fe 01       	movw	r30, r28
    4122:	ff 96       	adiw	r30, 0x3f	; 63
    4124:	60 81       	ld	r22, Z
    4126:	71 81       	ldd	r23, Z+1	; 0x01
    4128:	82 81       	ldd	r24, Z+2	; 0x02
    412a:	93 81       	ldd	r25, Z+3	; 0x03
    412c:	20 e0       	ldi	r18, 0x00	; 0
    412e:	3f ef       	ldi	r19, 0xFF	; 255
    4130:	4f e7       	ldi	r20, 0x7F	; 127
    4132:	57 e4       	ldi	r21, 0x47	; 71
    4134:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4138:	18 16       	cp	r1, r24
    413a:	64 f5       	brge	.+88     	; 0x4194 <LCD_enuInit+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    413c:	fe 01       	movw	r30, r28
    413e:	ed 5b       	subi	r30, 0xBD	; 189
    4140:	ff 4f       	sbci	r31, 0xFF	; 255
    4142:	60 81       	ld	r22, Z
    4144:	71 81       	ldd	r23, Z+1	; 0x01
    4146:	82 81       	ldd	r24, Z+2	; 0x02
    4148:	93 81       	ldd	r25, Z+3	; 0x03
    414a:	20 e0       	ldi	r18, 0x00	; 0
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	40 e2       	ldi	r20, 0x20	; 32
    4150:	51 e4       	ldi	r21, 0x41	; 65
    4152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4156:	dc 01       	movw	r26, r24
    4158:	cb 01       	movw	r24, r22
    415a:	bc 01       	movw	r22, r24
    415c:	cd 01       	movw	r24, r26
    415e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4162:	dc 01       	movw	r26, r24
    4164:	cb 01       	movw	r24, r22
    4166:	9e af       	std	Y+62, r25	; 0x3e
    4168:	8d af       	std	Y+61, r24	; 0x3d
    416a:	0f c0       	rjmp	.+30     	; 0x418a <LCD_enuInit+0x2de>
    416c:	80 e9       	ldi	r24, 0x90	; 144
    416e:	91 e0       	ldi	r25, 0x01	; 1
    4170:	9c af       	std	Y+60, r25	; 0x3c
    4172:	8b af       	std	Y+59, r24	; 0x3b
    4174:	8b ad       	ldd	r24, Y+59	; 0x3b
    4176:	9c ad       	ldd	r25, Y+60	; 0x3c
    4178:	01 97       	sbiw	r24, 0x01	; 1
    417a:	f1 f7       	brne	.-4      	; 0x4178 <LCD_enuInit+0x2cc>
    417c:	9c af       	std	Y+60, r25	; 0x3c
    417e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4180:	8d ad       	ldd	r24, Y+61	; 0x3d
    4182:	9e ad       	ldd	r25, Y+62	; 0x3e
    4184:	01 97       	sbiw	r24, 0x01	; 1
    4186:	9e af       	std	Y+62, r25	; 0x3e
    4188:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    418a:	8d ad       	ldd	r24, Y+61	; 0x3d
    418c:	9e ad       	ldd	r25, Y+62	; 0x3e
    418e:	00 97       	sbiw	r24, 0x00	; 0
    4190:	69 f7       	brne	.-38     	; 0x416c <LCD_enuInit+0x2c0>
    4192:	16 c0       	rjmp	.+44     	; 0x41c0 <LCD_enuInit+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4194:	fe 01       	movw	r30, r28
    4196:	ff 96       	adiw	r30, 0x3f	; 63
    4198:	60 81       	ld	r22, Z
    419a:	71 81       	ldd	r23, Z+1	; 0x01
    419c:	82 81       	ldd	r24, Z+2	; 0x02
    419e:	93 81       	ldd	r25, Z+3	; 0x03
    41a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a4:	dc 01       	movw	r26, r24
    41a6:	cb 01       	movw	r24, r22
    41a8:	9e af       	std	Y+62, r25	; 0x3e
    41aa:	8d af       	std	Y+61, r24	; 0x3d
    41ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    41ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    41b0:	9a af       	std	Y+58, r25	; 0x3a
    41b2:	89 af       	std	Y+57, r24	; 0x39
    41b4:	89 ad       	ldd	r24, Y+57	; 0x39
    41b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    41b8:	01 97       	sbiw	r24, 0x01	; 1
    41ba:	f1 f7       	brne	.-4      	; 0x41b8 <LCD_enuInit+0x30c>
    41bc:	9a af       	std	Y+58, r25	; 0x3a
    41be:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);
	M_DIO_enuSetPinValue(LCD_CTRL_EN_PORT, LCD_CTRL_EN_PIN, DIO_State_Low);
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	63 e0       	ldi	r22, 0x03	; 3
    41c4:	40 e0       	ldi	r20, 0x00	; 0
    41c6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
    41ca:	80 e0       	ldi	r24, 0x00	; 0
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	a0 ea       	ldi	r26, 0xA0	; 160
    41d0:	b0 e4       	ldi	r27, 0x40	; 64
    41d2:	8d ab       	std	Y+53, r24	; 0x35
    41d4:	9e ab       	std	Y+54, r25	; 0x36
    41d6:	af ab       	std	Y+55, r26	; 0x37
    41d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41da:	6d a9       	ldd	r22, Y+53	; 0x35
    41dc:	7e a9       	ldd	r23, Y+54	; 0x36
    41de:	8f a9       	ldd	r24, Y+55	; 0x37
    41e0:	98 ad       	ldd	r25, Y+56	; 0x38
    41e2:	20 e0       	ldi	r18, 0x00	; 0
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	4a e7       	ldi	r20, 0x7A	; 122
    41e8:	55 e4       	ldi	r21, 0x45	; 69
    41ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ee:	dc 01       	movw	r26, r24
    41f0:	cb 01       	movw	r24, r22
    41f2:	89 ab       	std	Y+49, r24	; 0x31
    41f4:	9a ab       	std	Y+50, r25	; 0x32
    41f6:	ab ab       	std	Y+51, r26	; 0x33
    41f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    41fa:	69 a9       	ldd	r22, Y+49	; 0x31
    41fc:	7a a9       	ldd	r23, Y+50	; 0x32
    41fe:	8b a9       	ldd	r24, Y+51	; 0x33
    4200:	9c a9       	ldd	r25, Y+52	; 0x34
    4202:	20 e0       	ldi	r18, 0x00	; 0
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	40 e8       	ldi	r20, 0x80	; 128
    4208:	5f e3       	ldi	r21, 0x3F	; 63
    420a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    420e:	88 23       	and	r24, r24
    4210:	2c f4       	brge	.+10     	; 0x421c <LCD_enuInit+0x370>
		__ticks = 1;
    4212:	81 e0       	ldi	r24, 0x01	; 1
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	98 ab       	std	Y+48, r25	; 0x30
    4218:	8f a7       	std	Y+47, r24	; 0x2f
    421a:	3f c0       	rjmp	.+126    	; 0x429a <LCD_enuInit+0x3ee>
	else if (__tmp > 65535)
    421c:	69 a9       	ldd	r22, Y+49	; 0x31
    421e:	7a a9       	ldd	r23, Y+50	; 0x32
    4220:	8b a9       	ldd	r24, Y+51	; 0x33
    4222:	9c a9       	ldd	r25, Y+52	; 0x34
    4224:	20 e0       	ldi	r18, 0x00	; 0
    4226:	3f ef       	ldi	r19, 0xFF	; 255
    4228:	4f e7       	ldi	r20, 0x7F	; 127
    422a:	57 e4       	ldi	r21, 0x47	; 71
    422c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4230:	18 16       	cp	r1, r24
    4232:	4c f5       	brge	.+82     	; 0x4286 <LCD_enuInit+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4234:	6d a9       	ldd	r22, Y+53	; 0x35
    4236:	7e a9       	ldd	r23, Y+54	; 0x36
    4238:	8f a9       	ldd	r24, Y+55	; 0x37
    423a:	98 ad       	ldd	r25, Y+56	; 0x38
    423c:	20 e0       	ldi	r18, 0x00	; 0
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	40 e2       	ldi	r20, 0x20	; 32
    4242:	51 e4       	ldi	r21, 0x41	; 65
    4244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4248:	dc 01       	movw	r26, r24
    424a:	cb 01       	movw	r24, r22
    424c:	bc 01       	movw	r22, r24
    424e:	cd 01       	movw	r24, r26
    4250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4254:	dc 01       	movw	r26, r24
    4256:	cb 01       	movw	r24, r22
    4258:	98 ab       	std	Y+48, r25	; 0x30
    425a:	8f a7       	std	Y+47, r24	; 0x2f
    425c:	0f c0       	rjmp	.+30     	; 0x427c <LCD_enuInit+0x3d0>
    425e:	80 e9       	ldi	r24, 0x90	; 144
    4260:	91 e0       	ldi	r25, 0x01	; 1
    4262:	9e a7       	std	Y+46, r25	; 0x2e
    4264:	8d a7       	std	Y+45, r24	; 0x2d
    4266:	8d a5       	ldd	r24, Y+45	; 0x2d
    4268:	9e a5       	ldd	r25, Y+46	; 0x2e
    426a:	01 97       	sbiw	r24, 0x01	; 1
    426c:	f1 f7       	brne	.-4      	; 0x426a <LCD_enuInit+0x3be>
    426e:	9e a7       	std	Y+46, r25	; 0x2e
    4270:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4272:	8f a5       	ldd	r24, Y+47	; 0x2f
    4274:	98 a9       	ldd	r25, Y+48	; 0x30
    4276:	01 97       	sbiw	r24, 0x01	; 1
    4278:	98 ab       	std	Y+48, r25	; 0x30
    427a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    427c:	8f a5       	ldd	r24, Y+47	; 0x2f
    427e:	98 a9       	ldd	r25, Y+48	; 0x30
    4280:	00 97       	sbiw	r24, 0x00	; 0
    4282:	69 f7       	brne	.-38     	; 0x425e <LCD_enuInit+0x3b2>
    4284:	14 c0       	rjmp	.+40     	; 0x42ae <LCD_enuInit+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4286:	69 a9       	ldd	r22, Y+49	; 0x31
    4288:	7a a9       	ldd	r23, Y+50	; 0x32
    428a:	8b a9       	ldd	r24, Y+51	; 0x33
    428c:	9c a9       	ldd	r25, Y+52	; 0x34
    428e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4292:	dc 01       	movw	r26, r24
    4294:	cb 01       	movw	r24, r22
    4296:	98 ab       	std	Y+48, r25	; 0x30
    4298:	8f a7       	std	Y+47, r24	; 0x2f
    429a:	8f a5       	ldd	r24, Y+47	; 0x2f
    429c:	98 a9       	ldd	r25, Y+48	; 0x30
    429e:	9c a7       	std	Y+44, r25	; 0x2c
    42a0:	8b a7       	std	Y+43, r24	; 0x2b
    42a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    42a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    42a6:	01 97       	sbiw	r24, 0x01	; 1
    42a8:	f1 f7       	brne	.-4      	; 0x42a6 <LCD_enuInit+0x3fa>
    42aa:	9c a7       	std	Y+44, r25	; 0x2c
    42ac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	LCD_enuLatch((0x20 | (N_DISPLAY_LINES<<3)|(F_DISPLAY_FONT<<2)));
    42ae:	88 e2       	ldi	r24, 0x28	; 40
    42b0:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <LCD_enuLatch>
    42b4:	80 e0       	ldi	r24, 0x00	; 0
    42b6:	90 e0       	ldi	r25, 0x00	; 0
    42b8:	a0 e8       	ldi	r26, 0x80	; 128
    42ba:	bf e3       	ldi	r27, 0x3F	; 63
    42bc:	8f a3       	std	Y+39, r24	; 0x27
    42be:	98 a7       	std	Y+40, r25	; 0x28
    42c0:	a9 a7       	std	Y+41, r26	; 0x29
    42c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42c4:	6f a1       	ldd	r22, Y+39	; 0x27
    42c6:	78 a5       	ldd	r23, Y+40	; 0x28
    42c8:	89 a5       	ldd	r24, Y+41	; 0x29
    42ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    42cc:	20 e0       	ldi	r18, 0x00	; 0
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	4a e7       	ldi	r20, 0x7A	; 122
    42d2:	55 e4       	ldi	r21, 0x45	; 69
    42d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d8:	dc 01       	movw	r26, r24
    42da:	cb 01       	movw	r24, r22
    42dc:	8b a3       	std	Y+35, r24	; 0x23
    42de:	9c a3       	std	Y+36, r25	; 0x24
    42e0:	ad a3       	std	Y+37, r26	; 0x25
    42e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    42e4:	6b a1       	ldd	r22, Y+35	; 0x23
    42e6:	7c a1       	ldd	r23, Y+36	; 0x24
    42e8:	8d a1       	ldd	r24, Y+37	; 0x25
    42ea:	9e a1       	ldd	r25, Y+38	; 0x26
    42ec:	20 e0       	ldi	r18, 0x00	; 0
    42ee:	30 e0       	ldi	r19, 0x00	; 0
    42f0:	40 e8       	ldi	r20, 0x80	; 128
    42f2:	5f e3       	ldi	r21, 0x3F	; 63
    42f4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    42f8:	88 23       	and	r24, r24
    42fa:	2c f4       	brge	.+10     	; 0x4306 <LCD_enuInit+0x45a>
		__ticks = 1;
    42fc:	81 e0       	ldi	r24, 0x01	; 1
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	9a a3       	std	Y+34, r25	; 0x22
    4302:	89 a3       	std	Y+33, r24	; 0x21
    4304:	3f c0       	rjmp	.+126    	; 0x4384 <LCD_enuInit+0x4d8>
	else if (__tmp > 65535)
    4306:	6b a1       	ldd	r22, Y+35	; 0x23
    4308:	7c a1       	ldd	r23, Y+36	; 0x24
    430a:	8d a1       	ldd	r24, Y+37	; 0x25
    430c:	9e a1       	ldd	r25, Y+38	; 0x26
    430e:	20 e0       	ldi	r18, 0x00	; 0
    4310:	3f ef       	ldi	r19, 0xFF	; 255
    4312:	4f e7       	ldi	r20, 0x7F	; 127
    4314:	57 e4       	ldi	r21, 0x47	; 71
    4316:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    431a:	18 16       	cp	r1, r24
    431c:	4c f5       	brge	.+82     	; 0x4370 <LCD_enuInit+0x4c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    431e:	6f a1       	ldd	r22, Y+39	; 0x27
    4320:	78 a5       	ldd	r23, Y+40	; 0x28
    4322:	89 a5       	ldd	r24, Y+41	; 0x29
    4324:	9a a5       	ldd	r25, Y+42	; 0x2a
    4326:	20 e0       	ldi	r18, 0x00	; 0
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	40 e2       	ldi	r20, 0x20	; 32
    432c:	51 e4       	ldi	r21, 0x41	; 65
    432e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4332:	dc 01       	movw	r26, r24
    4334:	cb 01       	movw	r24, r22
    4336:	bc 01       	movw	r22, r24
    4338:	cd 01       	movw	r24, r26
    433a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    433e:	dc 01       	movw	r26, r24
    4340:	cb 01       	movw	r24, r22
    4342:	9a a3       	std	Y+34, r25	; 0x22
    4344:	89 a3       	std	Y+33, r24	; 0x21
    4346:	0f c0       	rjmp	.+30     	; 0x4366 <LCD_enuInit+0x4ba>
    4348:	80 e9       	ldi	r24, 0x90	; 144
    434a:	91 e0       	ldi	r25, 0x01	; 1
    434c:	98 a3       	std	Y+32, r25	; 0x20
    434e:	8f 8f       	std	Y+31, r24	; 0x1f
    4350:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4352:	98 a1       	ldd	r25, Y+32	; 0x20
    4354:	01 97       	sbiw	r24, 0x01	; 1
    4356:	f1 f7       	brne	.-4      	; 0x4354 <LCD_enuInit+0x4a8>
    4358:	98 a3       	std	Y+32, r25	; 0x20
    435a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    435c:	89 a1       	ldd	r24, Y+33	; 0x21
    435e:	9a a1       	ldd	r25, Y+34	; 0x22
    4360:	01 97       	sbiw	r24, 0x01	; 1
    4362:	9a a3       	std	Y+34, r25	; 0x22
    4364:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4366:	89 a1       	ldd	r24, Y+33	; 0x21
    4368:	9a a1       	ldd	r25, Y+34	; 0x22
    436a:	00 97       	sbiw	r24, 0x00	; 0
    436c:	69 f7       	brne	.-38     	; 0x4348 <LCD_enuInit+0x49c>
    436e:	14 c0       	rjmp	.+40     	; 0x4398 <LCD_enuInit+0x4ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4370:	6b a1       	ldd	r22, Y+35	; 0x23
    4372:	7c a1       	ldd	r23, Y+36	; 0x24
    4374:	8d a1       	ldd	r24, Y+37	; 0x25
    4376:	9e a1       	ldd	r25, Y+38	; 0x26
    4378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    437c:	dc 01       	movw	r26, r24
    437e:	cb 01       	movw	r24, r22
    4380:	9a a3       	std	Y+34, r25	; 0x22
    4382:	89 a3       	std	Y+33, r24	; 0x21
    4384:	89 a1       	ldd	r24, Y+33	; 0x21
    4386:	9a a1       	ldd	r25, Y+34	; 0x22
    4388:	9e 8f       	std	Y+30, r25	; 0x1e
    438a:	8d 8f       	std	Y+29, r24	; 0x1d
    438c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    438e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4390:	01 97       	sbiw	r24, 0x01	; 1
    4392:	f1 f7       	brne	.-4      	; 0x4390 <LCD_enuInit+0x4e4>
    4394:	9e 8f       	std	Y+30, r25	; 0x1e
    4396:	8d 8f       	std	Y+29, r24	; 0x1d
	
	#else
	#error "Undefined LCD Mode"
	#endif
	/*Display Control*/
	LCD_enuLatch((0x08)|(D_DISPLAY_MODE<<2)|(C_CURSOR_MODE<<1)|(B_BLINK_MODE<<0));
    4398:	8c e0       	ldi	r24, 0x0C	; 12
    439a:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <LCD_enuLatch>
    439e:	80 e0       	ldi	r24, 0x00	; 0
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	a0 e8       	ldi	r26, 0x80	; 128
    43a4:	bf e3       	ldi	r27, 0x3F	; 63
    43a6:	89 8f       	std	Y+25, r24	; 0x19
    43a8:	9a 8f       	std	Y+26, r25	; 0x1a
    43aa:	ab 8f       	std	Y+27, r26	; 0x1b
    43ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43ae:	69 8d       	ldd	r22, Y+25	; 0x19
    43b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43b6:	20 e0       	ldi	r18, 0x00	; 0
    43b8:	30 e0       	ldi	r19, 0x00	; 0
    43ba:	4a e7       	ldi	r20, 0x7A	; 122
    43bc:	55 e4       	ldi	r21, 0x45	; 69
    43be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43c2:	dc 01       	movw	r26, r24
    43c4:	cb 01       	movw	r24, r22
    43c6:	8d 8b       	std	Y+21, r24	; 0x15
    43c8:	9e 8b       	std	Y+22, r25	; 0x16
    43ca:	af 8b       	std	Y+23, r26	; 0x17
    43cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    43ce:	6d 89       	ldd	r22, Y+21	; 0x15
    43d0:	7e 89       	ldd	r23, Y+22	; 0x16
    43d2:	8f 89       	ldd	r24, Y+23	; 0x17
    43d4:	98 8d       	ldd	r25, Y+24	; 0x18
    43d6:	20 e0       	ldi	r18, 0x00	; 0
    43d8:	30 e0       	ldi	r19, 0x00	; 0
    43da:	40 e8       	ldi	r20, 0x80	; 128
    43dc:	5f e3       	ldi	r21, 0x3F	; 63
    43de:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    43e2:	88 23       	and	r24, r24
    43e4:	2c f4       	brge	.+10     	; 0x43f0 <LCD_enuInit+0x544>
		__ticks = 1;
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	9c 8b       	std	Y+20, r25	; 0x14
    43ec:	8b 8b       	std	Y+19, r24	; 0x13
    43ee:	3f c0       	rjmp	.+126    	; 0x446e <LCD_enuInit+0x5c2>
	else if (__tmp > 65535)
    43f0:	6d 89       	ldd	r22, Y+21	; 0x15
    43f2:	7e 89       	ldd	r23, Y+22	; 0x16
    43f4:	8f 89       	ldd	r24, Y+23	; 0x17
    43f6:	98 8d       	ldd	r25, Y+24	; 0x18
    43f8:	20 e0       	ldi	r18, 0x00	; 0
    43fa:	3f ef       	ldi	r19, 0xFF	; 255
    43fc:	4f e7       	ldi	r20, 0x7F	; 127
    43fe:	57 e4       	ldi	r21, 0x47	; 71
    4400:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4404:	18 16       	cp	r1, r24
    4406:	4c f5       	brge	.+82     	; 0x445a <LCD_enuInit+0x5ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4408:	69 8d       	ldd	r22, Y+25	; 0x19
    440a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    440c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    440e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4410:	20 e0       	ldi	r18, 0x00	; 0
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	40 e2       	ldi	r20, 0x20	; 32
    4416:	51 e4       	ldi	r21, 0x41	; 65
    4418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    441c:	dc 01       	movw	r26, r24
    441e:	cb 01       	movw	r24, r22
    4420:	bc 01       	movw	r22, r24
    4422:	cd 01       	movw	r24, r26
    4424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4428:	dc 01       	movw	r26, r24
    442a:	cb 01       	movw	r24, r22
    442c:	9c 8b       	std	Y+20, r25	; 0x14
    442e:	8b 8b       	std	Y+19, r24	; 0x13
    4430:	0f c0       	rjmp	.+30     	; 0x4450 <LCD_enuInit+0x5a4>
    4432:	80 e9       	ldi	r24, 0x90	; 144
    4434:	91 e0       	ldi	r25, 0x01	; 1
    4436:	9a 8b       	std	Y+18, r25	; 0x12
    4438:	89 8b       	std	Y+17, r24	; 0x11
    443a:	89 89       	ldd	r24, Y+17	; 0x11
    443c:	9a 89       	ldd	r25, Y+18	; 0x12
    443e:	01 97       	sbiw	r24, 0x01	; 1
    4440:	f1 f7       	brne	.-4      	; 0x443e <LCD_enuInit+0x592>
    4442:	9a 8b       	std	Y+18, r25	; 0x12
    4444:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4446:	8b 89       	ldd	r24, Y+19	; 0x13
    4448:	9c 89       	ldd	r25, Y+20	; 0x14
    444a:	01 97       	sbiw	r24, 0x01	; 1
    444c:	9c 8b       	std	Y+20, r25	; 0x14
    444e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4450:	8b 89       	ldd	r24, Y+19	; 0x13
    4452:	9c 89       	ldd	r25, Y+20	; 0x14
    4454:	00 97       	sbiw	r24, 0x00	; 0
    4456:	69 f7       	brne	.-38     	; 0x4432 <LCD_enuInit+0x586>
    4458:	14 c0       	rjmp	.+40     	; 0x4482 <LCD_enuInit+0x5d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    445a:	6d 89       	ldd	r22, Y+21	; 0x15
    445c:	7e 89       	ldd	r23, Y+22	; 0x16
    445e:	8f 89       	ldd	r24, Y+23	; 0x17
    4460:	98 8d       	ldd	r25, Y+24	; 0x18
    4462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4466:	dc 01       	movw	r26, r24
    4468:	cb 01       	movw	r24, r22
    446a:	9c 8b       	std	Y+20, r25	; 0x14
    446c:	8b 8b       	std	Y+19, r24	; 0x13
    446e:	8b 89       	ldd	r24, Y+19	; 0x13
    4470:	9c 89       	ldd	r25, Y+20	; 0x14
    4472:	98 8b       	std	Y+16, r25	; 0x10
    4474:	8f 87       	std	Y+15, r24	; 0x0f
    4476:	8f 85       	ldd	r24, Y+15	; 0x0f
    4478:	98 89       	ldd	r25, Y+16	; 0x10
    447a:	01 97       	sbiw	r24, 0x01	; 1
    447c:	f1 f7       	brne	.-4      	; 0x447a <LCD_enuInit+0x5ce>
    447e:	98 8b       	std	Y+16, r25	; 0x10
    4480:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Display Clear*/
	LCD_enuLatch(COMMAND_CLEAR_DISPLAY);
    4482:	81 e0       	ldi	r24, 0x01	; 1
    4484:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <LCD_enuLatch>
    4488:	80 e0       	ldi	r24, 0x00	; 0
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	a0 e0       	ldi	r26, 0x00	; 0
    448e:	b0 e4       	ldi	r27, 0x40	; 64
    4490:	8b 87       	std	Y+11, r24	; 0x0b
    4492:	9c 87       	std	Y+12, r25	; 0x0c
    4494:	ad 87       	std	Y+13, r26	; 0x0d
    4496:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4498:	6b 85       	ldd	r22, Y+11	; 0x0b
    449a:	7c 85       	ldd	r23, Y+12	; 0x0c
    449c:	8d 85       	ldd	r24, Y+13	; 0x0d
    449e:	9e 85       	ldd	r25, Y+14	; 0x0e
    44a0:	20 e0       	ldi	r18, 0x00	; 0
    44a2:	30 e0       	ldi	r19, 0x00	; 0
    44a4:	4a e7       	ldi	r20, 0x7A	; 122
    44a6:	55 e4       	ldi	r21, 0x45	; 69
    44a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ac:	dc 01       	movw	r26, r24
    44ae:	cb 01       	movw	r24, r22
    44b0:	8f 83       	std	Y+7, r24	; 0x07
    44b2:	98 87       	std	Y+8, r25	; 0x08
    44b4:	a9 87       	std	Y+9, r26	; 0x09
    44b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44b8:	6f 81       	ldd	r22, Y+7	; 0x07
    44ba:	78 85       	ldd	r23, Y+8	; 0x08
    44bc:	89 85       	ldd	r24, Y+9	; 0x09
    44be:	9a 85       	ldd	r25, Y+10	; 0x0a
    44c0:	20 e0       	ldi	r18, 0x00	; 0
    44c2:	30 e0       	ldi	r19, 0x00	; 0
    44c4:	40 e8       	ldi	r20, 0x80	; 128
    44c6:	5f e3       	ldi	r21, 0x3F	; 63
    44c8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    44cc:	88 23       	and	r24, r24
    44ce:	2c f4       	brge	.+10     	; 0x44da <LCD_enuInit+0x62e>
		__ticks = 1;
    44d0:	81 e0       	ldi	r24, 0x01	; 1
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	9e 83       	std	Y+6, r25	; 0x06
    44d6:	8d 83       	std	Y+5, r24	; 0x05
    44d8:	3f c0       	rjmp	.+126    	; 0x4558 <LCD_enuInit+0x6ac>
	else if (__tmp > 65535)
    44da:	6f 81       	ldd	r22, Y+7	; 0x07
    44dc:	78 85       	ldd	r23, Y+8	; 0x08
    44de:	89 85       	ldd	r24, Y+9	; 0x09
    44e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    44e2:	20 e0       	ldi	r18, 0x00	; 0
    44e4:	3f ef       	ldi	r19, 0xFF	; 255
    44e6:	4f e7       	ldi	r20, 0x7F	; 127
    44e8:	57 e4       	ldi	r21, 0x47	; 71
    44ea:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    44ee:	18 16       	cp	r1, r24
    44f0:	4c f5       	brge	.+82     	; 0x4544 <LCD_enuInit+0x698>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    44f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    44f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    44f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    44fa:	20 e0       	ldi	r18, 0x00	; 0
    44fc:	30 e0       	ldi	r19, 0x00	; 0
    44fe:	40 e2       	ldi	r20, 0x20	; 32
    4500:	51 e4       	ldi	r21, 0x41	; 65
    4502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4506:	dc 01       	movw	r26, r24
    4508:	cb 01       	movw	r24, r22
    450a:	bc 01       	movw	r22, r24
    450c:	cd 01       	movw	r24, r26
    450e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4512:	dc 01       	movw	r26, r24
    4514:	cb 01       	movw	r24, r22
    4516:	9e 83       	std	Y+6, r25	; 0x06
    4518:	8d 83       	std	Y+5, r24	; 0x05
    451a:	0f c0       	rjmp	.+30     	; 0x453a <LCD_enuInit+0x68e>
    451c:	80 e9       	ldi	r24, 0x90	; 144
    451e:	91 e0       	ldi	r25, 0x01	; 1
    4520:	9c 83       	std	Y+4, r25	; 0x04
    4522:	8b 83       	std	Y+3, r24	; 0x03
    4524:	8b 81       	ldd	r24, Y+3	; 0x03
    4526:	9c 81       	ldd	r25, Y+4	; 0x04
    4528:	01 97       	sbiw	r24, 0x01	; 1
    452a:	f1 f7       	brne	.-4      	; 0x4528 <LCD_enuInit+0x67c>
    452c:	9c 83       	std	Y+4, r25	; 0x04
    452e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4530:	8d 81       	ldd	r24, Y+5	; 0x05
    4532:	9e 81       	ldd	r25, Y+6	; 0x06
    4534:	01 97       	sbiw	r24, 0x01	; 1
    4536:	9e 83       	std	Y+6, r25	; 0x06
    4538:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    453a:	8d 81       	ldd	r24, Y+5	; 0x05
    453c:	9e 81       	ldd	r25, Y+6	; 0x06
    453e:	00 97       	sbiw	r24, 0x00	; 0
    4540:	69 f7       	brne	.-38     	; 0x451c <LCD_enuInit+0x670>
    4542:	14 c0       	rjmp	.+40     	; 0x456c <LCD_enuInit+0x6c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4544:	6f 81       	ldd	r22, Y+7	; 0x07
    4546:	78 85       	ldd	r23, Y+8	; 0x08
    4548:	89 85       	ldd	r24, Y+9	; 0x09
    454a:	9a 85       	ldd	r25, Y+10	; 0x0a
    454c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4550:	dc 01       	movw	r26, r24
    4552:	cb 01       	movw	r24, r22
    4554:	9e 83       	std	Y+6, r25	; 0x06
    4556:	8d 83       	std	Y+5, r24	; 0x05
    4558:	8d 81       	ldd	r24, Y+5	; 0x05
    455a:	9e 81       	ldd	r25, Y+6	; 0x06
    455c:	9a 83       	std	Y+2, r25	; 0x02
    455e:	89 83       	std	Y+1, r24	; 0x01
    4560:	89 81       	ldd	r24, Y+1	; 0x01
    4562:	9a 81       	ldd	r25, Y+2	; 0x02
    4564:	01 97       	sbiw	r24, 0x01	; 1
    4566:	f1 f7       	brne	.-4      	; 0x4564 <LCD_enuInit+0x6b8>
    4568:	9a 83       	std	Y+2, r25	; 0x02
    456a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Entry Set*/
	LCD_enuLatch((0x04)|(ID_INCREMENT_MODE<<1)|(SH_SHIFT_MODE<<0));
    456c:	86 e0       	ldi	r24, 0x06	; 6
    456e:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <LCD_enuLatch>
	return Local_u8ErrorState;
    4572:	fe 01       	movw	r30, r28
    4574:	eb 5a       	subi	r30, 0xAB	; 171
    4576:	ff 4f       	sbci	r31, 0xFF	; 255
    4578:	80 81       	ld	r24, Z
}
    457a:	cb 5a       	subi	r28, 0xAB	; 171
    457c:	df 4f       	sbci	r29, 0xFF	; 255
    457e:	0f b6       	in	r0, 0x3f	; 63
    4580:	f8 94       	cli
    4582:	de bf       	out	0x3e, r29	; 62
    4584:	0f be       	out	0x3f, r0	; 63
    4586:	cd bf       	out	0x3d, r28	; 61
    4588:	cf 91       	pop	r28
    458a:	df 91       	pop	r29
    458c:	1f 91       	pop	r17
    458e:	0f 91       	pop	r16
    4590:	08 95       	ret

00004592 <LCD_enuWriteCommand>:
ES_t LCD_enuWriteCommand(u8 Copy_u8Command)
{
    4592:	df 93       	push	r29
    4594:	cf 93       	push	r28
    4596:	00 d0       	rcall	.+0      	; 0x4598 <LCD_enuWriteCommand+0x6>
    4598:	cd b7       	in	r28, 0x3d	; 61
    459a:	de b7       	in	r29, 0x3e	; 62
    459c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = ES_NOK;
    459e:	19 82       	std	Y+1, r1	; 0x01
	M_DIO_enuSetPinValue(LCD_CTRL_RS_PORT,LCD_CTRL_RS_PIN,DIO_State_Low);
    45a0:	81 e0       	ldi	r24, 0x01	; 1
    45a2:	61 e0       	ldi	r22, 0x01	; 1
    45a4:	40 e0       	ldi	r20, 0x00	; 0
    45a6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(LCD_CTRL_RW_PORT,LCD_CTRL_RW_PIN,DIO_State_Low);
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	62 e0       	ldi	r22, 0x02	; 2
    45ae:	40 e0       	ldi	r20, 0x00	; 0
    45b0:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(LCD_CTRL_EN_PORT,LCD_CTRL_EN_PIN,DIO_State_Low);
    45b4:	81 e0       	ldi	r24, 0x01	; 1
    45b6:	63 e0       	ldi	r22, 0x03	; 3
    45b8:	40 e0       	ldi	r20, 0x00	; 0
    45ba:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	LCD_enuLatch(Copy_u8Command);
    45be:	8a 81       	ldd	r24, Y+2	; 0x02
    45c0:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <LCD_enuLatch>
	Local_u8ErrorState = ES_OK;
    45c4:	81 e0       	ldi	r24, 0x01	; 1
    45c6:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    45c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    45ca:	0f 90       	pop	r0
    45cc:	0f 90       	pop	r0
    45ce:	cf 91       	pop	r28
    45d0:	df 91       	pop	r29
    45d2:	08 95       	ret

000045d4 <LCD_enuWriteData>:
ES_t LCD_enuWriteData(u8 Copy_u8Data)
{
    45d4:	df 93       	push	r29
    45d6:	cf 93       	push	r28
    45d8:	00 d0       	rcall	.+0      	; 0x45da <LCD_enuWriteData+0x6>
    45da:	cd b7       	in	r28, 0x3d	; 61
    45dc:	de b7       	in	r29, 0x3e	; 62
    45de:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = ES_NOK;
    45e0:	19 82       	std	Y+1, r1	; 0x01
	M_DIO_enuSetPinValue(LCD_CTRL_RS_PORT,LCD_CTRL_RS_PIN,DIO_State_High);
    45e2:	81 e0       	ldi	r24, 0x01	; 1
    45e4:	61 e0       	ldi	r22, 0x01	; 1
    45e6:	41 e0       	ldi	r20, 0x01	; 1
    45e8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(LCD_CTRL_RW_PORT,LCD_CTRL_RW_PIN,DIO_State_Low);
    45ec:	81 e0       	ldi	r24, 0x01	; 1
    45ee:	62 e0       	ldi	r22, 0x02	; 2
    45f0:	40 e0       	ldi	r20, 0x00	; 0
    45f2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(LCD_CTRL_EN_PORT,LCD_CTRL_EN_PIN,DIO_State_Low);
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	63 e0       	ldi	r22, 0x03	; 3
    45fa:	40 e0       	ldi	r20, 0x00	; 0
    45fc:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	LCD_enuLatch(Copy_u8Data);
    4600:	8a 81       	ldd	r24, Y+2	; 0x02
    4602:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <LCD_enuLatch>
	Local_u8ErrorState = ES_OK;
    4606:	81 e0       	ldi	r24, 0x01	; 1
    4608:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    460a:	89 81       	ldd	r24, Y+1	; 0x01
}
    460c:	0f 90       	pop	r0
    460e:	0f 90       	pop	r0
    4610:	cf 91       	pop	r28
    4612:	df 91       	pop	r29
    4614:	08 95       	ret

00004616 <LCD_enuWriteString>:
ES_t LCD_enuWriteString(u8 *Copy_pu8String)
{
    4616:	df 93       	push	r29
    4618:	cf 93       	push	r28
    461a:	00 d0       	rcall	.+0      	; 0x461c <LCD_enuWriteString+0x6>
    461c:	00 d0       	rcall	.+0      	; 0x461e <LCD_enuWriteString+0x8>
    461e:	cd b7       	in	r28, 0x3d	; 61
    4620:	de b7       	in	r29, 0x3e	; 62
    4622:	9c 83       	std	Y+4, r25	; 0x04
    4624:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = ES_NOK;
    4626:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pu8String != NULL)
    4628:	8b 81       	ldd	r24, Y+3	; 0x03
    462a:	9c 81       	ldd	r25, Y+4	; 0x04
    462c:	00 97       	sbiw	r24, 0x00	; 0
    462e:	f9 f0       	breq	.+62     	; 0x466e <LCD_enuWriteString+0x58>
	{
		u8 Local_u8iter = 0;
    4630:	19 82       	std	Y+1, r1	; 0x01
    4632:	0f c0       	rjmp	.+30     	; 0x4652 <LCD_enuWriteString+0x3c>
		while(Copy_pu8String[Local_u8iter] != '\0')
		{
			LCD_enuWriteData(Copy_pu8String[Local_u8iter++]);
    4634:	89 81       	ldd	r24, Y+1	; 0x01
    4636:	28 2f       	mov	r18, r24
    4638:	30 e0       	ldi	r19, 0x00	; 0
    463a:	8b 81       	ldd	r24, Y+3	; 0x03
    463c:	9c 81       	ldd	r25, Y+4	; 0x04
    463e:	fc 01       	movw	r30, r24
    4640:	e2 0f       	add	r30, r18
    4642:	f3 1f       	adc	r31, r19
    4644:	90 81       	ld	r25, Z
    4646:	89 81       	ldd	r24, Y+1	; 0x01
    4648:	8f 5f       	subi	r24, 0xFF	; 255
    464a:	89 83       	std	Y+1, r24	; 0x01
    464c:	89 2f       	mov	r24, r25
    464e:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
{
	u8 Local_u8ErrorState = ES_NOK;
	if(Copy_pu8String != NULL)
	{
		u8 Local_u8iter = 0;
		while(Copy_pu8String[Local_u8iter] != '\0')
    4652:	89 81       	ldd	r24, Y+1	; 0x01
    4654:	28 2f       	mov	r18, r24
    4656:	30 e0       	ldi	r19, 0x00	; 0
    4658:	8b 81       	ldd	r24, Y+3	; 0x03
    465a:	9c 81       	ldd	r25, Y+4	; 0x04
    465c:	fc 01       	movw	r30, r24
    465e:	e2 0f       	add	r30, r18
    4660:	f3 1f       	adc	r31, r19
    4662:	80 81       	ld	r24, Z
    4664:	88 23       	and	r24, r24
    4666:	31 f7       	brne	.-52     	; 0x4634 <LCD_enuWriteString+0x1e>
		{
			LCD_enuWriteData(Copy_pu8String[Local_u8iter++]);
		}
		Local_u8ErrorState = ES_OK;
    4668:	81 e0       	ldi	r24, 0x01	; 1
    466a:	8a 83       	std	Y+2, r24	; 0x02
    466c:	02 c0       	rjmp	.+4      	; 0x4672 <LCD_enuWriteString+0x5c>
	}else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
    466e:	83 e0       	ldi	r24, 0x03	; 3
    4670:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    4672:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4674:	0f 90       	pop	r0
    4676:	0f 90       	pop	r0
    4678:	0f 90       	pop	r0
    467a:	0f 90       	pop	r0
    467c:	cf 91       	pop	r28
    467e:	df 91       	pop	r29
    4680:	08 95       	ret

00004682 <LCD_enuWriteIntegerNum>:
ES_t LCD_enuWriteIntegerNum(s32 Copy_s32IntegerNum)
{
    4682:	df 93       	push	r29
    4684:	cf 93       	push	r28
    4686:	cd b7       	in	r28, 0x3d	; 61
    4688:	de b7       	in	r29, 0x3e	; 62
    468a:	2e 97       	sbiw	r28, 0x0e	; 14
    468c:	0f b6       	in	r0, 0x3f	; 63
    468e:	f8 94       	cli
    4690:	de bf       	out	0x3e, r29	; 62
    4692:	0f be       	out	0x3f, r0	; 63
    4694:	cd bf       	out	0x3d, r28	; 61
    4696:	6b 87       	std	Y+11, r22	; 0x0b
    4698:	7c 87       	std	Y+12, r23	; 0x0c
    469a:	8d 87       	std	Y+13, r24	; 0x0d
    469c:	9e 87       	std	Y+14, r25	; 0x0e
	u8 Local_u8ErrorState = ES_NOK;
    469e:	1a 86       	std	Y+10, r1	; 0x0a
	if(Copy_s32IntegerNum == 0)
    46a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    46a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    46a4:	ad 85       	ldd	r26, Y+13	; 0x0d
    46a6:	be 85       	ldd	r27, Y+14	; 0x0e
    46a8:	00 97       	sbiw	r24, 0x00	; 0
    46aa:	a1 05       	cpc	r26, r1
    46ac:	b1 05       	cpc	r27, r1
    46ae:	31 f4       	brne	.+12     	; 0x46bc <LCD_enuWriteIntegerNum+0x3a>
	{
		LCD_enuWriteData('0');
    46b0:	80 e3       	ldi	r24, 0x30	; 48
    46b2:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
		Local_u8ErrorState = ES_OK;
    46b6:	81 e0       	ldi	r24, 0x01	; 1
    46b8:	8a 87       	std	Y+10, r24	; 0x0a
    46ba:	9e c0       	rjmp	.+316    	; 0x47f8 <LCD_enuWriteIntegerNum+0x176>
	}else
	{
		if(Copy_s32IntegerNum<0)
    46bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    46be:	9c 85       	ldd	r25, Y+12	; 0x0c
    46c0:	ad 85       	ldd	r26, Y+13	; 0x0d
    46c2:	be 85       	ldd	r27, Y+14	; 0x0e
    46c4:	bb 23       	and	r27, r27
    46c6:	94 f4       	brge	.+36     	; 0x46ec <LCD_enuWriteIntegerNum+0x6a>
		{
			LCD_enuWriteData('-');
    46c8:	8d e2       	ldi	r24, 0x2D	; 45
    46ca:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
			Copy_s32IntegerNum *= (-1);
    46ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    46d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    46d2:	ad 85       	ldd	r26, Y+13	; 0x0d
    46d4:	be 85       	ldd	r27, Y+14	; 0x0e
    46d6:	b0 95       	com	r27
    46d8:	a0 95       	com	r26
    46da:	90 95       	com	r25
    46dc:	81 95       	neg	r24
    46de:	9f 4f       	sbci	r25, 0xFF	; 255
    46e0:	af 4f       	sbci	r26, 0xFF	; 255
    46e2:	bf 4f       	sbci	r27, 0xFF	; 255
    46e4:	8b 87       	std	Y+11, r24	; 0x0b
    46e6:	9c 87       	std	Y+12, r25	; 0x0c
    46e8:	ad 87       	std	Y+13, r26	; 0x0d
    46ea:	be 87       	std	Y+14, r27	; 0x0e
		}
		u32 Local_u32Num = 0,Local_u32DecimalUnit=10;
    46ec:	1e 82       	std	Y+6, r1	; 0x06
    46ee:	1f 82       	std	Y+7, r1	; 0x07
    46f0:	18 86       	std	Y+8, r1	; 0x08
    46f2:	19 86       	std	Y+9, r1	; 0x09
    46f4:	8a e0       	ldi	r24, 0x0A	; 10
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	a0 e0       	ldi	r26, 0x00	; 0
    46fa:	b0 e0       	ldi	r27, 0x00	; 0
    46fc:	8a 83       	std	Y+2, r24	; 0x02
    46fe:	9b 83       	std	Y+3, r25	; 0x03
    4700:	ac 83       	std	Y+4, r26	; 0x04
    4702:	bd 83       	std	Y+5, r27	; 0x05
		u8 Local_u8Digits=0;
    4704:	19 82       	std	Y+1, r1	; 0x01
    4706:	43 c0       	rjmp	.+134    	; 0x478e <LCD_enuWriteIntegerNum+0x10c>
		while(Copy_s32IntegerNum)
		{
			Local_u8Digits++;
    4708:	89 81       	ldd	r24, Y+1	; 0x01
    470a:	8f 5f       	subi	r24, 0xFF	; 255
    470c:	89 83       	std	Y+1, r24	; 0x01
						Local_u32Num *= Local_u32DecimalUnit;
    470e:	8e 81       	ldd	r24, Y+6	; 0x06
    4710:	9f 81       	ldd	r25, Y+7	; 0x07
    4712:	a8 85       	ldd	r26, Y+8	; 0x08
    4714:	b9 85       	ldd	r27, Y+9	; 0x09
    4716:	2a 81       	ldd	r18, Y+2	; 0x02
    4718:	3b 81       	ldd	r19, Y+3	; 0x03
    471a:	4c 81       	ldd	r20, Y+4	; 0x04
    471c:	5d 81       	ldd	r21, Y+5	; 0x05
    471e:	bc 01       	movw	r22, r24
    4720:	cd 01       	movw	r24, r26
    4722:	0e 94 57 33 	call	0x66ae	; 0x66ae <__mulsi3>
    4726:	dc 01       	movw	r26, r24
    4728:	cb 01       	movw	r24, r22
    472a:	8e 83       	std	Y+6, r24	; 0x06
    472c:	9f 83       	std	Y+7, r25	; 0x07
    472e:	a8 87       	std	Y+8, r26	; 0x08
    4730:	b9 87       	std	Y+9, r27	; 0x09

			Local_u32Num += (Copy_s32IntegerNum%10) ;
    4732:	8b 85       	ldd	r24, Y+11	; 0x0b
    4734:	9c 85       	ldd	r25, Y+12	; 0x0c
    4736:	ad 85       	ldd	r26, Y+13	; 0x0d
    4738:	be 85       	ldd	r27, Y+14	; 0x0e
    473a:	2a e0       	ldi	r18, 0x0A	; 10
    473c:	30 e0       	ldi	r19, 0x00	; 0
    473e:	40 e0       	ldi	r20, 0x00	; 0
    4740:	50 e0       	ldi	r21, 0x00	; 0
    4742:	bc 01       	movw	r22, r24
    4744:	cd 01       	movw	r24, r26
    4746:	0e 94 98 33 	call	0x6730	; 0x6730 <__divmodsi4>
    474a:	dc 01       	movw	r26, r24
    474c:	cb 01       	movw	r24, r22
    474e:	9c 01       	movw	r18, r24
    4750:	ad 01       	movw	r20, r26
    4752:	8e 81       	ldd	r24, Y+6	; 0x06
    4754:	9f 81       	ldd	r25, Y+7	; 0x07
    4756:	a8 85       	ldd	r26, Y+8	; 0x08
    4758:	b9 85       	ldd	r27, Y+9	; 0x09
    475a:	82 0f       	add	r24, r18
    475c:	93 1f       	adc	r25, r19
    475e:	a4 1f       	adc	r26, r20
    4760:	b5 1f       	adc	r27, r21
    4762:	8e 83       	std	Y+6, r24	; 0x06
    4764:	9f 83       	std	Y+7, r25	; 0x07
    4766:	a8 87       	std	Y+8, r26	; 0x08
    4768:	b9 87       	std	Y+9, r27	; 0x09
			Copy_s32IntegerNum /= 10;
    476a:	8b 85       	ldd	r24, Y+11	; 0x0b
    476c:	9c 85       	ldd	r25, Y+12	; 0x0c
    476e:	ad 85       	ldd	r26, Y+13	; 0x0d
    4770:	be 85       	ldd	r27, Y+14	; 0x0e
    4772:	2a e0       	ldi	r18, 0x0A	; 10
    4774:	30 e0       	ldi	r19, 0x00	; 0
    4776:	40 e0       	ldi	r20, 0x00	; 0
    4778:	50 e0       	ldi	r21, 0x00	; 0
    477a:	bc 01       	movw	r22, r24
    477c:	cd 01       	movw	r24, r26
    477e:	0e 94 98 33 	call	0x6730	; 0x6730 <__divmodsi4>
    4782:	da 01       	movw	r26, r20
    4784:	c9 01       	movw	r24, r18
    4786:	8b 87       	std	Y+11, r24	; 0x0b
    4788:	9c 87       	std	Y+12, r25	; 0x0c
    478a:	ad 87       	std	Y+13, r26	; 0x0d
    478c:	be 87       	std	Y+14, r27	; 0x0e
			LCD_enuWriteData('-');
			Copy_s32IntegerNum *= (-1);
		}
		u32 Local_u32Num = 0,Local_u32DecimalUnit=10;
		u8 Local_u8Digits=0;
		while(Copy_s32IntegerNum)
    478e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4790:	9c 85       	ldd	r25, Y+12	; 0x0c
    4792:	ad 85       	ldd	r26, Y+13	; 0x0d
    4794:	be 85       	ldd	r27, Y+14	; 0x0e
    4796:	00 97       	sbiw	r24, 0x00	; 0
    4798:	a1 05       	cpc	r26, r1
    479a:	b1 05       	cpc	r27, r1
    479c:	09 f0       	breq	.+2      	; 0x47a0 <LCD_enuWriteIntegerNum+0x11e>
    479e:	b4 cf       	rjmp	.-152    	; 0x4708 <LCD_enuWriteIntegerNum+0x86>
    47a0:	26 c0       	rjmp	.+76     	; 0x47ee <LCD_enuWriteIntegerNum+0x16c>
			Copy_s32IntegerNum /= 10;

		}
		while(Local_u8Digits)
		{
			LCD_enuWriteData((Local_u32Num%10)+'0');
    47a2:	8e 81       	ldd	r24, Y+6	; 0x06
    47a4:	9f 81       	ldd	r25, Y+7	; 0x07
    47a6:	a8 85       	ldd	r26, Y+8	; 0x08
    47a8:	b9 85       	ldd	r27, Y+9	; 0x09
    47aa:	2a e0       	ldi	r18, 0x0A	; 10
    47ac:	30 e0       	ldi	r19, 0x00	; 0
    47ae:	40 e0       	ldi	r20, 0x00	; 0
    47b0:	50 e0       	ldi	r21, 0x00	; 0
    47b2:	bc 01       	movw	r22, r24
    47b4:	cd 01       	movw	r24, r26
    47b6:	0e 94 76 33 	call	0x66ec	; 0x66ec <__udivmodsi4>
    47ba:	dc 01       	movw	r26, r24
    47bc:	cb 01       	movw	r24, r22
    47be:	80 5d       	subi	r24, 0xD0	; 208
    47c0:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
			Local_u32Num /=10;
    47c4:	8e 81       	ldd	r24, Y+6	; 0x06
    47c6:	9f 81       	ldd	r25, Y+7	; 0x07
    47c8:	a8 85       	ldd	r26, Y+8	; 0x08
    47ca:	b9 85       	ldd	r27, Y+9	; 0x09
    47cc:	2a e0       	ldi	r18, 0x0A	; 10
    47ce:	30 e0       	ldi	r19, 0x00	; 0
    47d0:	40 e0       	ldi	r20, 0x00	; 0
    47d2:	50 e0       	ldi	r21, 0x00	; 0
    47d4:	bc 01       	movw	r22, r24
    47d6:	cd 01       	movw	r24, r26
    47d8:	0e 94 76 33 	call	0x66ec	; 0x66ec <__udivmodsi4>
    47dc:	da 01       	movw	r26, r20
    47de:	c9 01       	movw	r24, r18
    47e0:	8e 83       	std	Y+6, r24	; 0x06
    47e2:	9f 83       	std	Y+7, r25	; 0x07
    47e4:	a8 87       	std	Y+8, r26	; 0x08
    47e6:	b9 87       	std	Y+9, r27	; 0x09
			Local_u8Digits--;
    47e8:	89 81       	ldd	r24, Y+1	; 0x01
    47ea:	81 50       	subi	r24, 0x01	; 1
    47ec:	89 83       	std	Y+1, r24	; 0x01

			Local_u32Num += (Copy_s32IntegerNum%10) ;
			Copy_s32IntegerNum /= 10;

		}
		while(Local_u8Digits)
    47ee:	89 81       	ldd	r24, Y+1	; 0x01
    47f0:	88 23       	and	r24, r24
    47f2:	b9 f6       	brne	.-82     	; 0x47a2 <LCD_enuWriteIntegerNum+0x120>
		{
			LCD_enuWriteData((Local_u32Num%10)+'0');
			Local_u32Num /=10;
			Local_u8Digits--;
		}
		Local_u8ErrorState = ES_OK;
    47f4:	81 e0       	ldi	r24, 0x01	; 1
    47f6:	8a 87       	std	Y+10, r24	; 0x0a
	}
	return Local_u8ErrorState;
    47f8:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    47fa:	2e 96       	adiw	r28, 0x0e	; 14
    47fc:	0f b6       	in	r0, 0x3f	; 63
    47fe:	f8 94       	cli
    4800:	de bf       	out	0x3e, r29	; 62
    4802:	0f be       	out	0x3f, r0	; 63
    4804:	cd bf       	out	0x3d, r28	; 61
    4806:	cf 91       	pop	r28
    4808:	df 91       	pop	r29
    480a:	08 95       	ret

0000480c <LCD_enuWriteFloatNum>:
ES_t LCD_enuWriteFloatNum(f32 Copy_f32FloatNum)
{
    480c:	df 93       	push	r29
    480e:	cf 93       	push	r28
    4810:	cd b7       	in	r28, 0x3d	; 61
    4812:	de b7       	in	r29, 0x3e	; 62
    4814:	29 97       	sbiw	r28, 0x09	; 9
    4816:	0f b6       	in	r0, 0x3f	; 63
    4818:	f8 94       	cli
    481a:	de bf       	out	0x3e, r29	; 62
    481c:	0f be       	out	0x3f, r0	; 63
    481e:	cd bf       	out	0x3d, r28	; 61
    4820:	6e 83       	std	Y+6, r22	; 0x06
    4822:	7f 83       	std	Y+7, r23	; 0x07
    4824:	88 87       	std	Y+8, r24	; 0x08
    4826:	99 87       	std	Y+9, r25	; 0x09
	u8 Local_u8ErrorState = ES_NOK;
    4828:	1d 82       	std	Y+5, r1	; 0x05
	if(Copy_f32FloatNum == 0)
    482a:	6e 81       	ldd	r22, Y+6	; 0x06
    482c:	7f 81       	ldd	r23, Y+7	; 0x07
    482e:	88 85       	ldd	r24, Y+8	; 0x08
    4830:	99 85       	ldd	r25, Y+9	; 0x09
    4832:	20 e0       	ldi	r18, 0x00	; 0
    4834:	30 e0       	ldi	r19, 0x00	; 0
    4836:	40 e0       	ldi	r20, 0x00	; 0
    4838:	50 e0       	ldi	r21, 0x00	; 0
    483a:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    483e:	88 23       	and	r24, r24
    4840:	31 f4       	brne	.+12     	; 0x484e <LCD_enuWriteFloatNum+0x42>
	{
		LCD_enuWriteData('0');
    4842:	80 e3       	ldi	r24, 0x30	; 48
    4844:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
		Local_u8ErrorState = ES_OK;
    4848:	81 e0       	ldi	r24, 0x01	; 1
    484a:	8d 83       	std	Y+5, r24	; 0x05
    484c:	76 c0       	rjmp	.+236    	; 0x493a <LCD_enuWriteFloatNum+0x12e>
	}else
	{
		s32 Local_s32DecimalVal = Copy_f32FloatNum;
    484e:	6e 81       	ldd	r22, Y+6	; 0x06
    4850:	7f 81       	ldd	r23, Y+7	; 0x07
    4852:	88 85       	ldd	r24, Y+8	; 0x08
    4854:	99 85       	ldd	r25, Y+9	; 0x09
    4856:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    485a:	dc 01       	movw	r26, r24
    485c:	cb 01       	movw	r24, r22
    485e:	89 83       	std	Y+1, r24	; 0x01
    4860:	9a 83       	std	Y+2, r25	; 0x02
    4862:	ab 83       	std	Y+3, r26	; 0x03
    4864:	bc 83       	std	Y+4, r27	; 0x04
		LCD_enuWriteIntegerNum(Local_s32DecimalVal);
    4866:	89 81       	ldd	r24, Y+1	; 0x01
    4868:	9a 81       	ldd	r25, Y+2	; 0x02
    486a:	ab 81       	ldd	r26, Y+3	; 0x03
    486c:	bc 81       	ldd	r27, Y+4	; 0x04
    486e:	bc 01       	movw	r22, r24
    4870:	cd 01       	movw	r24, r26
    4872:	0e 94 41 23 	call	0x4682	; 0x4682 <LCD_enuWriteIntegerNum>
		LCD_enuWriteData('.');
    4876:	8e e2       	ldi	r24, 0x2E	; 46
    4878:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
		Copy_f32FloatNum -= Local_s32DecimalVal;
    487c:	69 81       	ldd	r22, Y+1	; 0x01
    487e:	7a 81       	ldd	r23, Y+2	; 0x02
    4880:	8b 81       	ldd	r24, Y+3	; 0x03
    4882:	9c 81       	ldd	r25, Y+4	; 0x04
    4884:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4888:	9b 01       	movw	r18, r22
    488a:	ac 01       	movw	r20, r24
    488c:	6e 81       	ldd	r22, Y+6	; 0x06
    488e:	7f 81       	ldd	r23, Y+7	; 0x07
    4890:	88 85       	ldd	r24, Y+8	; 0x08
    4892:	99 85       	ldd	r25, Y+9	; 0x09
    4894:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4898:	dc 01       	movw	r26, r24
    489a:	cb 01       	movw	r24, r22
    489c:	8e 83       	std	Y+6, r24	; 0x06
    489e:	9f 83       	std	Y+7, r25	; 0x07
    48a0:	a8 87       	std	Y+8, r26	; 0x08
    48a2:	b9 87       	std	Y+9, r27	; 0x09
		Copy_f32FloatNum *= 1000000;
    48a4:	6e 81       	ldd	r22, Y+6	; 0x06
    48a6:	7f 81       	ldd	r23, Y+7	; 0x07
    48a8:	88 85       	ldd	r24, Y+8	; 0x08
    48aa:	99 85       	ldd	r25, Y+9	; 0x09
    48ac:	20 e0       	ldi	r18, 0x00	; 0
    48ae:	34 e2       	ldi	r19, 0x24	; 36
    48b0:	44 e7       	ldi	r20, 0x74	; 116
    48b2:	59 e4       	ldi	r21, 0x49	; 73
    48b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48b8:	dc 01       	movw	r26, r24
    48ba:	cb 01       	movw	r24, r22
    48bc:	8e 83       	std	Y+6, r24	; 0x06
    48be:	9f 83       	std	Y+7, r25	; 0x07
    48c0:	a8 87       	std	Y+8, r26	; 0x08
    48c2:	b9 87       	std	Y+9, r27	; 0x09
		Local_s32DecimalVal = Copy_f32FloatNum;
    48c4:	6e 81       	ldd	r22, Y+6	; 0x06
    48c6:	7f 81       	ldd	r23, Y+7	; 0x07
    48c8:	88 85       	ldd	r24, Y+8	; 0x08
    48ca:	99 85       	ldd	r25, Y+9	; 0x09
    48cc:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    48d0:	dc 01       	movw	r26, r24
    48d2:	cb 01       	movw	r24, r22
    48d4:	89 83       	std	Y+1, r24	; 0x01
    48d6:	9a 83       	std	Y+2, r25	; 0x02
    48d8:	ab 83       	std	Y+3, r26	; 0x03
    48da:	bc 83       	std	Y+4, r27	; 0x04
    48dc:	12 c0       	rjmp	.+36     	; 0x4902 <LCD_enuWriteFloatNum+0xf6>
		while((Local_s32DecimalVal%10 == 0))
		{
			Local_s32DecimalVal /=10;
    48de:	89 81       	ldd	r24, Y+1	; 0x01
    48e0:	9a 81       	ldd	r25, Y+2	; 0x02
    48e2:	ab 81       	ldd	r26, Y+3	; 0x03
    48e4:	bc 81       	ldd	r27, Y+4	; 0x04
    48e6:	2a e0       	ldi	r18, 0x0A	; 10
    48e8:	30 e0       	ldi	r19, 0x00	; 0
    48ea:	40 e0       	ldi	r20, 0x00	; 0
    48ec:	50 e0       	ldi	r21, 0x00	; 0
    48ee:	bc 01       	movw	r22, r24
    48f0:	cd 01       	movw	r24, r26
    48f2:	0e 94 98 33 	call	0x6730	; 0x6730 <__divmodsi4>
    48f6:	da 01       	movw	r26, r20
    48f8:	c9 01       	movw	r24, r18
    48fa:	89 83       	std	Y+1, r24	; 0x01
    48fc:	9a 83       	std	Y+2, r25	; 0x02
    48fe:	ab 83       	std	Y+3, r26	; 0x03
    4900:	bc 83       	std	Y+4, r27	; 0x04
		LCD_enuWriteIntegerNum(Local_s32DecimalVal);
		LCD_enuWriteData('.');
		Copy_f32FloatNum -= Local_s32DecimalVal;
		Copy_f32FloatNum *= 1000000;
		Local_s32DecimalVal = Copy_f32FloatNum;
		while((Local_s32DecimalVal%10 == 0))
    4902:	89 81       	ldd	r24, Y+1	; 0x01
    4904:	9a 81       	ldd	r25, Y+2	; 0x02
    4906:	ab 81       	ldd	r26, Y+3	; 0x03
    4908:	bc 81       	ldd	r27, Y+4	; 0x04
    490a:	2a e0       	ldi	r18, 0x0A	; 10
    490c:	30 e0       	ldi	r19, 0x00	; 0
    490e:	40 e0       	ldi	r20, 0x00	; 0
    4910:	50 e0       	ldi	r21, 0x00	; 0
    4912:	bc 01       	movw	r22, r24
    4914:	cd 01       	movw	r24, r26
    4916:	0e 94 98 33 	call	0x6730	; 0x6730 <__divmodsi4>
    491a:	dc 01       	movw	r26, r24
    491c:	cb 01       	movw	r24, r22
    491e:	00 97       	sbiw	r24, 0x00	; 0
    4920:	a1 05       	cpc	r26, r1
    4922:	b1 05       	cpc	r27, r1
    4924:	e1 f2       	breq	.-72     	; 0x48de <LCD_enuWriteFloatNum+0xd2>
		{
			Local_s32DecimalVal /=10;
		}
		LCD_enuWriteIntegerNum(Local_s32DecimalVal);
    4926:	89 81       	ldd	r24, Y+1	; 0x01
    4928:	9a 81       	ldd	r25, Y+2	; 0x02
    492a:	ab 81       	ldd	r26, Y+3	; 0x03
    492c:	bc 81       	ldd	r27, Y+4	; 0x04
    492e:	bc 01       	movw	r22, r24
    4930:	cd 01       	movw	r24, r26
    4932:	0e 94 41 23 	call	0x4682	; 0x4682 <LCD_enuWriteIntegerNum>
		
		Local_u8ErrorState = ES_OK;
    4936:	81 e0       	ldi	r24, 0x01	; 1
    4938:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_u8ErrorState;
    493a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    493c:	29 96       	adiw	r28, 0x09	; 9
    493e:	0f b6       	in	r0, 0x3f	; 63
    4940:	f8 94       	cli
    4942:	de bf       	out	0x3e, r29	; 62
    4944:	0f be       	out	0x3f, r0	; 63
    4946:	cd bf       	out	0x3d, r28	; 61
    4948:	cf 91       	pop	r28
    494a:	df 91       	pop	r29
    494c:	08 95       	ret

0000494e <LCD_enuGoToPosition>:
ES_t LCD_enuGoToPosition(u8 Copy_u8Row, u8 Copy_u8Column)
{
    494e:	df 93       	push	r29
    4950:	cf 93       	push	r28
    4952:	00 d0       	rcall	.+0      	; 0x4954 <LCD_enuGoToPosition+0x6>
    4954:	00 d0       	rcall	.+0      	; 0x4956 <LCD_enuGoToPosition+0x8>
    4956:	0f 92       	push	r0
    4958:	cd b7       	in	r28, 0x3d	; 61
    495a:	de b7       	in	r29, 0x3e	; 62
    495c:	8a 83       	std	Y+2, r24	; 0x02
    495e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = ES_NOK;
    4960:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Row<=2 && Copy_u8Column<=16)
    4962:	8a 81       	ldd	r24, Y+2	; 0x02
    4964:	83 30       	cpi	r24, 0x03	; 3
    4966:	20 f5       	brcc	.+72     	; 0x49b0 <LCD_enuGoToPosition+0x62>
    4968:	8b 81       	ldd	r24, Y+3	; 0x03
    496a:	81 31       	cpi	r24, 0x11	; 17
    496c:	08 f5       	brcc	.+66     	; 0x49b0 <LCD_enuGoToPosition+0x62>
	{
		switch(Copy_u8Row)
    496e:	8a 81       	ldd	r24, Y+2	; 0x02
    4970:	28 2f       	mov	r18, r24
    4972:	30 e0       	ldi	r19, 0x00	; 0
    4974:	3d 83       	std	Y+5, r19	; 0x05
    4976:	2c 83       	std	Y+4, r18	; 0x04
    4978:	8c 81       	ldd	r24, Y+4	; 0x04
    497a:	9d 81       	ldd	r25, Y+5	; 0x05
    497c:	81 30       	cpi	r24, 0x01	; 1
    497e:	91 05       	cpc	r25, r1
    4980:	31 f0       	breq	.+12     	; 0x498e <LCD_enuGoToPosition+0x40>
    4982:	2c 81       	ldd	r18, Y+4	; 0x04
    4984:	3d 81       	ldd	r19, Y+5	; 0x05
    4986:	22 30       	cpi	r18, 0x02	; 2
    4988:	31 05       	cpc	r19, r1
    498a:	41 f0       	breq	.+16     	; 0x499c <LCD_enuGoToPosition+0x4e>
    498c:	0e c0       	rjmp	.+28     	; 0x49aa <LCD_enuGoToPosition+0x5c>
		{
			case  1 :
			LCD_enuWriteCommand((0x80)+Copy_u8Column-1);
    498e:	8b 81       	ldd	r24, Y+3	; 0x03
    4990:	81 58       	subi	r24, 0x81	; 129
    4992:	0e 94 c9 22 	call	0x4592	; 0x4592 <LCD_enuWriteCommand>
			Local_u8ErrorState = ES_OK;
    4996:	81 e0       	ldi	r24, 0x01	; 1
    4998:	89 83       	std	Y+1, r24	; 0x01
    499a:	0c c0       	rjmp	.+24     	; 0x49b4 <LCD_enuGoToPosition+0x66>
			break;
			case 2 :
			LCD_enuWriteCommand((0xC0)+Copy_u8Column-1);
    499c:	8b 81       	ldd	r24, Y+3	; 0x03
    499e:	81 54       	subi	r24, 0x41	; 65
    49a0:	0e 94 c9 22 	call	0x4592	; 0x4592 <LCD_enuWriteCommand>
			Local_u8ErrorState = ES_OK;
    49a4:	81 e0       	ldi	r24, 0x01	; 1
    49a6:	89 83       	std	Y+1, r24	; 0x01
    49a8:	05 c0       	rjmp	.+10     	; 0x49b4 <LCD_enuGoToPosition+0x66>
			break;
			default:
			Local_u8ErrorState = ES_OUT_OF_RANGE;
    49aa:	82 e0       	ldi	r24, 0x02	; 2
    49ac:	89 83       	std	Y+1, r24	; 0x01
    49ae:	02 c0       	rjmp	.+4      	; 0x49b4 <LCD_enuGoToPosition+0x66>
		}
	}
	else
	{
		Local_u8ErrorState = ES_OUT_OF_RANGE;
    49b0:	82 e0       	ldi	r24, 0x02	; 2
    49b2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    49b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    49b6:	0f 90       	pop	r0
    49b8:	0f 90       	pop	r0
    49ba:	0f 90       	pop	r0
    49bc:	0f 90       	pop	r0
    49be:	0f 90       	pop	r0
    49c0:	cf 91       	pop	r28
    49c2:	df 91       	pop	r29
    49c4:	08 95       	ret

000049c6 <LCD_enuCharacterGenerator>:
ES_t LCD_enuCharacterGenerator(u8 Pattern, const u8 *Copy_u8CustomCharacter)
{
    49c6:	df 93       	push	r29
    49c8:	cf 93       	push	r28
    49ca:	00 d0       	rcall	.+0      	; 0x49cc <LCD_enuCharacterGenerator+0x6>
    49cc:	00 d0       	rcall	.+0      	; 0x49ce <LCD_enuCharacterGenerator+0x8>
    49ce:	0f 92       	push	r0
    49d0:	cd b7       	in	r28, 0x3d	; 61
    49d2:	de b7       	in	r29, 0x3e	; 62
    49d4:	8b 83       	std	Y+3, r24	; 0x03
    49d6:	7d 83       	std	Y+5, r23	; 0x05
    49d8:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = ES_NOK;
    49da:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8CustomCharacter != NULL)
    49dc:	8c 81       	ldd	r24, Y+4	; 0x04
    49de:	9d 81       	ldd	r25, Y+5	; 0x05
    49e0:	00 97       	sbiw	r24, 0x00	; 0
    49e2:	01 f1       	breq	.+64     	; 0x4a24 <LCD_enuCharacterGenerator+0x5e>
	{
		LCD_enuWriteCommand((0x40)+(8*Pattern));
    49e4:	8b 81       	ldd	r24, Y+3	; 0x03
    49e6:	88 2f       	mov	r24, r24
    49e8:	90 e0       	ldi	r25, 0x00	; 0
    49ea:	08 96       	adiw	r24, 0x08	; 8
    49ec:	88 0f       	add	r24, r24
    49ee:	99 1f       	adc	r25, r25
    49f0:	88 0f       	add	r24, r24
    49f2:	99 1f       	adc	r25, r25
    49f4:	88 0f       	add	r24, r24
    49f6:	99 1f       	adc	r25, r25
    49f8:	0e 94 c9 22 	call	0x4592	; 0x4592 <LCD_enuWriteCommand>
		u8 Local_u8Iter = 0;
    49fc:	19 82       	std	Y+1, r1	; 0x01
    49fe:	0e c0       	rjmp	.+28     	; 0x4a1c <LCD_enuCharacterGenerator+0x56>
		for(;Local_u8Iter<8 ; Local_u8Iter++)
		{
			LCD_enuWriteData(Copy_u8CustomCharacter[Local_u8Iter]);
    4a00:	89 81       	ldd	r24, Y+1	; 0x01
    4a02:	28 2f       	mov	r18, r24
    4a04:	30 e0       	ldi	r19, 0x00	; 0
    4a06:	8c 81       	ldd	r24, Y+4	; 0x04
    4a08:	9d 81       	ldd	r25, Y+5	; 0x05
    4a0a:	fc 01       	movw	r30, r24
    4a0c:	e2 0f       	add	r30, r18
    4a0e:	f3 1f       	adc	r31, r19
    4a10:	80 81       	ld	r24, Z
    4a12:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
	u8 Local_u8ErrorState = ES_NOK;
	if(Copy_u8CustomCharacter != NULL)
	{
		LCD_enuWriteCommand((0x40)+(8*Pattern));
		u8 Local_u8Iter = 0;
		for(;Local_u8Iter<8 ; Local_u8Iter++)
    4a16:	89 81       	ldd	r24, Y+1	; 0x01
    4a18:	8f 5f       	subi	r24, 0xFF	; 255
    4a1a:	89 83       	std	Y+1, r24	; 0x01
    4a1c:	89 81       	ldd	r24, Y+1	; 0x01
    4a1e:	88 30       	cpi	r24, 0x08	; 8
    4a20:	78 f3       	brcs	.-34     	; 0x4a00 <LCD_enuCharacterGenerator+0x3a>
    4a22:	02 c0       	rjmp	.+4      	; 0x4a28 <LCD_enuCharacterGenerator+0x62>
		{
			LCD_enuWriteData(Copy_u8CustomCharacter[Local_u8Iter]);
		}
	}else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
    4a24:	83 e0       	ldi	r24, 0x03	; 3
    4a26:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    4a28:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4a2a:	0f 90       	pop	r0
    4a2c:	0f 90       	pop	r0
    4a2e:	0f 90       	pop	r0
    4a30:	0f 90       	pop	r0
    4a32:	0f 90       	pop	r0
    4a34:	cf 91       	pop	r28
    4a36:	df 91       	pop	r29
    4a38:	08 95       	ret

00004a3a <LCD_enuLatch>:

static ES_t LCD_enuLatch(u8 Copy_u8Latch)
{
    4a3a:	df 93       	push	r29
    4a3c:	cf 93       	push	r28
    4a3e:	cd b7       	in	r28, 0x3d	; 61
    4a40:	de b7       	in	r29, 0x3e	; 62
    4a42:	ea 97       	sbiw	r28, 0x3a	; 58
    4a44:	0f b6       	in	r0, 0x3f	; 63
    4a46:	f8 94       	cli
    4a48:	de bf       	out	0x3e, r29	; 62
    4a4a:	0f be       	out	0x3f, r0	; 63
    4a4c:	cd bf       	out	0x3d, r28	; 61
    4a4e:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_u8ErrorState = ES_NOK;
    4a50:	19 ae       	std	Y+57, r1	; 0x39
	//RW is grounded
	M_DIO_enuSetPinValue(LCD_CTRL_EN_PORT, LCD_CTRL_EN_PIN, DIO_State_Low);
    4a52:	81 e0       	ldi	r24, 0x01	; 1
    4a54:	63 e0       	ldi	r22, 0x03	; 3
    4a56:	40 e0       	ldi	r20, 0x00	; 0
    4a58:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(LCD_DATA_D3_PORT, LCD_DATA_D3_PIN, (Copy_u8Latch>>DIO_Pin3) & 1);
	M_DIO_enuSetPinValue(LCD_DATA_D2_PORT, LCD_DATA_D2_PIN, (Copy_u8Latch>>DIO_Pin2) & 1);
	M_DIO_enuSetPinValue(LCD_DATA_D1_PORT, LCD_DATA_D1_PIN, (Copy_u8Latch>>DIO_Pin1) & 1);
	M_DIO_enuSetPinValue(LCD_DATA_D0_PORT, LCD_DATA_D0_PIN, (Copy_u8Latch>>DIO_Pin0) & 1);*/
	#elif LCD_MODE == FOUR_BIT_MODE
	M_DIO_enuSetPinValue(LCD_DATA_D7_PORT, LCD_DATA_D7_PIN, ((Copy_u8Latch>>DIO_Pin7) & 1));
    4a5c:	8a ad       	ldd	r24, Y+58	; 0x3a
    4a5e:	98 2f       	mov	r25, r24
    4a60:	99 1f       	adc	r25, r25
    4a62:	99 27       	eor	r25, r25
    4a64:	99 1f       	adc	r25, r25
    4a66:	81 e0       	ldi	r24, 0x01	; 1
    4a68:	67 e0       	ldi	r22, 0x07	; 7
    4a6a:	49 2f       	mov	r20, r25
    4a6c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(LCD_DATA_D6_PORT, LCD_DATA_D6_PIN, ((Copy_u8Latch>>DIO_Pin6) & 1));
    4a70:	8a ad       	ldd	r24, Y+58	; 0x3a
    4a72:	82 95       	swap	r24
    4a74:	86 95       	lsr	r24
    4a76:	86 95       	lsr	r24
    4a78:	83 70       	andi	r24, 0x03	; 3
    4a7a:	98 2f       	mov	r25, r24
    4a7c:	91 70       	andi	r25, 0x01	; 1
    4a7e:	81 e0       	ldi	r24, 0x01	; 1
    4a80:	66 e0       	ldi	r22, 0x06	; 6
    4a82:	49 2f       	mov	r20, r25
    4a84:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(LCD_DATA_D5_PORT, LCD_DATA_D5_PIN, ((Copy_u8Latch>>DIO_Pin5) & 1));
    4a88:	8a ad       	ldd	r24, Y+58	; 0x3a
    4a8a:	82 95       	swap	r24
    4a8c:	86 95       	lsr	r24
    4a8e:	87 70       	andi	r24, 0x07	; 7
    4a90:	98 2f       	mov	r25, r24
    4a92:	91 70       	andi	r25, 0x01	; 1
    4a94:	81 e0       	ldi	r24, 0x01	; 1
    4a96:	65 e0       	ldi	r22, 0x05	; 5
    4a98:	49 2f       	mov	r20, r25
    4a9a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(LCD_DATA_D4_PORT, LCD_DATA_D4_PIN, ((Copy_u8Latch>>DIO_Pin4) & 1));
    4a9e:	8a ad       	ldd	r24, Y+58	; 0x3a
    4aa0:	82 95       	swap	r24
    4aa2:	8f 70       	andi	r24, 0x0F	; 15
    4aa4:	98 2f       	mov	r25, r24
    4aa6:	91 70       	andi	r25, 0x01	; 1
    4aa8:	81 e0       	ldi	r24, 0x01	; 1
    4aaa:	64 e0       	ldi	r22, 0x04	; 4
    4aac:	49 2f       	mov	r20, r25
    4aae:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	
	M_DIO_enuSetPinValue(LCD_CTRL_EN_PORT, LCD_CTRL_EN_PIN, DIO_State_High);
    4ab2:	81 e0       	ldi	r24, 0x01	; 1
    4ab4:	63 e0       	ldi	r22, 0x03	; 3
    4ab6:	41 e0       	ldi	r20, 0x01	; 1
    4ab8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
    4abc:	80 e0       	ldi	r24, 0x00	; 0
    4abe:	90 e0       	ldi	r25, 0x00	; 0
    4ac0:	a0 e2       	ldi	r26, 0x20	; 32
    4ac2:	b1 e4       	ldi	r27, 0x41	; 65
    4ac4:	8d ab       	std	Y+53, r24	; 0x35
    4ac6:	9e ab       	std	Y+54, r25	; 0x36
    4ac8:	af ab       	std	Y+55, r26	; 0x37
    4aca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4acc:	6d a9       	ldd	r22, Y+53	; 0x35
    4ace:	7e a9       	ldd	r23, Y+54	; 0x36
    4ad0:	8f a9       	ldd	r24, Y+55	; 0x37
    4ad2:	98 ad       	ldd	r25, Y+56	; 0x38
    4ad4:	20 e0       	ldi	r18, 0x00	; 0
    4ad6:	30 e0       	ldi	r19, 0x00	; 0
    4ad8:	4a e7       	ldi	r20, 0x7A	; 122
    4ada:	55 e4       	ldi	r21, 0x45	; 69
    4adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ae0:	dc 01       	movw	r26, r24
    4ae2:	cb 01       	movw	r24, r22
    4ae4:	89 ab       	std	Y+49, r24	; 0x31
    4ae6:	9a ab       	std	Y+50, r25	; 0x32
    4ae8:	ab ab       	std	Y+51, r26	; 0x33
    4aea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4aec:	69 a9       	ldd	r22, Y+49	; 0x31
    4aee:	7a a9       	ldd	r23, Y+50	; 0x32
    4af0:	8b a9       	ldd	r24, Y+51	; 0x33
    4af2:	9c a9       	ldd	r25, Y+52	; 0x34
    4af4:	20 e0       	ldi	r18, 0x00	; 0
    4af6:	30 e0       	ldi	r19, 0x00	; 0
    4af8:	40 e8       	ldi	r20, 0x80	; 128
    4afa:	5f e3       	ldi	r21, 0x3F	; 63
    4afc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4b00:	88 23       	and	r24, r24
    4b02:	2c f4       	brge	.+10     	; 0x4b0e <LCD_enuLatch+0xd4>
		__ticks = 1;
    4b04:	81 e0       	ldi	r24, 0x01	; 1
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	98 ab       	std	Y+48, r25	; 0x30
    4b0a:	8f a7       	std	Y+47, r24	; 0x2f
    4b0c:	3f c0       	rjmp	.+126    	; 0x4b8c <LCD_enuLatch+0x152>
	else if (__tmp > 65535)
    4b0e:	69 a9       	ldd	r22, Y+49	; 0x31
    4b10:	7a a9       	ldd	r23, Y+50	; 0x32
    4b12:	8b a9       	ldd	r24, Y+51	; 0x33
    4b14:	9c a9       	ldd	r25, Y+52	; 0x34
    4b16:	20 e0       	ldi	r18, 0x00	; 0
    4b18:	3f ef       	ldi	r19, 0xFF	; 255
    4b1a:	4f e7       	ldi	r20, 0x7F	; 127
    4b1c:	57 e4       	ldi	r21, 0x47	; 71
    4b1e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4b22:	18 16       	cp	r1, r24
    4b24:	4c f5       	brge	.+82     	; 0x4b78 <LCD_enuLatch+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b26:	6d a9       	ldd	r22, Y+53	; 0x35
    4b28:	7e a9       	ldd	r23, Y+54	; 0x36
    4b2a:	8f a9       	ldd	r24, Y+55	; 0x37
    4b2c:	98 ad       	ldd	r25, Y+56	; 0x38
    4b2e:	20 e0       	ldi	r18, 0x00	; 0
    4b30:	30 e0       	ldi	r19, 0x00	; 0
    4b32:	40 e2       	ldi	r20, 0x20	; 32
    4b34:	51 e4       	ldi	r21, 0x41	; 65
    4b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b3a:	dc 01       	movw	r26, r24
    4b3c:	cb 01       	movw	r24, r22
    4b3e:	bc 01       	movw	r22, r24
    4b40:	cd 01       	movw	r24, r26
    4b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b46:	dc 01       	movw	r26, r24
    4b48:	cb 01       	movw	r24, r22
    4b4a:	98 ab       	std	Y+48, r25	; 0x30
    4b4c:	8f a7       	std	Y+47, r24	; 0x2f
    4b4e:	0f c0       	rjmp	.+30     	; 0x4b6e <LCD_enuLatch+0x134>
    4b50:	80 e9       	ldi	r24, 0x90	; 144
    4b52:	91 e0       	ldi	r25, 0x01	; 1
    4b54:	9e a7       	std	Y+46, r25	; 0x2e
    4b56:	8d a7       	std	Y+45, r24	; 0x2d
    4b58:	8d a5       	ldd	r24, Y+45	; 0x2d
    4b5a:	9e a5       	ldd	r25, Y+46	; 0x2e
    4b5c:	01 97       	sbiw	r24, 0x01	; 1
    4b5e:	f1 f7       	brne	.-4      	; 0x4b5c <LCD_enuLatch+0x122>
    4b60:	9e a7       	std	Y+46, r25	; 0x2e
    4b62:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b64:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b66:	98 a9       	ldd	r25, Y+48	; 0x30
    4b68:	01 97       	sbiw	r24, 0x01	; 1
    4b6a:	98 ab       	std	Y+48, r25	; 0x30
    4b6c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b70:	98 a9       	ldd	r25, Y+48	; 0x30
    4b72:	00 97       	sbiw	r24, 0x00	; 0
    4b74:	69 f7       	brne	.-38     	; 0x4b50 <LCD_enuLatch+0x116>
    4b76:	14 c0       	rjmp	.+40     	; 0x4ba0 <LCD_enuLatch+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b78:	69 a9       	ldd	r22, Y+49	; 0x31
    4b7a:	7a a9       	ldd	r23, Y+50	; 0x32
    4b7c:	8b a9       	ldd	r24, Y+51	; 0x33
    4b7e:	9c a9       	ldd	r25, Y+52	; 0x34
    4b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b84:	dc 01       	movw	r26, r24
    4b86:	cb 01       	movw	r24, r22
    4b88:	98 ab       	std	Y+48, r25	; 0x30
    4b8a:	8f a7       	std	Y+47, r24	; 0x2f
    4b8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b8e:	98 a9       	ldd	r25, Y+48	; 0x30
    4b90:	9c a7       	std	Y+44, r25	; 0x2c
    4b92:	8b a7       	std	Y+43, r24	; 0x2b
    4b94:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b96:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b98:	01 97       	sbiw	r24, 0x01	; 1
    4b9a:	f1 f7       	brne	.-4      	; 0x4b98 <LCD_enuLatch+0x15e>
    4b9c:	9c a7       	std	Y+44, r25	; 0x2c
    4b9e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	M_DIO_enuSetPinValue(LCD_CTRL_EN_PORT, LCD_CTRL_EN_PIN, DIO_State_Low);
    4ba0:	81 e0       	ldi	r24, 0x01	; 1
    4ba2:	63 e0       	ldi	r22, 0x03	; 3
    4ba4:	40 e0       	ldi	r20, 0x00	; 0
    4ba6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
    4baa:	80 e0       	ldi	r24, 0x00	; 0
    4bac:	90 e0       	ldi	r25, 0x00	; 0
    4bae:	a0 e2       	ldi	r26, 0x20	; 32
    4bb0:	b1 e4       	ldi	r27, 0x41	; 65
    4bb2:	8f a3       	std	Y+39, r24	; 0x27
    4bb4:	98 a7       	std	Y+40, r25	; 0x28
    4bb6:	a9 a7       	std	Y+41, r26	; 0x29
    4bb8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bba:	6f a1       	ldd	r22, Y+39	; 0x27
    4bbc:	78 a5       	ldd	r23, Y+40	; 0x28
    4bbe:	89 a5       	ldd	r24, Y+41	; 0x29
    4bc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bc2:	20 e0       	ldi	r18, 0x00	; 0
    4bc4:	30 e0       	ldi	r19, 0x00	; 0
    4bc6:	4a e7       	ldi	r20, 0x7A	; 122
    4bc8:	55 e4       	ldi	r21, 0x45	; 69
    4bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bce:	dc 01       	movw	r26, r24
    4bd0:	cb 01       	movw	r24, r22
    4bd2:	8b a3       	std	Y+35, r24	; 0x23
    4bd4:	9c a3       	std	Y+36, r25	; 0x24
    4bd6:	ad a3       	std	Y+37, r26	; 0x25
    4bd8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4bda:	6b a1       	ldd	r22, Y+35	; 0x23
    4bdc:	7c a1       	ldd	r23, Y+36	; 0x24
    4bde:	8d a1       	ldd	r24, Y+37	; 0x25
    4be0:	9e a1       	ldd	r25, Y+38	; 0x26
    4be2:	20 e0       	ldi	r18, 0x00	; 0
    4be4:	30 e0       	ldi	r19, 0x00	; 0
    4be6:	40 e8       	ldi	r20, 0x80	; 128
    4be8:	5f e3       	ldi	r21, 0x3F	; 63
    4bea:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4bee:	88 23       	and	r24, r24
    4bf0:	2c f4       	brge	.+10     	; 0x4bfc <LCD_enuLatch+0x1c2>
		__ticks = 1;
    4bf2:	81 e0       	ldi	r24, 0x01	; 1
    4bf4:	90 e0       	ldi	r25, 0x00	; 0
    4bf6:	9a a3       	std	Y+34, r25	; 0x22
    4bf8:	89 a3       	std	Y+33, r24	; 0x21
    4bfa:	3f c0       	rjmp	.+126    	; 0x4c7a <LCD_enuLatch+0x240>
	else if (__tmp > 65535)
    4bfc:	6b a1       	ldd	r22, Y+35	; 0x23
    4bfe:	7c a1       	ldd	r23, Y+36	; 0x24
    4c00:	8d a1       	ldd	r24, Y+37	; 0x25
    4c02:	9e a1       	ldd	r25, Y+38	; 0x26
    4c04:	20 e0       	ldi	r18, 0x00	; 0
    4c06:	3f ef       	ldi	r19, 0xFF	; 255
    4c08:	4f e7       	ldi	r20, 0x7F	; 127
    4c0a:	57 e4       	ldi	r21, 0x47	; 71
    4c0c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4c10:	18 16       	cp	r1, r24
    4c12:	4c f5       	brge	.+82     	; 0x4c66 <LCD_enuLatch+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c14:	6f a1       	ldd	r22, Y+39	; 0x27
    4c16:	78 a5       	ldd	r23, Y+40	; 0x28
    4c18:	89 a5       	ldd	r24, Y+41	; 0x29
    4c1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c1c:	20 e0       	ldi	r18, 0x00	; 0
    4c1e:	30 e0       	ldi	r19, 0x00	; 0
    4c20:	40 e2       	ldi	r20, 0x20	; 32
    4c22:	51 e4       	ldi	r21, 0x41	; 65
    4c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c28:	dc 01       	movw	r26, r24
    4c2a:	cb 01       	movw	r24, r22
    4c2c:	bc 01       	movw	r22, r24
    4c2e:	cd 01       	movw	r24, r26
    4c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c34:	dc 01       	movw	r26, r24
    4c36:	cb 01       	movw	r24, r22
    4c38:	9a a3       	std	Y+34, r25	; 0x22
    4c3a:	89 a3       	std	Y+33, r24	; 0x21
    4c3c:	0f c0       	rjmp	.+30     	; 0x4c5c <LCD_enuLatch+0x222>
    4c3e:	80 e9       	ldi	r24, 0x90	; 144
    4c40:	91 e0       	ldi	r25, 0x01	; 1
    4c42:	98 a3       	std	Y+32, r25	; 0x20
    4c44:	8f 8f       	std	Y+31, r24	; 0x1f
    4c46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c48:	98 a1       	ldd	r25, Y+32	; 0x20
    4c4a:	01 97       	sbiw	r24, 0x01	; 1
    4c4c:	f1 f7       	brne	.-4      	; 0x4c4a <LCD_enuLatch+0x210>
    4c4e:	98 a3       	std	Y+32, r25	; 0x20
    4c50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c52:	89 a1       	ldd	r24, Y+33	; 0x21
    4c54:	9a a1       	ldd	r25, Y+34	; 0x22
    4c56:	01 97       	sbiw	r24, 0x01	; 1
    4c58:	9a a3       	std	Y+34, r25	; 0x22
    4c5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c5c:	89 a1       	ldd	r24, Y+33	; 0x21
    4c5e:	9a a1       	ldd	r25, Y+34	; 0x22
    4c60:	00 97       	sbiw	r24, 0x00	; 0
    4c62:	69 f7       	brne	.-38     	; 0x4c3e <LCD_enuLatch+0x204>
    4c64:	14 c0       	rjmp	.+40     	; 0x4c8e <LCD_enuLatch+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c66:	6b a1       	ldd	r22, Y+35	; 0x23
    4c68:	7c a1       	ldd	r23, Y+36	; 0x24
    4c6a:	8d a1       	ldd	r24, Y+37	; 0x25
    4c6c:	9e a1       	ldd	r25, Y+38	; 0x26
    4c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c72:	dc 01       	movw	r26, r24
    4c74:	cb 01       	movw	r24, r22
    4c76:	9a a3       	std	Y+34, r25	; 0x22
    4c78:	89 a3       	std	Y+33, r24	; 0x21
    4c7a:	89 a1       	ldd	r24, Y+33	; 0x21
    4c7c:	9a a1       	ldd	r25, Y+34	; 0x22
    4c7e:	9e 8f       	std	Y+30, r25	; 0x1e
    4c80:	8d 8f       	std	Y+29, r24	; 0x1d
    4c82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c86:	01 97       	sbiw	r24, 0x01	; 1
    4c88:	f1 f7       	brne	.-4      	; 0x4c86 <LCD_enuLatch+0x24c>
    4c8a:	9e 8f       	std	Y+30, r25	; 0x1e
    4c8c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	
	M_DIO_enuSetPinValue(LCD_DATA_D7_PORT, LCD_DATA_D7_PIN, ((Copy_u8Latch>>DIO_Pin3) & 1));
    4c8e:	8a ad       	ldd	r24, Y+58	; 0x3a
    4c90:	86 95       	lsr	r24
    4c92:	86 95       	lsr	r24
    4c94:	86 95       	lsr	r24
    4c96:	98 2f       	mov	r25, r24
    4c98:	91 70       	andi	r25, 0x01	; 1
    4c9a:	81 e0       	ldi	r24, 0x01	; 1
    4c9c:	67 e0       	ldi	r22, 0x07	; 7
    4c9e:	49 2f       	mov	r20, r25
    4ca0:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(LCD_DATA_D6_PORT, LCD_DATA_D6_PIN, ((Copy_u8Latch>>DIO_Pin2) & 1));
    4ca4:	8a ad       	ldd	r24, Y+58	; 0x3a
    4ca6:	86 95       	lsr	r24
    4ca8:	86 95       	lsr	r24
    4caa:	98 2f       	mov	r25, r24
    4cac:	91 70       	andi	r25, 0x01	; 1
    4cae:	81 e0       	ldi	r24, 0x01	; 1
    4cb0:	66 e0       	ldi	r22, 0x06	; 6
    4cb2:	49 2f       	mov	r20, r25
    4cb4:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(LCD_DATA_D5_PORT, LCD_DATA_D5_PIN, ((Copy_u8Latch>>DIO_Pin1) & 1));
    4cb8:	8a ad       	ldd	r24, Y+58	; 0x3a
    4cba:	86 95       	lsr	r24
    4cbc:	98 2f       	mov	r25, r24
    4cbe:	91 70       	andi	r25, 0x01	; 1
    4cc0:	81 e0       	ldi	r24, 0x01	; 1
    4cc2:	65 e0       	ldi	r22, 0x05	; 5
    4cc4:	49 2f       	mov	r20, r25
    4cc6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(LCD_DATA_D4_PORT, LCD_DATA_D4_PIN, ((Copy_u8Latch>>DIO_Pin0) & 1));
    4cca:	8a ad       	ldd	r24, Y+58	; 0x3a
    4ccc:	98 2f       	mov	r25, r24
    4cce:	91 70       	andi	r25, 0x01	; 1
    4cd0:	81 e0       	ldi	r24, 0x01	; 1
    4cd2:	64 e0       	ldi	r22, 0x04	; 4
    4cd4:	49 2f       	mov	r20, r25
    4cd6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	
	#else
	#error "Undefined LCD Mode"
	#endif
	M_DIO_enuSetPinValue(LCD_CTRL_EN_PORT, LCD_CTRL_EN_PIN, DIO_State_High);
    4cda:	81 e0       	ldi	r24, 0x01	; 1
    4cdc:	63 e0       	ldi	r22, 0x03	; 3
    4cde:	41 e0       	ldi	r20, 0x01	; 1
    4ce0:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
    4ce4:	80 e0       	ldi	r24, 0x00	; 0
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	a0 ea       	ldi	r26, 0xA0	; 160
    4cea:	b0 e4       	ldi	r27, 0x40	; 64
    4cec:	89 8f       	std	Y+25, r24	; 0x19
    4cee:	9a 8f       	std	Y+26, r25	; 0x1a
    4cf0:	ab 8f       	std	Y+27, r26	; 0x1b
    4cf2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cf4:	69 8d       	ldd	r22, Y+25	; 0x19
    4cf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4cf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4cfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4cfc:	20 e0       	ldi	r18, 0x00	; 0
    4cfe:	30 e0       	ldi	r19, 0x00	; 0
    4d00:	4a e7       	ldi	r20, 0x7A	; 122
    4d02:	55 e4       	ldi	r21, 0x45	; 69
    4d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d08:	dc 01       	movw	r26, r24
    4d0a:	cb 01       	movw	r24, r22
    4d0c:	8d 8b       	std	Y+21, r24	; 0x15
    4d0e:	9e 8b       	std	Y+22, r25	; 0x16
    4d10:	af 8b       	std	Y+23, r26	; 0x17
    4d12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d14:	6d 89       	ldd	r22, Y+21	; 0x15
    4d16:	7e 89       	ldd	r23, Y+22	; 0x16
    4d18:	8f 89       	ldd	r24, Y+23	; 0x17
    4d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    4d1c:	20 e0       	ldi	r18, 0x00	; 0
    4d1e:	30 e0       	ldi	r19, 0x00	; 0
    4d20:	40 e8       	ldi	r20, 0x80	; 128
    4d22:	5f e3       	ldi	r21, 0x3F	; 63
    4d24:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4d28:	88 23       	and	r24, r24
    4d2a:	2c f4       	brge	.+10     	; 0x4d36 <LCD_enuLatch+0x2fc>
		__ticks = 1;
    4d2c:	81 e0       	ldi	r24, 0x01	; 1
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	9c 8b       	std	Y+20, r25	; 0x14
    4d32:	8b 8b       	std	Y+19, r24	; 0x13
    4d34:	3f c0       	rjmp	.+126    	; 0x4db4 <LCD_enuLatch+0x37a>
	else if (__tmp > 65535)
    4d36:	6d 89       	ldd	r22, Y+21	; 0x15
    4d38:	7e 89       	ldd	r23, Y+22	; 0x16
    4d3a:	8f 89       	ldd	r24, Y+23	; 0x17
    4d3c:	98 8d       	ldd	r25, Y+24	; 0x18
    4d3e:	20 e0       	ldi	r18, 0x00	; 0
    4d40:	3f ef       	ldi	r19, 0xFF	; 255
    4d42:	4f e7       	ldi	r20, 0x7F	; 127
    4d44:	57 e4       	ldi	r21, 0x47	; 71
    4d46:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4d4a:	18 16       	cp	r1, r24
    4d4c:	4c f5       	brge	.+82     	; 0x4da0 <LCD_enuLatch+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d4e:	69 8d       	ldd	r22, Y+25	; 0x19
    4d50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d56:	20 e0       	ldi	r18, 0x00	; 0
    4d58:	30 e0       	ldi	r19, 0x00	; 0
    4d5a:	40 e2       	ldi	r20, 0x20	; 32
    4d5c:	51 e4       	ldi	r21, 0x41	; 65
    4d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d62:	dc 01       	movw	r26, r24
    4d64:	cb 01       	movw	r24, r22
    4d66:	bc 01       	movw	r22, r24
    4d68:	cd 01       	movw	r24, r26
    4d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d6e:	dc 01       	movw	r26, r24
    4d70:	cb 01       	movw	r24, r22
    4d72:	9c 8b       	std	Y+20, r25	; 0x14
    4d74:	8b 8b       	std	Y+19, r24	; 0x13
    4d76:	0f c0       	rjmp	.+30     	; 0x4d96 <LCD_enuLatch+0x35c>
    4d78:	80 e9       	ldi	r24, 0x90	; 144
    4d7a:	91 e0       	ldi	r25, 0x01	; 1
    4d7c:	9a 8b       	std	Y+18, r25	; 0x12
    4d7e:	89 8b       	std	Y+17, r24	; 0x11
    4d80:	89 89       	ldd	r24, Y+17	; 0x11
    4d82:	9a 89       	ldd	r25, Y+18	; 0x12
    4d84:	01 97       	sbiw	r24, 0x01	; 1
    4d86:	f1 f7       	brne	.-4      	; 0x4d84 <LCD_enuLatch+0x34a>
    4d88:	9a 8b       	std	Y+18, r25	; 0x12
    4d8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    4d8e:	9c 89       	ldd	r25, Y+20	; 0x14
    4d90:	01 97       	sbiw	r24, 0x01	; 1
    4d92:	9c 8b       	std	Y+20, r25	; 0x14
    4d94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d96:	8b 89       	ldd	r24, Y+19	; 0x13
    4d98:	9c 89       	ldd	r25, Y+20	; 0x14
    4d9a:	00 97       	sbiw	r24, 0x00	; 0
    4d9c:	69 f7       	brne	.-38     	; 0x4d78 <LCD_enuLatch+0x33e>
    4d9e:	14 c0       	rjmp	.+40     	; 0x4dc8 <LCD_enuLatch+0x38e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4da0:	6d 89       	ldd	r22, Y+21	; 0x15
    4da2:	7e 89       	ldd	r23, Y+22	; 0x16
    4da4:	8f 89       	ldd	r24, Y+23	; 0x17
    4da6:	98 8d       	ldd	r25, Y+24	; 0x18
    4da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dac:	dc 01       	movw	r26, r24
    4dae:	cb 01       	movw	r24, r22
    4db0:	9c 8b       	std	Y+20, r25	; 0x14
    4db2:	8b 8b       	std	Y+19, r24	; 0x13
    4db4:	8b 89       	ldd	r24, Y+19	; 0x13
    4db6:	9c 89       	ldd	r25, Y+20	; 0x14
    4db8:	98 8b       	std	Y+16, r25	; 0x10
    4dba:	8f 87       	std	Y+15, r24	; 0x0f
    4dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dbe:	98 89       	ldd	r25, Y+16	; 0x10
    4dc0:	01 97       	sbiw	r24, 0x01	; 1
    4dc2:	f1 f7       	brne	.-4      	; 0x4dc0 <LCD_enuLatch+0x386>
    4dc4:	98 8b       	std	Y+16, r25	; 0x10
    4dc6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	M_DIO_enuSetPinValue(LCD_CTRL_EN_PORT, LCD_CTRL_EN_PIN, DIO_State_Low);
    4dc8:	81 e0       	ldi	r24, 0x01	; 1
    4dca:	63 e0       	ldi	r22, 0x03	; 3
    4dcc:	40 e0       	ldi	r20, 0x00	; 0
    4dce:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
    4dd2:	80 e0       	ldi	r24, 0x00	; 0
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	a0 ea       	ldi	r26, 0xA0	; 160
    4dd8:	b0 e4       	ldi	r27, 0x40	; 64
    4dda:	8b 87       	std	Y+11, r24	; 0x0b
    4ddc:	9c 87       	std	Y+12, r25	; 0x0c
    4dde:	ad 87       	std	Y+13, r26	; 0x0d
    4de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4de2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4de4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4de6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4de8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dea:	20 e0       	ldi	r18, 0x00	; 0
    4dec:	30 e0       	ldi	r19, 0x00	; 0
    4dee:	4a e7       	ldi	r20, 0x7A	; 122
    4df0:	55 e4       	ldi	r21, 0x45	; 69
    4df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4df6:	dc 01       	movw	r26, r24
    4df8:	cb 01       	movw	r24, r22
    4dfa:	8f 83       	std	Y+7, r24	; 0x07
    4dfc:	98 87       	std	Y+8, r25	; 0x08
    4dfe:	a9 87       	std	Y+9, r26	; 0x09
    4e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e02:	6f 81       	ldd	r22, Y+7	; 0x07
    4e04:	78 85       	ldd	r23, Y+8	; 0x08
    4e06:	89 85       	ldd	r24, Y+9	; 0x09
    4e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e0a:	20 e0       	ldi	r18, 0x00	; 0
    4e0c:	30 e0       	ldi	r19, 0x00	; 0
    4e0e:	40 e8       	ldi	r20, 0x80	; 128
    4e10:	5f e3       	ldi	r21, 0x3F	; 63
    4e12:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4e16:	88 23       	and	r24, r24
    4e18:	2c f4       	brge	.+10     	; 0x4e24 <LCD_enuLatch+0x3ea>
		__ticks = 1;
    4e1a:	81 e0       	ldi	r24, 0x01	; 1
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	9e 83       	std	Y+6, r25	; 0x06
    4e20:	8d 83       	std	Y+5, r24	; 0x05
    4e22:	3f c0       	rjmp	.+126    	; 0x4ea2 <LCD_enuLatch+0x468>
	else if (__tmp > 65535)
    4e24:	6f 81       	ldd	r22, Y+7	; 0x07
    4e26:	78 85       	ldd	r23, Y+8	; 0x08
    4e28:	89 85       	ldd	r24, Y+9	; 0x09
    4e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e2c:	20 e0       	ldi	r18, 0x00	; 0
    4e2e:	3f ef       	ldi	r19, 0xFF	; 255
    4e30:	4f e7       	ldi	r20, 0x7F	; 127
    4e32:	57 e4       	ldi	r21, 0x47	; 71
    4e34:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4e38:	18 16       	cp	r1, r24
    4e3a:	4c f5       	brge	.+82     	; 0x4e8e <LCD_enuLatch+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e44:	20 e0       	ldi	r18, 0x00	; 0
    4e46:	30 e0       	ldi	r19, 0x00	; 0
    4e48:	40 e2       	ldi	r20, 0x20	; 32
    4e4a:	51 e4       	ldi	r21, 0x41	; 65
    4e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e50:	dc 01       	movw	r26, r24
    4e52:	cb 01       	movw	r24, r22
    4e54:	bc 01       	movw	r22, r24
    4e56:	cd 01       	movw	r24, r26
    4e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e5c:	dc 01       	movw	r26, r24
    4e5e:	cb 01       	movw	r24, r22
    4e60:	9e 83       	std	Y+6, r25	; 0x06
    4e62:	8d 83       	std	Y+5, r24	; 0x05
    4e64:	0f c0       	rjmp	.+30     	; 0x4e84 <LCD_enuLatch+0x44a>
    4e66:	80 e9       	ldi	r24, 0x90	; 144
    4e68:	91 e0       	ldi	r25, 0x01	; 1
    4e6a:	9c 83       	std	Y+4, r25	; 0x04
    4e6c:	8b 83       	std	Y+3, r24	; 0x03
    4e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e70:	9c 81       	ldd	r25, Y+4	; 0x04
    4e72:	01 97       	sbiw	r24, 0x01	; 1
    4e74:	f1 f7       	brne	.-4      	; 0x4e72 <LCD_enuLatch+0x438>
    4e76:	9c 83       	std	Y+4, r25	; 0x04
    4e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e7e:	01 97       	sbiw	r24, 0x01	; 1
    4e80:	9e 83       	std	Y+6, r25	; 0x06
    4e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e84:	8d 81       	ldd	r24, Y+5	; 0x05
    4e86:	9e 81       	ldd	r25, Y+6	; 0x06
    4e88:	00 97       	sbiw	r24, 0x00	; 0
    4e8a:	69 f7       	brne	.-38     	; 0x4e66 <LCD_enuLatch+0x42c>
    4e8c:	14 c0       	rjmp	.+40     	; 0x4eb6 <LCD_enuLatch+0x47c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    4e90:	78 85       	ldd	r23, Y+8	; 0x08
    4e92:	89 85       	ldd	r24, Y+9	; 0x09
    4e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e9a:	dc 01       	movw	r26, r24
    4e9c:	cb 01       	movw	r24, r22
    4e9e:	9e 83       	std	Y+6, r25	; 0x06
    4ea0:	8d 83       	std	Y+5, r24	; 0x05
    4ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ea6:	9a 83       	std	Y+2, r25	; 0x02
    4ea8:	89 83       	std	Y+1, r24	; 0x01
    4eaa:	89 81       	ldd	r24, Y+1	; 0x01
    4eac:	9a 81       	ldd	r25, Y+2	; 0x02
    4eae:	01 97       	sbiw	r24, 0x01	; 1
    4eb0:	f1 f7       	brne	.-4      	; 0x4eae <LCD_enuLatch+0x474>
    4eb2:	9a 83       	std	Y+2, r25	; 0x02
    4eb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	
	Local_u8ErrorState = ES_OK;
    4eb6:	81 e0       	ldi	r24, 0x01	; 1
    4eb8:	89 af       	std	Y+57, r24	; 0x39
	return Local_u8ErrorState;
    4eba:	89 ad       	ldd	r24, Y+57	; 0x39
}
    4ebc:	ea 96       	adiw	r28, 0x3a	; 58
    4ebe:	0f b6       	in	r0, 0x3f	; 63
    4ec0:	f8 94       	cli
    4ec2:	de bf       	out	0x3e, r29	; 62
    4ec4:	0f be       	out	0x3f, r0	; 63
    4ec6:	cd bf       	out	0x3d, r28	; 61
    4ec8:	cf 91       	pop	r28
    4eca:	df 91       	pop	r29
    4ecc:	08 95       	ret

00004ece <LCD_enuStopWatch>:




ES_t LCD_enuStopWatch(u8 Seconds,u8  Minutes,u8  Hours)
{
    4ece:	df 93       	push	r29
    4ed0:	cf 93       	push	r28
    4ed2:	00 d0       	rcall	.+0      	; 0x4ed4 <LCD_enuStopWatch+0x6>
    4ed4:	0f 92       	push	r0
    4ed6:	cd b7       	in	r28, 0x3d	; 61
    4ed8:	de b7       	in	r29, 0x3e	; 62
    4eda:	89 83       	std	Y+1, r24	; 0x01
    4edc:	6a 83       	std	Y+2, r22	; 0x02
    4ede:	4b 83       	std	Y+3, r20	; 0x03
	/*Hours Display*/
	LCD_enuGoToPosition(1,5);
    4ee0:	81 e0       	ldi	r24, 0x01	; 1
    4ee2:	65 e0       	ldi	r22, 0x05	; 5
    4ee4:	0e 94 a7 24 	call	0x494e	; 0x494e <LCD_enuGoToPosition>
	if(Hours<=9)
    4ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    4eea:	8a 30       	cpi	r24, 0x0A	; 10
    4eec:	18 f4       	brcc	.+6      	; 0x4ef4 <LCD_enuStopWatch+0x26>
	{
		LCD_enuWriteData('0');
    4eee:	80 e3       	ldi	r24, 0x30	; 48
    4ef0:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
	}
	LCD_enuWriteIntegerNum(Hours);
    4ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ef6:	88 2f       	mov	r24, r24
    4ef8:	90 e0       	ldi	r25, 0x00	; 0
    4efa:	a0 e0       	ldi	r26, 0x00	; 0
    4efc:	b0 e0       	ldi	r27, 0x00	; 0
    4efe:	bc 01       	movw	r22, r24
    4f00:	cd 01       	movw	r24, r26
    4f02:	0e 94 41 23 	call	0x4682	; 0x4682 <LCD_enuWriteIntegerNum>
	LCD_enuWriteData(':');
    4f06:	8a e3       	ldi	r24, 0x3A	; 58
    4f08:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
	/*Minutes Display*/
	if(Minutes<=9)
    4f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f0e:	8a 30       	cpi	r24, 0x0A	; 10
    4f10:	18 f4       	brcc	.+6      	; 0x4f18 <LCD_enuStopWatch+0x4a>
	{
		LCD_enuWriteData('0');
    4f12:	80 e3       	ldi	r24, 0x30	; 48
    4f14:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
	}
	LCD_enuWriteIntegerNum(Minutes);
    4f18:	8a 81       	ldd	r24, Y+2	; 0x02
    4f1a:	88 2f       	mov	r24, r24
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	a0 e0       	ldi	r26, 0x00	; 0
    4f20:	b0 e0       	ldi	r27, 0x00	; 0
    4f22:	bc 01       	movw	r22, r24
    4f24:	cd 01       	movw	r24, r26
    4f26:	0e 94 41 23 	call	0x4682	; 0x4682 <LCD_enuWriteIntegerNum>
	LCD_enuWriteData(':');
    4f2a:	8a e3       	ldi	r24, 0x3A	; 58
    4f2c:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
	/*Seconds Display*/
	if(Seconds<=9)
    4f30:	89 81       	ldd	r24, Y+1	; 0x01
    4f32:	8a 30       	cpi	r24, 0x0A	; 10
    4f34:	18 f4       	brcc	.+6      	; 0x4f3c <LCD_enuStopWatch+0x6e>
	{
		LCD_enuWriteData('0');
    4f36:	80 e3       	ldi	r24, 0x30	; 48
    4f38:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
	}
	LCD_enuWriteIntegerNum(Seconds);
    4f3c:	89 81       	ldd	r24, Y+1	; 0x01
    4f3e:	88 2f       	mov	r24, r24
    4f40:	90 e0       	ldi	r25, 0x00	; 0
    4f42:	a0 e0       	ldi	r26, 0x00	; 0
    4f44:	b0 e0       	ldi	r27, 0x00	; 0
    4f46:	bc 01       	movw	r22, r24
    4f48:	cd 01       	movw	r24, r26
    4f4a:	0e 94 41 23 	call	0x4682	; 0x4682 <LCD_enuWriteIntegerNum>
		LCD_enuWriteCommand(0xC0);
    4f4e:	80 ec       	ldi	r24, 0xC0	; 192
    4f50:	0e 94 c9 22 	call	0x4592	; 0x4592 <LCD_enuWriteCommand>
		

	return ES_OK;
    4f54:	81 e0       	ldi	r24, 0x01	; 1
}
    4f56:	0f 90       	pop	r0
    4f58:	0f 90       	pop	r0
    4f5a:	0f 90       	pop	r0
    4f5c:	cf 91       	pop	r28
    4f5e:	df 91       	pop	r29
    4f60:	08 95       	ret

00004f62 <KEYPAD_enuInit>:

#include "Keypad_Config.h"
#include "Keypad_Private.h"

ES_t KEYPAD_enuInit(void)
{
    4f62:	df 93       	push	r29
    4f64:	cf 93       	push	r28
    4f66:	cd b7       	in	r28, 0x3d	; 61
    4f68:	de b7       	in	r29, 0x3e	; 62
	
	M_DIO_enuSetPinDirection(C1_PRT,C1_PIN, DIO_Direction_Output);
    4f6a:	82 e0       	ldi	r24, 0x02	; 2
    4f6c:	64 e0       	ldi	r22, 0x04	; 4
    4f6e:	41 e0       	ldi	r20, 0x01	; 1
    4f70:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
	M_DIO_enuSetPinDirection(C2_PRT,C2_PIN, DIO_Direction_Output);
    4f74:	82 e0       	ldi	r24, 0x02	; 2
    4f76:	65 e0       	ldi	r22, 0x05	; 5
    4f78:	41 e0       	ldi	r20, 0x01	; 1
    4f7a:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
	M_DIO_enuSetPinDirection(C3_PRT,C3_PIN, DIO_Direction_Output);
    4f7e:	82 e0       	ldi	r24, 0x02	; 2
    4f80:	66 e0       	ldi	r22, 0x06	; 6
    4f82:	41 e0       	ldi	r20, 0x01	; 1
    4f84:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
	M_DIO_enuSetPinDirection(C4_PRT,C4_PIN, DIO_Direction_Output);
    4f88:	82 e0       	ldi	r24, 0x02	; 2
    4f8a:	67 e0       	ldi	r22, 0x07	; 7
    4f8c:	41 e0       	ldi	r20, 0x01	; 1
    4f8e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>

	M_DIO_enuSetPinValue(C1_PRT,C1_PIN, DIO_State_High);
    4f92:	82 e0       	ldi	r24, 0x02	; 2
    4f94:	64 e0       	ldi	r22, 0x04	; 4
    4f96:	41 e0       	ldi	r20, 0x01	; 1
    4f98:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(C2_PRT,C2_PIN, DIO_State_High);
    4f9c:	82 e0       	ldi	r24, 0x02	; 2
    4f9e:	65 e0       	ldi	r22, 0x05	; 5
    4fa0:	41 e0       	ldi	r20, 0x01	; 1
    4fa2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(C3_PRT,C3_PIN, DIO_State_High);
    4fa6:	82 e0       	ldi	r24, 0x02	; 2
    4fa8:	66 e0       	ldi	r22, 0x06	; 6
    4faa:	41 e0       	ldi	r20, 0x01	; 1
    4fac:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(C4_PRT,C4_PIN, DIO_State_High);
    4fb0:	82 e0       	ldi	r24, 0x02	; 2
    4fb2:	67 e0       	ldi	r22, 0x07	; 7
    4fb4:	41 e0       	ldi	r20, 0x01	; 1
    4fb6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>

	M_DIO_enuSetPinDirection(R1_PRT,R1_PIN, DIO_Direction_Input);
    4fba:	82 e0       	ldi	r24, 0x02	; 2
    4fbc:	60 e0       	ldi	r22, 0x00	; 0
    4fbe:	40 e0       	ldi	r20, 0x00	; 0
    4fc0:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
	M_DIO_enuSetPinDirection(R2_PRT,R2_PIN, DIO_Direction_Input);
    4fc4:	82 e0       	ldi	r24, 0x02	; 2
    4fc6:	61 e0       	ldi	r22, 0x01	; 1
    4fc8:	40 e0       	ldi	r20, 0x00	; 0
    4fca:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
	M_DIO_enuSetPinDirection(R3_PRT,R3_PIN, DIO_Direction_Input);
    4fce:	82 e0       	ldi	r24, 0x02	; 2
    4fd0:	62 e0       	ldi	r22, 0x02	; 2
    4fd2:	40 e0       	ldi	r20, 0x00	; 0
    4fd4:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
	M_DIO_enuSetPinDirection(R4_PRT,R4_PIN, DIO_Direction_Input);
    4fd8:	82 e0       	ldi	r24, 0x02	; 2
    4fda:	63 e0       	ldi	r22, 0x03	; 3
    4fdc:	40 e0       	ldi	r20, 0x00	; 0
    4fde:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
	M_DIO_enuSetPinValue(R1_PRT,R1_PIN, DIO_State_High);
    4fe2:	82 e0       	ldi	r24, 0x02	; 2
    4fe4:	60 e0       	ldi	r22, 0x00	; 0
    4fe6:	41 e0       	ldi	r20, 0x01	; 1
    4fe8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(R2_PRT,R2_PIN, DIO_State_High);
    4fec:	82 e0       	ldi	r24, 0x02	; 2
    4fee:	61 e0       	ldi	r22, 0x01	; 1
    4ff0:	41 e0       	ldi	r20, 0x01	; 1
    4ff2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(R3_PRT,R3_PIN, DIO_State_High);
    4ff6:	82 e0       	ldi	r24, 0x02	; 2
    4ff8:	62 e0       	ldi	r22, 0x02	; 2
    4ffa:	41 e0       	ldi	r20, 0x01	; 1
    4ffc:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	M_DIO_enuSetPinValue(R4_PRT,R4_PIN, DIO_State_High);
    5000:	82 e0       	ldi	r24, 0x02	; 2
    5002:	63 e0       	ldi	r22, 0x03	; 3
    5004:	41 e0       	ldi	r20, 0x01	; 1
    5006:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	return ES_OK;
    500a:	81 e0       	ldi	r24, 0x01	; 1
	
}
    500c:	cf 91       	pop	r28
    500e:	df 91       	pop	r29
    5010:	08 95       	ret

00005012 <KEYPAD_enuGetPressedKey>:
ES_t KEYPAD_enuGetPressedKey(u8 * Copy_pu8KeyValue)
{
    5012:	df 93       	push	r29
    5014:	cf 93       	push	r28
    5016:	cd b7       	in	r28, 0x3d	; 61
    5018:	de b7       	in	r29, 0x3e	; 62
    501a:	ea 97       	sbiw	r28, 0x3a	; 58
    501c:	0f b6       	in	r0, 0x3f	; 63
    501e:	f8 94       	cli
    5020:	de bf       	out	0x3e, r29	; 62
    5022:	0f be       	out	0x3f, r0	; 63
    5024:	cd bf       	out	0x3d, r28	; 61
    5026:	9d ab       	std	Y+53, r25	; 0x35
    5028:	8c ab       	std	Y+52, r24	; 0x34
	u8 Local_u8ErrorState = ES_NOK;
    502a:	1a 8a       	std	Y+18, r1	; 0x12
	if(Copy_pu8KeyValue != NULL)
    502c:	8c a9       	ldd	r24, Y+52	; 0x34
    502e:	9d a9       	ldd	r25, Y+53	; 0x35
    5030:	00 97       	sbiw	r24, 0x00	; 0
    5032:	09 f4       	brne	.+2      	; 0x5036 <KEYPAD_enuGetPressedKey+0x24>
    5034:	6f c1       	rjmp	.+734    	; 0x5314 <KEYPAD_enuGetPressedKey+0x302>
	{
		u8 Local_u8RowIter=0;
    5036:	19 8a       	std	Y+17, r1	; 0x11
		u8 Local_u8ColIter=0;
    5038:	18 8a       	std	Y+16, r1	; 0x10
		
		u8 Local_Au8RowPort[Row] = {R1_PRT,R2_PRT,R3_PRT,R4_PRT};
    503a:	82 e0       	ldi	r24, 0x02	; 2
    503c:	8b 8b       	std	Y+19, r24	; 0x13
    503e:	82 e0       	ldi	r24, 0x02	; 2
    5040:	8c 8b       	std	Y+20, r24	; 0x14
    5042:	82 e0       	ldi	r24, 0x02	; 2
    5044:	8d 8b       	std	Y+21, r24	; 0x15
    5046:	82 e0       	ldi	r24, 0x02	; 2
    5048:	8e 8b       	std	Y+22, r24	; 0x16
		u8 Local_Au8RowPin[Row] = {R1_PIN,R2_PIN,R3_PIN,R4_PIN};
    504a:	1f 8a       	std	Y+23, r1	; 0x17
    504c:	81 e0       	ldi	r24, 0x01	; 1
    504e:	88 8f       	std	Y+24, r24	; 0x18
    5050:	82 e0       	ldi	r24, 0x02	; 2
    5052:	89 8f       	std	Y+25, r24	; 0x19
    5054:	83 e0       	ldi	r24, 0x03	; 3
    5056:	8a 8f       	std	Y+26, r24	; 0x1a
		
		u8 Local_Au8ColPort[Col] = {C1_PRT,C2_PRT,C3_PRT,C4_PRT};
    5058:	82 e0       	ldi	r24, 0x02	; 2
    505a:	8b 8f       	std	Y+27, r24	; 0x1b
    505c:	82 e0       	ldi	r24, 0x02	; 2
    505e:	8c 8f       	std	Y+28, r24	; 0x1c
    5060:	82 e0       	ldi	r24, 0x02	; 2
    5062:	8d 8f       	std	Y+29, r24	; 0x1d
    5064:	82 e0       	ldi	r24, 0x02	; 2
    5066:	8e 8f       	std	Y+30, r24	; 0x1e
		u8 Local_Au8ColPin[Col] = {C1_PIN,C2_PIN,C3_PIN,C4_PIN};
    5068:	84 e0       	ldi	r24, 0x04	; 4
    506a:	8f 8f       	std	Y+31, r24	; 0x1f
    506c:	85 e0       	ldi	r24, 0x05	; 5
    506e:	88 a3       	std	Y+32, r24	; 0x20
    5070:	86 e0       	ldi	r24, 0x06	; 6
    5072:	89 a3       	std	Y+33, r24	; 0x21
    5074:	87 e0       	ldi	r24, 0x07	; 7
    5076:	8a a3       	std	Y+34, r24	; 0x22
			
		u8 Local_u8RowVal = NOT_PRESSED,Local_u8Flag=0;
    5078:	8f ef       	ldi	r24, 0xFF	; 255
    507a:	8b a3       	std	Y+35, r24	; 0x23
    507c:	1f 86       	std	Y+15, r1	; 0x0f
    507e:	3e c1       	rjmp	.+636    	; 0x52fc <KEYPAD_enuGetPressedKey+0x2ea>
		for(; Local_u8ColIter<Col ; Local_u8ColIter++)
		{
			M_DIO_enuSetPinValue(Local_Au8ColPort[Local_u8ColIter],Local_Au8ColPin[Local_u8ColIter],DIO_State_Low);
    5080:	88 89       	ldd	r24, Y+16	; 0x10
    5082:	28 2f       	mov	r18, r24
    5084:	30 e0       	ldi	r19, 0x00	; 0
    5086:	ce 01       	movw	r24, r28
    5088:	4b 96       	adiw	r24, 0x1b	; 27
    508a:	fc 01       	movw	r30, r24
    508c:	e2 0f       	add	r30, r18
    508e:	f3 1f       	adc	r31, r19
    5090:	40 81       	ld	r20, Z
    5092:	88 89       	ldd	r24, Y+16	; 0x10
    5094:	28 2f       	mov	r18, r24
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	ce 01       	movw	r24, r28
    509a:	4f 96       	adiw	r24, 0x1f	; 31
    509c:	fc 01       	movw	r30, r24
    509e:	e2 0f       	add	r30, r18
    50a0:	f3 1f       	adc	r31, r19
    50a2:	90 81       	ld	r25, Z
    50a4:	84 2f       	mov	r24, r20
    50a6:	69 2f       	mov	r22, r25
    50a8:	40 e0       	ldi	r20, 0x00	; 0
    50aa:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
			for(Local_u8RowIter=0;Local_u8RowIter<Row; Local_u8RowIter++)
    50ae:	19 8a       	std	Y+17, r1	; 0x11
    50b0:	07 c1       	rjmp	.+526    	; 0x52c0 <KEYPAD_enuGetPressedKey+0x2ae>
			{

				M_DIO_enuGetPinValue(Local_Au8RowPort[Local_u8RowIter],Local_Au8RowPin[Local_u8RowIter],&Local_u8RowVal);
    50b2:	89 89       	ldd	r24, Y+17	; 0x11
    50b4:	28 2f       	mov	r18, r24
    50b6:	30 e0       	ldi	r19, 0x00	; 0
    50b8:	ce 01       	movw	r24, r28
    50ba:	43 96       	adiw	r24, 0x13	; 19
    50bc:	fc 01       	movw	r30, r24
    50be:	e2 0f       	add	r30, r18
    50c0:	f3 1f       	adc	r31, r19
    50c2:	40 81       	ld	r20, Z
    50c4:	89 89       	ldd	r24, Y+17	; 0x11
    50c6:	28 2f       	mov	r18, r24
    50c8:	30 e0       	ldi	r19, 0x00	; 0
    50ca:	ce 01       	movw	r24, r28
    50cc:	47 96       	adiw	r24, 0x17	; 23
    50ce:	fc 01       	movw	r30, r24
    50d0:	e2 0f       	add	r30, r18
    50d2:	f3 1f       	adc	r31, r19
    50d4:	90 81       	ld	r25, Z
    50d6:	9e 01       	movw	r18, r28
    50d8:	2d 5d       	subi	r18, 0xDD	; 221
    50da:	3f 4f       	sbci	r19, 0xFF	; 255
    50dc:	84 2f       	mov	r24, r20
    50de:	69 2f       	mov	r22, r25
    50e0:	a9 01       	movw	r20, r18
    50e2:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <M_DIO_enuGetPinValue>
				if(Local_u8RowVal == DIO_State_Low)
    50e6:	8b a1       	ldd	r24, Y+35	; 0x23
    50e8:	88 23       	and	r24, r24
    50ea:	09 f0       	breq	.+2      	; 0x50ee <KEYPAD_enuGetPressedKey+0xdc>
    50ec:	e6 c0       	rjmp	.+460    	; 0x52ba <KEYPAD_enuGetPressedKey+0x2a8>
    50ee:	80 e0       	ldi	r24, 0x00	; 0
    50f0:	90 e0       	ldi	r25, 0x00	; 0
    50f2:	a0 e2       	ldi	r26, 0x20	; 32
    50f4:	b1 e4       	ldi	r27, 0x41	; 65
    50f6:	8b 87       	std	Y+11, r24	; 0x0b
    50f8:	9c 87       	std	Y+12, r25	; 0x0c
    50fa:	ad 87       	std	Y+13, r26	; 0x0d
    50fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    5100:	7c 85       	ldd	r23, Y+12	; 0x0c
    5102:	8d 85       	ldd	r24, Y+13	; 0x0d
    5104:	9e 85       	ldd	r25, Y+14	; 0x0e
    5106:	20 e0       	ldi	r18, 0x00	; 0
    5108:	30 e0       	ldi	r19, 0x00	; 0
    510a:	4a e7       	ldi	r20, 0x7A	; 122
    510c:	55 e4       	ldi	r21, 0x45	; 69
    510e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5112:	dc 01       	movw	r26, r24
    5114:	cb 01       	movw	r24, r22
    5116:	8f 83       	std	Y+7, r24	; 0x07
    5118:	98 87       	std	Y+8, r25	; 0x08
    511a:	a9 87       	std	Y+9, r26	; 0x09
    511c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    511e:	6f 81       	ldd	r22, Y+7	; 0x07
    5120:	78 85       	ldd	r23, Y+8	; 0x08
    5122:	89 85       	ldd	r24, Y+9	; 0x09
    5124:	9a 85       	ldd	r25, Y+10	; 0x0a
    5126:	20 e0       	ldi	r18, 0x00	; 0
    5128:	30 e0       	ldi	r19, 0x00	; 0
    512a:	40 e8       	ldi	r20, 0x80	; 128
    512c:	5f e3       	ldi	r21, 0x3F	; 63
    512e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5132:	88 23       	and	r24, r24
    5134:	2c f4       	brge	.+10     	; 0x5140 <KEYPAD_enuGetPressedKey+0x12e>
		__ticks = 1;
    5136:	81 e0       	ldi	r24, 0x01	; 1
    5138:	90 e0       	ldi	r25, 0x00	; 0
    513a:	9e 83       	std	Y+6, r25	; 0x06
    513c:	8d 83       	std	Y+5, r24	; 0x05
    513e:	3f c0       	rjmp	.+126    	; 0x51be <KEYPAD_enuGetPressedKey+0x1ac>
	else if (__tmp > 65535)
    5140:	6f 81       	ldd	r22, Y+7	; 0x07
    5142:	78 85       	ldd	r23, Y+8	; 0x08
    5144:	89 85       	ldd	r24, Y+9	; 0x09
    5146:	9a 85       	ldd	r25, Y+10	; 0x0a
    5148:	20 e0       	ldi	r18, 0x00	; 0
    514a:	3f ef       	ldi	r19, 0xFF	; 255
    514c:	4f e7       	ldi	r20, 0x7F	; 127
    514e:	57 e4       	ldi	r21, 0x47	; 71
    5150:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5154:	18 16       	cp	r1, r24
    5156:	4c f5       	brge	.+82     	; 0x51aa <KEYPAD_enuGetPressedKey+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5158:	6b 85       	ldd	r22, Y+11	; 0x0b
    515a:	7c 85       	ldd	r23, Y+12	; 0x0c
    515c:	8d 85       	ldd	r24, Y+13	; 0x0d
    515e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5160:	20 e0       	ldi	r18, 0x00	; 0
    5162:	30 e0       	ldi	r19, 0x00	; 0
    5164:	40 e2       	ldi	r20, 0x20	; 32
    5166:	51 e4       	ldi	r21, 0x41	; 65
    5168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    516c:	dc 01       	movw	r26, r24
    516e:	cb 01       	movw	r24, r22
    5170:	bc 01       	movw	r22, r24
    5172:	cd 01       	movw	r24, r26
    5174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5178:	dc 01       	movw	r26, r24
    517a:	cb 01       	movw	r24, r22
    517c:	9e 83       	std	Y+6, r25	; 0x06
    517e:	8d 83       	std	Y+5, r24	; 0x05
    5180:	0f c0       	rjmp	.+30     	; 0x51a0 <KEYPAD_enuGetPressedKey+0x18e>
    5182:	80 e9       	ldi	r24, 0x90	; 144
    5184:	91 e0       	ldi	r25, 0x01	; 1
    5186:	9c 83       	std	Y+4, r25	; 0x04
    5188:	8b 83       	std	Y+3, r24	; 0x03
    518a:	8b 81       	ldd	r24, Y+3	; 0x03
    518c:	9c 81       	ldd	r25, Y+4	; 0x04
    518e:	01 97       	sbiw	r24, 0x01	; 1
    5190:	f1 f7       	brne	.-4      	; 0x518e <KEYPAD_enuGetPressedKey+0x17c>
    5192:	9c 83       	std	Y+4, r25	; 0x04
    5194:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5196:	8d 81       	ldd	r24, Y+5	; 0x05
    5198:	9e 81       	ldd	r25, Y+6	; 0x06
    519a:	01 97       	sbiw	r24, 0x01	; 1
    519c:	9e 83       	std	Y+6, r25	; 0x06
    519e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51a0:	8d 81       	ldd	r24, Y+5	; 0x05
    51a2:	9e 81       	ldd	r25, Y+6	; 0x06
    51a4:	00 97       	sbiw	r24, 0x00	; 0
    51a6:	69 f7       	brne	.-38     	; 0x5182 <KEYPAD_enuGetPressedKey+0x170>
    51a8:	14 c0       	rjmp	.+40     	; 0x51d2 <KEYPAD_enuGetPressedKey+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51aa:	6f 81       	ldd	r22, Y+7	; 0x07
    51ac:	78 85       	ldd	r23, Y+8	; 0x08
    51ae:	89 85       	ldd	r24, Y+9	; 0x09
    51b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    51b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51b6:	dc 01       	movw	r26, r24
    51b8:	cb 01       	movw	r24, r22
    51ba:	9e 83       	std	Y+6, r25	; 0x06
    51bc:	8d 83       	std	Y+5, r24	; 0x05
    51be:	8d 81       	ldd	r24, Y+5	; 0x05
    51c0:	9e 81       	ldd	r25, Y+6	; 0x06
    51c2:	9a 83       	std	Y+2, r25	; 0x02
    51c4:	89 83       	std	Y+1, r24	; 0x01
    51c6:	89 81       	ldd	r24, Y+1	; 0x01
    51c8:	9a 81       	ldd	r25, Y+2	; 0x02
    51ca:	01 97       	sbiw	r24, 0x01	; 1
    51cc:	f1 f7       	brne	.-4      	; 0x51ca <KEYPAD_enuGetPressedKey+0x1b8>
    51ce:	9a 83       	std	Y+2, r25	; 0x02
    51d0:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(10);
					M_DIO_enuGetPinValue(Local_Au8RowPort[Local_u8RowIter],Local_Au8RowPin[Local_u8RowIter],&Local_u8RowVal);
    51d2:	89 89       	ldd	r24, Y+17	; 0x11
    51d4:	28 2f       	mov	r18, r24
    51d6:	30 e0       	ldi	r19, 0x00	; 0
    51d8:	ce 01       	movw	r24, r28
    51da:	43 96       	adiw	r24, 0x13	; 19
    51dc:	fc 01       	movw	r30, r24
    51de:	e2 0f       	add	r30, r18
    51e0:	f3 1f       	adc	r31, r19
    51e2:	40 81       	ld	r20, Z
    51e4:	89 89       	ldd	r24, Y+17	; 0x11
    51e6:	28 2f       	mov	r18, r24
    51e8:	30 e0       	ldi	r19, 0x00	; 0
    51ea:	ce 01       	movw	r24, r28
    51ec:	47 96       	adiw	r24, 0x17	; 23
    51ee:	fc 01       	movw	r30, r24
    51f0:	e2 0f       	add	r30, r18
    51f2:	f3 1f       	adc	r31, r19
    51f4:	90 81       	ld	r25, Z
    51f6:	9e 01       	movw	r18, r28
    51f8:	2d 5d       	subi	r18, 0xDD	; 221
    51fa:	3f 4f       	sbci	r19, 0xFF	; 255
    51fc:	84 2f       	mov	r24, r20
    51fe:	69 2f       	mov	r22, r25
    5200:	a9 01       	movw	r20, r18
    5202:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <M_DIO_enuGetPinValue>
					if(Local_u8RowVal == DIO_State_Low)
    5206:	8b a1       	ldd	r24, Y+35	; 0x23
    5208:	88 23       	and	r24, r24
    520a:	09 f0       	breq	.+2      	; 0x520e <KEYPAD_enuGetPressedKey+0x1fc>
    520c:	56 c0       	rjmp	.+172    	; 0x52ba <KEYPAD_enuGetPressedKey+0x2a8>
    520e:	1a c0       	rjmp	.+52     	; 0x5244 <KEYPAD_enuGetPressedKey+0x232>
					{
						while(Local_u8RowVal == DIO_State_Low)
											{
												M_DIO_enuGetPinValue(Local_Au8RowPort[Local_u8RowIter],Local_Au8RowPin[Local_u8RowIter],&Local_u8RowVal);
    5210:	89 89       	ldd	r24, Y+17	; 0x11
    5212:	28 2f       	mov	r18, r24
    5214:	30 e0       	ldi	r19, 0x00	; 0
    5216:	ce 01       	movw	r24, r28
    5218:	43 96       	adiw	r24, 0x13	; 19
    521a:	fc 01       	movw	r30, r24
    521c:	e2 0f       	add	r30, r18
    521e:	f3 1f       	adc	r31, r19
    5220:	40 81       	ld	r20, Z
    5222:	89 89       	ldd	r24, Y+17	; 0x11
    5224:	28 2f       	mov	r18, r24
    5226:	30 e0       	ldi	r19, 0x00	; 0
    5228:	ce 01       	movw	r24, r28
    522a:	47 96       	adiw	r24, 0x17	; 23
    522c:	fc 01       	movw	r30, r24
    522e:	e2 0f       	add	r30, r18
    5230:	f3 1f       	adc	r31, r19
    5232:	90 81       	ld	r25, Z
    5234:	9e 01       	movw	r18, r28
    5236:	2d 5d       	subi	r18, 0xDD	; 221
    5238:	3f 4f       	sbci	r19, 0xFF	; 255
    523a:	84 2f       	mov	r24, r20
    523c:	69 2f       	mov	r22, r25
    523e:	a9 01       	movw	r20, r18
    5240:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <M_DIO_enuGetPinValue>
				{
					_delay_ms(10);
					M_DIO_enuGetPinValue(Local_Au8RowPort[Local_u8RowIter],Local_Au8RowPin[Local_u8RowIter],&Local_u8RowVal);
					if(Local_u8RowVal == DIO_State_Low)
					{
						while(Local_u8RowVal == DIO_State_Low)
    5244:	8b a1       	ldd	r24, Y+35	; 0x23
    5246:	88 23       	and	r24, r24
    5248:	19 f3       	breq	.-58     	; 0x5210 <KEYPAD_enuGetPressedKey+0x1fe>
											{
												M_DIO_enuGetPinValue(Local_Au8RowPort[Local_u8RowIter],Local_Au8RowPin[Local_u8RowIter],&Local_u8RowVal);
											}
											u8 Local_Au8KeyValues[Row][Col]=KEYS_VALUES;
    524a:	ce 01       	movw	r24, r28
    524c:	84 96       	adiw	r24, 0x24	; 36
    524e:	9f ab       	std	Y+55, r25	; 0x37
    5250:	8e ab       	std	Y+54, r24	; 0x36
    5252:	e6 ee       	ldi	r30, 0xE6	; 230
    5254:	f1 e0       	ldi	r31, 0x01	; 1
    5256:	f9 af       	std	Y+57, r31	; 0x39
    5258:	e8 af       	std	Y+56, r30	; 0x38
    525a:	f0 e1       	ldi	r31, 0x10	; 16
    525c:	fa af       	std	Y+58, r31	; 0x3a
    525e:	e8 ad       	ldd	r30, Y+56	; 0x38
    5260:	f9 ad       	ldd	r31, Y+57	; 0x39
    5262:	00 80       	ld	r0, Z
    5264:	88 ad       	ldd	r24, Y+56	; 0x38
    5266:	99 ad       	ldd	r25, Y+57	; 0x39
    5268:	01 96       	adiw	r24, 0x01	; 1
    526a:	99 af       	std	Y+57, r25	; 0x39
    526c:	88 af       	std	Y+56, r24	; 0x38
    526e:	ee a9       	ldd	r30, Y+54	; 0x36
    5270:	ff a9       	ldd	r31, Y+55	; 0x37
    5272:	00 82       	st	Z, r0
    5274:	8e a9       	ldd	r24, Y+54	; 0x36
    5276:	9f a9       	ldd	r25, Y+55	; 0x37
    5278:	01 96       	adiw	r24, 0x01	; 1
    527a:	9f ab       	std	Y+55, r25	; 0x37
    527c:	8e ab       	std	Y+54, r24	; 0x36
    527e:	9a ad       	ldd	r25, Y+58	; 0x3a
    5280:	91 50       	subi	r25, 0x01	; 1
    5282:	9a af       	std	Y+58, r25	; 0x3a
    5284:	ea ad       	ldd	r30, Y+58	; 0x3a
    5286:	ee 23       	and	r30, r30
    5288:	51 f7       	brne	.-44     	; 0x525e <KEYPAD_enuGetPressedKey+0x24c>
											*Copy_pu8KeyValue = Local_Au8KeyValues[Local_u8RowIter][Local_u8ColIter];
    528a:	89 89       	ldd	r24, Y+17	; 0x11
    528c:	28 2f       	mov	r18, r24
    528e:	30 e0       	ldi	r19, 0x00	; 0
    5290:	88 89       	ldd	r24, Y+16	; 0x10
    5292:	48 2f       	mov	r20, r24
    5294:	50 e0       	ldi	r21, 0x00	; 0
    5296:	22 0f       	add	r18, r18
    5298:	33 1f       	adc	r19, r19
    529a:	22 0f       	add	r18, r18
    529c:	33 1f       	adc	r19, r19
    529e:	ce 01       	movw	r24, r28
    52a0:	01 96       	adiw	r24, 0x01	; 1
    52a2:	82 0f       	add	r24, r18
    52a4:	93 1f       	adc	r25, r19
    52a6:	84 0f       	add	r24, r20
    52a8:	95 1f       	adc	r25, r21
    52aa:	fc 01       	movw	r30, r24
    52ac:	b3 96       	adiw	r30, 0x23	; 35
    52ae:	80 81       	ld	r24, Z
    52b0:	ec a9       	ldd	r30, Y+52	; 0x34
    52b2:	fd a9       	ldd	r31, Y+53	; 0x35
    52b4:	80 83       	st	Z, r24
											Local_u8Flag =1;
    52b6:	81 e0       	ldi	r24, 0x01	; 1
    52b8:	8f 87       	std	Y+15, r24	; 0x0f
			
		u8 Local_u8RowVal = NOT_PRESSED,Local_u8Flag=0;
		for(; Local_u8ColIter<Col ; Local_u8ColIter++)
		{
			M_DIO_enuSetPinValue(Local_Au8ColPort[Local_u8ColIter],Local_Au8ColPin[Local_u8ColIter],DIO_State_Low);
			for(Local_u8RowIter=0;Local_u8RowIter<Row; Local_u8RowIter++)
    52ba:	89 89       	ldd	r24, Y+17	; 0x11
    52bc:	8f 5f       	subi	r24, 0xFF	; 255
    52be:	89 8b       	std	Y+17, r24	; 0x11
    52c0:	89 89       	ldd	r24, Y+17	; 0x11
    52c2:	84 30       	cpi	r24, 0x04	; 4
    52c4:	08 f4       	brcc	.+2      	; 0x52c8 <KEYPAD_enuGetPressedKey+0x2b6>
    52c6:	f5 ce       	rjmp	.-534    	; 0x50b2 <KEYPAD_enuGetPressedKey+0xa0>
					}

				}
				
			}
			M_DIO_enuSetPinValue(Local_Au8ColPort[Local_u8ColIter],Local_Au8ColPin[Local_u8ColIter],DIO_State_High);
    52c8:	88 89       	ldd	r24, Y+16	; 0x10
    52ca:	28 2f       	mov	r18, r24
    52cc:	30 e0       	ldi	r19, 0x00	; 0
    52ce:	ce 01       	movw	r24, r28
    52d0:	4b 96       	adiw	r24, 0x1b	; 27
    52d2:	fc 01       	movw	r30, r24
    52d4:	e2 0f       	add	r30, r18
    52d6:	f3 1f       	adc	r31, r19
    52d8:	40 81       	ld	r20, Z
    52da:	88 89       	ldd	r24, Y+16	; 0x10
    52dc:	28 2f       	mov	r18, r24
    52de:	30 e0       	ldi	r19, 0x00	; 0
    52e0:	ce 01       	movw	r24, r28
    52e2:	4f 96       	adiw	r24, 0x1f	; 31
    52e4:	fc 01       	movw	r30, r24
    52e6:	e2 0f       	add	r30, r18
    52e8:	f3 1f       	adc	r31, r19
    52ea:	90 81       	ld	r25, Z
    52ec:	84 2f       	mov	r24, r20
    52ee:	69 2f       	mov	r22, r25
    52f0:	41 e0       	ldi	r20, 0x01	; 1
    52f2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
		
		u8 Local_Au8ColPort[Col] = {C1_PRT,C2_PRT,C3_PRT,C4_PRT};
		u8 Local_Au8ColPin[Col] = {C1_PIN,C2_PIN,C3_PIN,C4_PIN};
			
		u8 Local_u8RowVal = NOT_PRESSED,Local_u8Flag=0;
		for(; Local_u8ColIter<Col ; Local_u8ColIter++)
    52f6:	88 89       	ldd	r24, Y+16	; 0x10
    52f8:	8f 5f       	subi	r24, 0xFF	; 255
    52fa:	88 8b       	std	Y+16, r24	; 0x10
    52fc:	88 89       	ldd	r24, Y+16	; 0x10
    52fe:	84 30       	cpi	r24, 0x04	; 4
    5300:	08 f4       	brcc	.+2      	; 0x5304 <KEYPAD_enuGetPressedKey+0x2f2>
    5302:	be ce       	rjmp	.-644    	; 0x5080 <KEYPAD_enuGetPressedKey+0x6e>
				}
				
			}
			M_DIO_enuSetPinValue(Local_Au8ColPort[Local_u8ColIter],Local_Au8ColPin[Local_u8ColIter],DIO_State_High);
		}
		if(!Local_u8Flag)
    5304:	8f 85       	ldd	r24, Y+15	; 0x0f
    5306:	88 23       	and	r24, r24
    5308:	39 f4       	brne	.+14     	; 0x5318 <KEYPAD_enuGetPressedKey+0x306>
		{
			*Copy_pu8KeyValue = NOT_PRESSED;
    530a:	ec a9       	ldd	r30, Y+52	; 0x34
    530c:	fd a9       	ldd	r31, Y+53	; 0x35
    530e:	8f ef       	ldi	r24, 0xFF	; 255
    5310:	80 83       	st	Z, r24
    5312:	02 c0       	rjmp	.+4      	; 0x5318 <KEYPAD_enuGetPressedKey+0x306>
		}		
	}else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
    5314:	83 e0       	ldi	r24, 0x03	; 3
    5316:	8a 8b       	std	Y+18, r24	; 0x12
	}
	
	
	
	return Local_u8ErrorState;
    5318:	8a 89       	ldd	r24, Y+18	; 0x12
}
    531a:	ea 96       	adiw	r28, 0x3a	; 58
    531c:	0f b6       	in	r0, 0x3f	; 63
    531e:	f8 94       	cli
    5320:	de bf       	out	0x3e, r29	; 62
    5322:	0f be       	out	0x3f, r0	; 63
    5324:	cd bf       	out	0x3d, r28	; 61
    5326:	cf 91       	pop	r28
    5328:	df 91       	pop	r29
    532a:	08 95       	ret

0000532c <Buzzer_enuInit>:
#include "Buzzer_Private.h"
#include "Buzzer_Interface.h"

extern u8 Buzzer_u8BuzzerNum;
ES_t Buzzer_enuInit(Buzzer_t *Copy_pAstrBuzzerConfig)
{
    532c:	df 93       	push	r29
    532e:	cf 93       	push	r28
    5330:	00 d0       	rcall	.+0      	; 0x5332 <Buzzer_enuInit+0x6>
    5332:	00 d0       	rcall	.+0      	; 0x5334 <Buzzer_enuInit+0x8>
    5334:	cd b7       	in	r28, 0x3d	; 61
    5336:	de b7       	in	r29, 0x3e	; 62
    5338:	9c 83       	std	Y+4, r25	; 0x04
    533a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState =ES_NOK;
    533c:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pAstrBuzzerConfig !=NULL)
    533e:	8b 81       	ldd	r24, Y+3	; 0x03
    5340:	9c 81       	ldd	r25, Y+4	; 0x04
    5342:	00 97       	sbiw	r24, 0x00	; 0
    5344:	09 f4       	brne	.+2      	; 0x5348 <Buzzer_enuInit+0x1c>
    5346:	48 c0       	rjmp	.+144    	; 0x53d8 <Buzzer_enuInit+0xac>
	{
		u8 Local_u8Iter=0;
    5348:	19 82       	std	Y+1, r1	; 0x01
    534a:	3d c0       	rjmp	.+122    	; 0x53c6 <Buzzer_enuInit+0x9a>
		for(;Local_u8Iter<Buzzer_u8BuzzerNum; Local_u8Iter++)
		{

			M_DIO_enuSetPinDirection(Copy_pAstrBuzzerConfig[Local_u8Iter].Buzzer_Port,Copy_pAstrBuzzerConfig[Local_u8Iter].Buzzer_Pin,DIO_Direction_Output);
    534c:	89 81       	ldd	r24, Y+1	; 0x01
    534e:	88 2f       	mov	r24, r24
    5350:	90 e0       	ldi	r25, 0x00	; 0
    5352:	9c 01       	movw	r18, r24
    5354:	22 0f       	add	r18, r18
    5356:	33 1f       	adc	r19, r19
    5358:	8b 81       	ldd	r24, Y+3	; 0x03
    535a:	9c 81       	ldd	r25, Y+4	; 0x04
    535c:	fc 01       	movw	r30, r24
    535e:	e2 0f       	add	r30, r18
    5360:	f3 1f       	adc	r31, r19
    5362:	40 81       	ld	r20, Z
    5364:	89 81       	ldd	r24, Y+1	; 0x01
    5366:	88 2f       	mov	r24, r24
    5368:	90 e0       	ldi	r25, 0x00	; 0
    536a:	9c 01       	movw	r18, r24
    536c:	22 0f       	add	r18, r18
    536e:	33 1f       	adc	r19, r19
    5370:	8b 81       	ldd	r24, Y+3	; 0x03
    5372:	9c 81       	ldd	r25, Y+4	; 0x04
    5374:	fc 01       	movw	r30, r24
    5376:	e2 0f       	add	r30, r18
    5378:	f3 1f       	adc	r31, r19
    537a:	91 81       	ldd	r25, Z+1	; 0x01
    537c:	84 2f       	mov	r24, r20
    537e:	69 2f       	mov	r22, r25
    5380:	41 e0       	ldi	r20, 0x01	; 1
    5382:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <M_DIO_enuSetPinDirection>
			M_DIO_enuSetPinValue(Copy_pAstrBuzzerConfig[Local_u8Iter].Buzzer_Port,Copy_pAstrBuzzerConfig[Local_u8Iter].Buzzer_Pin,DIO_State_Low);
    5386:	89 81       	ldd	r24, Y+1	; 0x01
    5388:	88 2f       	mov	r24, r24
    538a:	90 e0       	ldi	r25, 0x00	; 0
    538c:	9c 01       	movw	r18, r24
    538e:	22 0f       	add	r18, r18
    5390:	33 1f       	adc	r19, r19
    5392:	8b 81       	ldd	r24, Y+3	; 0x03
    5394:	9c 81       	ldd	r25, Y+4	; 0x04
    5396:	fc 01       	movw	r30, r24
    5398:	e2 0f       	add	r30, r18
    539a:	f3 1f       	adc	r31, r19
    539c:	40 81       	ld	r20, Z
    539e:	89 81       	ldd	r24, Y+1	; 0x01
    53a0:	88 2f       	mov	r24, r24
    53a2:	90 e0       	ldi	r25, 0x00	; 0
    53a4:	9c 01       	movw	r18, r24
    53a6:	22 0f       	add	r18, r18
    53a8:	33 1f       	adc	r19, r19
    53aa:	8b 81       	ldd	r24, Y+3	; 0x03
    53ac:	9c 81       	ldd	r25, Y+4	; 0x04
    53ae:	fc 01       	movw	r30, r24
    53b0:	e2 0f       	add	r30, r18
    53b2:	f3 1f       	adc	r31, r19
    53b4:	91 81       	ldd	r25, Z+1	; 0x01
    53b6:	84 2f       	mov	r24, r20
    53b8:	69 2f       	mov	r22, r25
    53ba:	40 e0       	ldi	r20, 0x00	; 0
    53bc:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
{
	u8 Local_u8ErrorState =ES_NOK;
	if(Copy_pAstrBuzzerConfig !=NULL)
	{
		u8 Local_u8Iter=0;
		for(;Local_u8Iter<Buzzer_u8BuzzerNum; Local_u8Iter++)
    53c0:	89 81       	ldd	r24, Y+1	; 0x01
    53c2:	8f 5f       	subi	r24, 0xFF	; 255
    53c4:	89 83       	std	Y+1, r24	; 0x01
    53c6:	90 91 e3 01 	lds	r25, 0x01E3
    53ca:	89 81       	ldd	r24, Y+1	; 0x01
    53cc:	89 17       	cp	r24, r25
    53ce:	08 f4       	brcc	.+2      	; 0x53d2 <Buzzer_enuInit+0xa6>
    53d0:	bd cf       	rjmp	.-134    	; 0x534c <Buzzer_enuInit+0x20>
		{

			M_DIO_enuSetPinDirection(Copy_pAstrBuzzerConfig[Local_u8Iter].Buzzer_Port,Copy_pAstrBuzzerConfig[Local_u8Iter].Buzzer_Pin,DIO_Direction_Output);
			M_DIO_enuSetPinValue(Copy_pAstrBuzzerConfig[Local_u8Iter].Buzzer_Port,Copy_pAstrBuzzerConfig[Local_u8Iter].Buzzer_Pin,DIO_State_Low);
		}
		Local_u8ErrorState = ES_OK;
    53d2:	81 e0       	ldi	r24, 0x01	; 1
    53d4:	8a 83       	std	Y+2, r24	; 0x02
    53d6:	02 c0       	rjmp	.+4      	; 0x53dc <Buzzer_enuInit+0xb0>
	}else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
    53d8:	83 e0       	ldi	r24, 0x03	; 3
    53da:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    53dc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    53de:	0f 90       	pop	r0
    53e0:	0f 90       	pop	r0
    53e2:	0f 90       	pop	r0
    53e4:	0f 90       	pop	r0
    53e6:	cf 91       	pop	r28
    53e8:	df 91       	pop	r29
    53ea:	08 95       	ret

000053ec <Buzzer_enuON>:
ES_t Buzzer_enuON(Buzzer_t *Copy_pstrBuzzerInfo)
{
    53ec:	df 93       	push	r29
    53ee:	cf 93       	push	r28
    53f0:	00 d0       	rcall	.+0      	; 0x53f2 <Buzzer_enuON+0x6>
    53f2:	cd b7       	in	r28, 0x3d	; 61
    53f4:	de b7       	in	r29, 0x3e	; 62
    53f6:	9a 83       	std	Y+2, r25	; 0x02
    53f8:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_enuSetPinValue(Copy_pstrBuzzerInfo->Buzzer_Port,Copy_pstrBuzzerInfo->Buzzer_Pin,DIO_State_High);
    53fa:	e9 81       	ldd	r30, Y+1	; 0x01
    53fc:	fa 81       	ldd	r31, Y+2	; 0x02
    53fe:	80 81       	ld	r24, Z
    5400:	e9 81       	ldd	r30, Y+1	; 0x01
    5402:	fa 81       	ldd	r31, Y+2	; 0x02
    5404:	91 81       	ldd	r25, Z+1	; 0x01
    5406:	69 2f       	mov	r22, r25
    5408:	41 e0       	ldi	r20, 0x01	; 1
    540a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	return ES_OK;
    540e:	81 e0       	ldi	r24, 0x01	; 1
}
    5410:	0f 90       	pop	r0
    5412:	0f 90       	pop	r0
    5414:	cf 91       	pop	r28
    5416:	df 91       	pop	r29
    5418:	08 95       	ret

0000541a <Buzzer_enuOFF>:
ES_t Buzzer_enuOFF(Buzzer_t *Copy_pstrBuzzerInfo)
{
    541a:	df 93       	push	r29
    541c:	cf 93       	push	r28
    541e:	00 d0       	rcall	.+0      	; 0x5420 <Buzzer_enuOFF+0x6>
    5420:	cd b7       	in	r28, 0x3d	; 61
    5422:	de b7       	in	r29, 0x3e	; 62
    5424:	9a 83       	std	Y+2, r25	; 0x02
    5426:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_enuSetPinValue(Copy_pstrBuzzerInfo->Buzzer_Port,Copy_pstrBuzzerInfo->Buzzer_Pin,DIO_State_Low);
    5428:	e9 81       	ldd	r30, Y+1	; 0x01
    542a:	fa 81       	ldd	r31, Y+2	; 0x02
    542c:	80 81       	ld	r24, Z
    542e:	e9 81       	ldd	r30, Y+1	; 0x01
    5430:	fa 81       	ldd	r31, Y+2	; 0x02
    5432:	91 81       	ldd	r25, Z+1	; 0x01
    5434:	69 2f       	mov	r22, r25
    5436:	40 e0       	ldi	r20, 0x00	; 0
    5438:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	return ES_OK;
    543c:	81 e0       	ldi	r24, 0x01	; 1
}
    543e:	0f 90       	pop	r0
    5440:	0f 90       	pop	r0
    5442:	cf 91       	pop	r28
    5444:	df 91       	pop	r29
    5446:	08 95       	ret

00005448 <Buzzer_enuToggle>:
ES_t Buzzer_enuToggle(Buzzer_t *Copy_pstrBuzzerInfo)
{
    5448:	df 93       	push	r29
    544a:	cf 93       	push	r28
    544c:	00 d0       	rcall	.+0      	; 0x544e <Buzzer_enuToggle+0x6>
    544e:	cd b7       	in	r28, 0x3d	; 61
    5450:	de b7       	in	r29, 0x3e	; 62
    5452:	9a 83       	std	Y+2, r25	; 0x02
    5454:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_enuTogglePinValue(Copy_pstrBuzzerInfo->Buzzer_Port,Copy_pstrBuzzerInfo->Buzzer_Pin);
    5456:	e9 81       	ldd	r30, Y+1	; 0x01
    5458:	fa 81       	ldd	r31, Y+2	; 0x02
    545a:	80 81       	ld	r24, Z
    545c:	e9 81       	ldd	r30, Y+1	; 0x01
    545e:	fa 81       	ldd	r31, Y+2	; 0x02
    5460:	91 81       	ldd	r25, Z+1	; 0x01
    5462:	69 2f       	mov	r22, r25
    5464:	0e 94 92 10 	call	0x2124	; 0x2124 <M_DIO_enuTogglePinValue>
	return ES_OK;
    5468:	81 e0       	ldi	r24, 0x01	; 1
}
    546a:	0f 90       	pop	r0
    546c:	0f 90       	pop	r0
    546e:	cf 91       	pop	r28
    5470:	df 91       	pop	r29
    5472:	08 95       	ret

00005474 <Buzzer_enuOnce>:
ES_t Buzzer_enuOnce(Buzzer_t* Copy_pstrBuzzerInfo)
{
    5474:	df 93       	push	r29
    5476:	cf 93       	push	r28
    5478:	cd b7       	in	r28, 0x3d	; 61
    547a:	de b7       	in	r29, 0x3e	; 62
    547c:	60 97       	sbiw	r28, 0x10	; 16
    547e:	0f b6       	in	r0, 0x3f	; 63
    5480:	f8 94       	cli
    5482:	de bf       	out	0x3e, r29	; 62
    5484:	0f be       	out	0x3f, r0	; 63
    5486:	cd bf       	out	0x3d, r28	; 61
    5488:	98 8b       	std	Y+16, r25	; 0x10
    548a:	8f 87       	std	Y+15, r24	; 0x0f
	M_DIO_enuSetPinValue(Copy_pstrBuzzerInfo->Buzzer_Port,Copy_pstrBuzzerInfo->Buzzer_Pin,DIO_State_High);
    548c:	ef 85       	ldd	r30, Y+15	; 0x0f
    548e:	f8 89       	ldd	r31, Y+16	; 0x10
    5490:	80 81       	ld	r24, Z
    5492:	ef 85       	ldd	r30, Y+15	; 0x0f
    5494:	f8 89       	ldd	r31, Y+16	; 0x10
    5496:	91 81       	ldd	r25, Z+1	; 0x01
    5498:	69 2f       	mov	r22, r25
    549a:	41 e0       	ldi	r20, 0x01	; 1
    549c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
    54a0:	80 e0       	ldi	r24, 0x00	; 0
    54a2:	90 e0       	ldi	r25, 0x00	; 0
    54a4:	a8 ec       	ldi	r26, 0xC8	; 200
    54a6:	b2 e4       	ldi	r27, 0x42	; 66
    54a8:	8b 87       	std	Y+11, r24	; 0x0b
    54aa:	9c 87       	std	Y+12, r25	; 0x0c
    54ac:	ad 87       	std	Y+13, r26	; 0x0d
    54ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    54b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    54b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    54b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    54b8:	20 e0       	ldi	r18, 0x00	; 0
    54ba:	30 e0       	ldi	r19, 0x00	; 0
    54bc:	4a e7       	ldi	r20, 0x7A	; 122
    54be:	55 e4       	ldi	r21, 0x45	; 69
    54c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54c4:	dc 01       	movw	r26, r24
    54c6:	cb 01       	movw	r24, r22
    54c8:	8f 83       	std	Y+7, r24	; 0x07
    54ca:	98 87       	std	Y+8, r25	; 0x08
    54cc:	a9 87       	std	Y+9, r26	; 0x09
    54ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    54d0:	6f 81       	ldd	r22, Y+7	; 0x07
    54d2:	78 85       	ldd	r23, Y+8	; 0x08
    54d4:	89 85       	ldd	r24, Y+9	; 0x09
    54d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    54d8:	20 e0       	ldi	r18, 0x00	; 0
    54da:	30 e0       	ldi	r19, 0x00	; 0
    54dc:	40 e8       	ldi	r20, 0x80	; 128
    54de:	5f e3       	ldi	r21, 0x3F	; 63
    54e0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    54e4:	88 23       	and	r24, r24
    54e6:	2c f4       	brge	.+10     	; 0x54f2 <Buzzer_enuOnce+0x7e>
		__ticks = 1;
    54e8:	81 e0       	ldi	r24, 0x01	; 1
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	9e 83       	std	Y+6, r25	; 0x06
    54ee:	8d 83       	std	Y+5, r24	; 0x05
    54f0:	3f c0       	rjmp	.+126    	; 0x5570 <Buzzer_enuOnce+0xfc>
	else if (__tmp > 65535)
    54f2:	6f 81       	ldd	r22, Y+7	; 0x07
    54f4:	78 85       	ldd	r23, Y+8	; 0x08
    54f6:	89 85       	ldd	r24, Y+9	; 0x09
    54f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    54fa:	20 e0       	ldi	r18, 0x00	; 0
    54fc:	3f ef       	ldi	r19, 0xFF	; 255
    54fe:	4f e7       	ldi	r20, 0x7F	; 127
    5500:	57 e4       	ldi	r21, 0x47	; 71
    5502:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5506:	18 16       	cp	r1, r24
    5508:	4c f5       	brge	.+82     	; 0x555c <Buzzer_enuOnce+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    550a:	6b 85       	ldd	r22, Y+11	; 0x0b
    550c:	7c 85       	ldd	r23, Y+12	; 0x0c
    550e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5510:	9e 85       	ldd	r25, Y+14	; 0x0e
    5512:	20 e0       	ldi	r18, 0x00	; 0
    5514:	30 e0       	ldi	r19, 0x00	; 0
    5516:	40 e2       	ldi	r20, 0x20	; 32
    5518:	51 e4       	ldi	r21, 0x41	; 65
    551a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    551e:	dc 01       	movw	r26, r24
    5520:	cb 01       	movw	r24, r22
    5522:	bc 01       	movw	r22, r24
    5524:	cd 01       	movw	r24, r26
    5526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    552a:	dc 01       	movw	r26, r24
    552c:	cb 01       	movw	r24, r22
    552e:	9e 83       	std	Y+6, r25	; 0x06
    5530:	8d 83       	std	Y+5, r24	; 0x05
    5532:	0f c0       	rjmp	.+30     	; 0x5552 <Buzzer_enuOnce+0xde>
    5534:	80 e9       	ldi	r24, 0x90	; 144
    5536:	91 e0       	ldi	r25, 0x01	; 1
    5538:	9c 83       	std	Y+4, r25	; 0x04
    553a:	8b 83       	std	Y+3, r24	; 0x03
    553c:	8b 81       	ldd	r24, Y+3	; 0x03
    553e:	9c 81       	ldd	r25, Y+4	; 0x04
    5540:	01 97       	sbiw	r24, 0x01	; 1
    5542:	f1 f7       	brne	.-4      	; 0x5540 <Buzzer_enuOnce+0xcc>
    5544:	9c 83       	std	Y+4, r25	; 0x04
    5546:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5548:	8d 81       	ldd	r24, Y+5	; 0x05
    554a:	9e 81       	ldd	r25, Y+6	; 0x06
    554c:	01 97       	sbiw	r24, 0x01	; 1
    554e:	9e 83       	std	Y+6, r25	; 0x06
    5550:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5552:	8d 81       	ldd	r24, Y+5	; 0x05
    5554:	9e 81       	ldd	r25, Y+6	; 0x06
    5556:	00 97       	sbiw	r24, 0x00	; 0
    5558:	69 f7       	brne	.-38     	; 0x5534 <Buzzer_enuOnce+0xc0>
    555a:	14 c0       	rjmp	.+40     	; 0x5584 <Buzzer_enuOnce+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    555c:	6f 81       	ldd	r22, Y+7	; 0x07
    555e:	78 85       	ldd	r23, Y+8	; 0x08
    5560:	89 85       	ldd	r24, Y+9	; 0x09
    5562:	9a 85       	ldd	r25, Y+10	; 0x0a
    5564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5568:	dc 01       	movw	r26, r24
    556a:	cb 01       	movw	r24, r22
    556c:	9e 83       	std	Y+6, r25	; 0x06
    556e:	8d 83       	std	Y+5, r24	; 0x05
    5570:	8d 81       	ldd	r24, Y+5	; 0x05
    5572:	9e 81       	ldd	r25, Y+6	; 0x06
    5574:	9a 83       	std	Y+2, r25	; 0x02
    5576:	89 83       	std	Y+1, r24	; 0x01
    5578:	89 81       	ldd	r24, Y+1	; 0x01
    557a:	9a 81       	ldd	r25, Y+2	; 0x02
    557c:	01 97       	sbiw	r24, 0x01	; 1
    557e:	f1 f7       	brne	.-4      	; 0x557c <Buzzer_enuOnce+0x108>
    5580:	9a 83       	std	Y+2, r25	; 0x02
    5582:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	M_DIO_enuSetPinValue(Copy_pstrBuzzerInfo->Buzzer_Port,Copy_pstrBuzzerInfo->Buzzer_Pin,DIO_State_Low);
    5584:	ef 85       	ldd	r30, Y+15	; 0x0f
    5586:	f8 89       	ldd	r31, Y+16	; 0x10
    5588:	80 81       	ld	r24, Z
    558a:	ef 85       	ldd	r30, Y+15	; 0x0f
    558c:	f8 89       	ldd	r31, Y+16	; 0x10
    558e:	91 81       	ldd	r25, Z+1	; 0x01
    5590:	69 2f       	mov	r22, r25
    5592:	40 e0       	ldi	r20, 0x00	; 0
    5594:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	return ES_OK;
    5598:	81 e0       	ldi	r24, 0x01	; 1
}
    559a:	60 96       	adiw	r28, 0x10	; 16
    559c:	0f b6       	in	r0, 0x3f	; 63
    559e:	f8 94       	cli
    55a0:	de bf       	out	0x3e, r29	; 62
    55a2:	0f be       	out	0x3f, r0	; 63
    55a4:	cd bf       	out	0x3d, r28	; 61
    55a6:	cf 91       	pop	r28
    55a8:	df 91       	pop	r29
    55aa:	08 95       	ret

000055ac <Buzzer_enuTwice>:
ES_t Buzzer_enuTwice(Buzzer_t *Copy_pstrBuzzerInfo)
{
    55ac:	df 93       	push	r29
    55ae:	cf 93       	push	r28
    55b0:	cd b7       	in	r28, 0x3d	; 61
    55b2:	de b7       	in	r29, 0x3e	; 62
    55b4:	ac 97       	sbiw	r28, 0x2c	; 44
    55b6:	0f b6       	in	r0, 0x3f	; 63
    55b8:	f8 94       	cli
    55ba:	de bf       	out	0x3e, r29	; 62
    55bc:	0f be       	out	0x3f, r0	; 63
    55be:	cd bf       	out	0x3d, r28	; 61
    55c0:	9c a7       	std	Y+44, r25	; 0x2c
    55c2:	8b a7       	std	Y+43, r24	; 0x2b
	M_DIO_enuSetPinValue(Copy_pstrBuzzerInfo->Buzzer_Port,Copy_pstrBuzzerInfo->Buzzer_Pin,DIO_State_High);
    55c4:	eb a5       	ldd	r30, Y+43	; 0x2b
    55c6:	fc a5       	ldd	r31, Y+44	; 0x2c
    55c8:	80 81       	ld	r24, Z
    55ca:	eb a5       	ldd	r30, Y+43	; 0x2b
    55cc:	fc a5       	ldd	r31, Y+44	; 0x2c
    55ce:	91 81       	ldd	r25, Z+1	; 0x01
    55d0:	69 2f       	mov	r22, r25
    55d2:	41 e0       	ldi	r20, 0x01	; 1
    55d4:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
    55d8:	80 e0       	ldi	r24, 0x00	; 0
    55da:	90 e0       	ldi	r25, 0x00	; 0
    55dc:	a8 e4       	ldi	r26, 0x48	; 72
    55de:	b3 e4       	ldi	r27, 0x43	; 67
    55e0:	8f a3       	std	Y+39, r24	; 0x27
    55e2:	98 a7       	std	Y+40, r25	; 0x28
    55e4:	a9 a7       	std	Y+41, r26	; 0x29
    55e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55e8:	6f a1       	ldd	r22, Y+39	; 0x27
    55ea:	78 a5       	ldd	r23, Y+40	; 0x28
    55ec:	89 a5       	ldd	r24, Y+41	; 0x29
    55ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    55f0:	20 e0       	ldi	r18, 0x00	; 0
    55f2:	30 e0       	ldi	r19, 0x00	; 0
    55f4:	4a e7       	ldi	r20, 0x7A	; 122
    55f6:	55 e4       	ldi	r21, 0x45	; 69
    55f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55fc:	dc 01       	movw	r26, r24
    55fe:	cb 01       	movw	r24, r22
    5600:	8b a3       	std	Y+35, r24	; 0x23
    5602:	9c a3       	std	Y+36, r25	; 0x24
    5604:	ad a3       	std	Y+37, r26	; 0x25
    5606:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5608:	6b a1       	ldd	r22, Y+35	; 0x23
    560a:	7c a1       	ldd	r23, Y+36	; 0x24
    560c:	8d a1       	ldd	r24, Y+37	; 0x25
    560e:	9e a1       	ldd	r25, Y+38	; 0x26
    5610:	20 e0       	ldi	r18, 0x00	; 0
    5612:	30 e0       	ldi	r19, 0x00	; 0
    5614:	40 e8       	ldi	r20, 0x80	; 128
    5616:	5f e3       	ldi	r21, 0x3F	; 63
    5618:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    561c:	88 23       	and	r24, r24
    561e:	2c f4       	brge	.+10     	; 0x562a <Buzzer_enuTwice+0x7e>
		__ticks = 1;
    5620:	81 e0       	ldi	r24, 0x01	; 1
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	9a a3       	std	Y+34, r25	; 0x22
    5626:	89 a3       	std	Y+33, r24	; 0x21
    5628:	3f c0       	rjmp	.+126    	; 0x56a8 <Buzzer_enuTwice+0xfc>
	else if (__tmp > 65535)
    562a:	6b a1       	ldd	r22, Y+35	; 0x23
    562c:	7c a1       	ldd	r23, Y+36	; 0x24
    562e:	8d a1       	ldd	r24, Y+37	; 0x25
    5630:	9e a1       	ldd	r25, Y+38	; 0x26
    5632:	20 e0       	ldi	r18, 0x00	; 0
    5634:	3f ef       	ldi	r19, 0xFF	; 255
    5636:	4f e7       	ldi	r20, 0x7F	; 127
    5638:	57 e4       	ldi	r21, 0x47	; 71
    563a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    563e:	18 16       	cp	r1, r24
    5640:	4c f5       	brge	.+82     	; 0x5694 <Buzzer_enuTwice+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5642:	6f a1       	ldd	r22, Y+39	; 0x27
    5644:	78 a5       	ldd	r23, Y+40	; 0x28
    5646:	89 a5       	ldd	r24, Y+41	; 0x29
    5648:	9a a5       	ldd	r25, Y+42	; 0x2a
    564a:	20 e0       	ldi	r18, 0x00	; 0
    564c:	30 e0       	ldi	r19, 0x00	; 0
    564e:	40 e2       	ldi	r20, 0x20	; 32
    5650:	51 e4       	ldi	r21, 0x41	; 65
    5652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5656:	dc 01       	movw	r26, r24
    5658:	cb 01       	movw	r24, r22
    565a:	bc 01       	movw	r22, r24
    565c:	cd 01       	movw	r24, r26
    565e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5662:	dc 01       	movw	r26, r24
    5664:	cb 01       	movw	r24, r22
    5666:	9a a3       	std	Y+34, r25	; 0x22
    5668:	89 a3       	std	Y+33, r24	; 0x21
    566a:	0f c0       	rjmp	.+30     	; 0x568a <Buzzer_enuTwice+0xde>
    566c:	80 e9       	ldi	r24, 0x90	; 144
    566e:	91 e0       	ldi	r25, 0x01	; 1
    5670:	98 a3       	std	Y+32, r25	; 0x20
    5672:	8f 8f       	std	Y+31, r24	; 0x1f
    5674:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5676:	98 a1       	ldd	r25, Y+32	; 0x20
    5678:	01 97       	sbiw	r24, 0x01	; 1
    567a:	f1 f7       	brne	.-4      	; 0x5678 <Buzzer_enuTwice+0xcc>
    567c:	98 a3       	std	Y+32, r25	; 0x20
    567e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5680:	89 a1       	ldd	r24, Y+33	; 0x21
    5682:	9a a1       	ldd	r25, Y+34	; 0x22
    5684:	01 97       	sbiw	r24, 0x01	; 1
    5686:	9a a3       	std	Y+34, r25	; 0x22
    5688:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    568a:	89 a1       	ldd	r24, Y+33	; 0x21
    568c:	9a a1       	ldd	r25, Y+34	; 0x22
    568e:	00 97       	sbiw	r24, 0x00	; 0
    5690:	69 f7       	brne	.-38     	; 0x566c <Buzzer_enuTwice+0xc0>
    5692:	14 c0       	rjmp	.+40     	; 0x56bc <Buzzer_enuTwice+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5694:	6b a1       	ldd	r22, Y+35	; 0x23
    5696:	7c a1       	ldd	r23, Y+36	; 0x24
    5698:	8d a1       	ldd	r24, Y+37	; 0x25
    569a:	9e a1       	ldd	r25, Y+38	; 0x26
    569c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56a0:	dc 01       	movw	r26, r24
    56a2:	cb 01       	movw	r24, r22
    56a4:	9a a3       	std	Y+34, r25	; 0x22
    56a6:	89 a3       	std	Y+33, r24	; 0x21
    56a8:	89 a1       	ldd	r24, Y+33	; 0x21
    56aa:	9a a1       	ldd	r25, Y+34	; 0x22
    56ac:	9e 8f       	std	Y+30, r25	; 0x1e
    56ae:	8d 8f       	std	Y+29, r24	; 0x1d
    56b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    56b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    56b4:	01 97       	sbiw	r24, 0x01	; 1
    56b6:	f1 f7       	brne	.-4      	; 0x56b4 <Buzzer_enuTwice+0x108>
    56b8:	9e 8f       	std	Y+30, r25	; 0x1e
    56ba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);
	M_DIO_enuTogglePinValue(Copy_pstrBuzzerInfo->Buzzer_Port,Copy_pstrBuzzerInfo->Buzzer_Pin);
    56bc:	eb a5       	ldd	r30, Y+43	; 0x2b
    56be:	fc a5       	ldd	r31, Y+44	; 0x2c
    56c0:	80 81       	ld	r24, Z
    56c2:	eb a5       	ldd	r30, Y+43	; 0x2b
    56c4:	fc a5       	ldd	r31, Y+44	; 0x2c
    56c6:	91 81       	ldd	r25, Z+1	; 0x01
    56c8:	69 2f       	mov	r22, r25
    56ca:	0e 94 92 10 	call	0x2124	; 0x2124 <M_DIO_enuTogglePinValue>
    56ce:	80 e0       	ldi	r24, 0x00	; 0
    56d0:	90 e0       	ldi	r25, 0x00	; 0
    56d2:	a8 e4       	ldi	r26, 0x48	; 72
    56d4:	b3 e4       	ldi	r27, 0x43	; 67
    56d6:	89 8f       	std	Y+25, r24	; 0x19
    56d8:	9a 8f       	std	Y+26, r25	; 0x1a
    56da:	ab 8f       	std	Y+27, r26	; 0x1b
    56dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56de:	69 8d       	ldd	r22, Y+25	; 0x19
    56e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    56e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56e6:	20 e0       	ldi	r18, 0x00	; 0
    56e8:	30 e0       	ldi	r19, 0x00	; 0
    56ea:	4a e7       	ldi	r20, 0x7A	; 122
    56ec:	55 e4       	ldi	r21, 0x45	; 69
    56ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56f2:	dc 01       	movw	r26, r24
    56f4:	cb 01       	movw	r24, r22
    56f6:	8d 8b       	std	Y+21, r24	; 0x15
    56f8:	9e 8b       	std	Y+22, r25	; 0x16
    56fa:	af 8b       	std	Y+23, r26	; 0x17
    56fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    56fe:	6d 89       	ldd	r22, Y+21	; 0x15
    5700:	7e 89       	ldd	r23, Y+22	; 0x16
    5702:	8f 89       	ldd	r24, Y+23	; 0x17
    5704:	98 8d       	ldd	r25, Y+24	; 0x18
    5706:	20 e0       	ldi	r18, 0x00	; 0
    5708:	30 e0       	ldi	r19, 0x00	; 0
    570a:	40 e8       	ldi	r20, 0x80	; 128
    570c:	5f e3       	ldi	r21, 0x3F	; 63
    570e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5712:	88 23       	and	r24, r24
    5714:	2c f4       	brge	.+10     	; 0x5720 <Buzzer_enuTwice+0x174>
		__ticks = 1;
    5716:	81 e0       	ldi	r24, 0x01	; 1
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	9c 8b       	std	Y+20, r25	; 0x14
    571c:	8b 8b       	std	Y+19, r24	; 0x13
    571e:	3f c0       	rjmp	.+126    	; 0x579e <Buzzer_enuTwice+0x1f2>
	else if (__tmp > 65535)
    5720:	6d 89       	ldd	r22, Y+21	; 0x15
    5722:	7e 89       	ldd	r23, Y+22	; 0x16
    5724:	8f 89       	ldd	r24, Y+23	; 0x17
    5726:	98 8d       	ldd	r25, Y+24	; 0x18
    5728:	20 e0       	ldi	r18, 0x00	; 0
    572a:	3f ef       	ldi	r19, 0xFF	; 255
    572c:	4f e7       	ldi	r20, 0x7F	; 127
    572e:	57 e4       	ldi	r21, 0x47	; 71
    5730:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5734:	18 16       	cp	r1, r24
    5736:	4c f5       	brge	.+82     	; 0x578a <Buzzer_enuTwice+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5738:	69 8d       	ldd	r22, Y+25	; 0x19
    573a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    573c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    573e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5740:	20 e0       	ldi	r18, 0x00	; 0
    5742:	30 e0       	ldi	r19, 0x00	; 0
    5744:	40 e2       	ldi	r20, 0x20	; 32
    5746:	51 e4       	ldi	r21, 0x41	; 65
    5748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    574c:	dc 01       	movw	r26, r24
    574e:	cb 01       	movw	r24, r22
    5750:	bc 01       	movw	r22, r24
    5752:	cd 01       	movw	r24, r26
    5754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5758:	dc 01       	movw	r26, r24
    575a:	cb 01       	movw	r24, r22
    575c:	9c 8b       	std	Y+20, r25	; 0x14
    575e:	8b 8b       	std	Y+19, r24	; 0x13
    5760:	0f c0       	rjmp	.+30     	; 0x5780 <Buzzer_enuTwice+0x1d4>
    5762:	80 e9       	ldi	r24, 0x90	; 144
    5764:	91 e0       	ldi	r25, 0x01	; 1
    5766:	9a 8b       	std	Y+18, r25	; 0x12
    5768:	89 8b       	std	Y+17, r24	; 0x11
    576a:	89 89       	ldd	r24, Y+17	; 0x11
    576c:	9a 89       	ldd	r25, Y+18	; 0x12
    576e:	01 97       	sbiw	r24, 0x01	; 1
    5770:	f1 f7       	brne	.-4      	; 0x576e <Buzzer_enuTwice+0x1c2>
    5772:	9a 8b       	std	Y+18, r25	; 0x12
    5774:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5776:	8b 89       	ldd	r24, Y+19	; 0x13
    5778:	9c 89       	ldd	r25, Y+20	; 0x14
    577a:	01 97       	sbiw	r24, 0x01	; 1
    577c:	9c 8b       	std	Y+20, r25	; 0x14
    577e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5780:	8b 89       	ldd	r24, Y+19	; 0x13
    5782:	9c 89       	ldd	r25, Y+20	; 0x14
    5784:	00 97       	sbiw	r24, 0x00	; 0
    5786:	69 f7       	brne	.-38     	; 0x5762 <Buzzer_enuTwice+0x1b6>
    5788:	14 c0       	rjmp	.+40     	; 0x57b2 <Buzzer_enuTwice+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    578a:	6d 89       	ldd	r22, Y+21	; 0x15
    578c:	7e 89       	ldd	r23, Y+22	; 0x16
    578e:	8f 89       	ldd	r24, Y+23	; 0x17
    5790:	98 8d       	ldd	r25, Y+24	; 0x18
    5792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5796:	dc 01       	movw	r26, r24
    5798:	cb 01       	movw	r24, r22
    579a:	9c 8b       	std	Y+20, r25	; 0x14
    579c:	8b 8b       	std	Y+19, r24	; 0x13
    579e:	8b 89       	ldd	r24, Y+19	; 0x13
    57a0:	9c 89       	ldd	r25, Y+20	; 0x14
    57a2:	98 8b       	std	Y+16, r25	; 0x10
    57a4:	8f 87       	std	Y+15, r24	; 0x0f
    57a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    57a8:	98 89       	ldd	r25, Y+16	; 0x10
    57aa:	01 97       	sbiw	r24, 0x01	; 1
    57ac:	f1 f7       	brne	.-4      	; 0x57aa <Buzzer_enuTwice+0x1fe>
    57ae:	98 8b       	std	Y+16, r25	; 0x10
    57b0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	M_DIO_enuTogglePinValue(Copy_pstrBuzzerInfo->Buzzer_Port,Copy_pstrBuzzerInfo->Buzzer_Pin);
    57b2:	eb a5       	ldd	r30, Y+43	; 0x2b
    57b4:	fc a5       	ldd	r31, Y+44	; 0x2c
    57b6:	80 81       	ld	r24, Z
    57b8:	eb a5       	ldd	r30, Y+43	; 0x2b
    57ba:	fc a5       	ldd	r31, Y+44	; 0x2c
    57bc:	91 81       	ldd	r25, Z+1	; 0x01
    57be:	69 2f       	mov	r22, r25
    57c0:	0e 94 92 10 	call	0x2124	; 0x2124 <M_DIO_enuTogglePinValue>
    57c4:	80 e0       	ldi	r24, 0x00	; 0
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	a8 e4       	ldi	r26, 0x48	; 72
    57ca:	b3 e4       	ldi	r27, 0x43	; 67
    57cc:	8b 87       	std	Y+11, r24	; 0x0b
    57ce:	9c 87       	std	Y+12, r25	; 0x0c
    57d0:	ad 87       	std	Y+13, r26	; 0x0d
    57d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    57d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    57d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    57da:	9e 85       	ldd	r25, Y+14	; 0x0e
    57dc:	20 e0       	ldi	r18, 0x00	; 0
    57de:	30 e0       	ldi	r19, 0x00	; 0
    57e0:	4a e7       	ldi	r20, 0x7A	; 122
    57e2:	55 e4       	ldi	r21, 0x45	; 69
    57e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57e8:	dc 01       	movw	r26, r24
    57ea:	cb 01       	movw	r24, r22
    57ec:	8f 83       	std	Y+7, r24	; 0x07
    57ee:	98 87       	std	Y+8, r25	; 0x08
    57f0:	a9 87       	std	Y+9, r26	; 0x09
    57f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    57f4:	6f 81       	ldd	r22, Y+7	; 0x07
    57f6:	78 85       	ldd	r23, Y+8	; 0x08
    57f8:	89 85       	ldd	r24, Y+9	; 0x09
    57fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    57fc:	20 e0       	ldi	r18, 0x00	; 0
    57fe:	30 e0       	ldi	r19, 0x00	; 0
    5800:	40 e8       	ldi	r20, 0x80	; 128
    5802:	5f e3       	ldi	r21, 0x3F	; 63
    5804:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5808:	88 23       	and	r24, r24
    580a:	2c f4       	brge	.+10     	; 0x5816 <Buzzer_enuTwice+0x26a>
		__ticks = 1;
    580c:	81 e0       	ldi	r24, 0x01	; 1
    580e:	90 e0       	ldi	r25, 0x00	; 0
    5810:	9e 83       	std	Y+6, r25	; 0x06
    5812:	8d 83       	std	Y+5, r24	; 0x05
    5814:	3f c0       	rjmp	.+126    	; 0x5894 <Buzzer_enuTwice+0x2e8>
	else if (__tmp > 65535)
    5816:	6f 81       	ldd	r22, Y+7	; 0x07
    5818:	78 85       	ldd	r23, Y+8	; 0x08
    581a:	89 85       	ldd	r24, Y+9	; 0x09
    581c:	9a 85       	ldd	r25, Y+10	; 0x0a
    581e:	20 e0       	ldi	r18, 0x00	; 0
    5820:	3f ef       	ldi	r19, 0xFF	; 255
    5822:	4f e7       	ldi	r20, 0x7F	; 127
    5824:	57 e4       	ldi	r21, 0x47	; 71
    5826:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    582a:	18 16       	cp	r1, r24
    582c:	4c f5       	brge	.+82     	; 0x5880 <Buzzer_enuTwice+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    582e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5830:	7c 85       	ldd	r23, Y+12	; 0x0c
    5832:	8d 85       	ldd	r24, Y+13	; 0x0d
    5834:	9e 85       	ldd	r25, Y+14	; 0x0e
    5836:	20 e0       	ldi	r18, 0x00	; 0
    5838:	30 e0       	ldi	r19, 0x00	; 0
    583a:	40 e2       	ldi	r20, 0x20	; 32
    583c:	51 e4       	ldi	r21, 0x41	; 65
    583e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5842:	dc 01       	movw	r26, r24
    5844:	cb 01       	movw	r24, r22
    5846:	bc 01       	movw	r22, r24
    5848:	cd 01       	movw	r24, r26
    584a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    584e:	dc 01       	movw	r26, r24
    5850:	cb 01       	movw	r24, r22
    5852:	9e 83       	std	Y+6, r25	; 0x06
    5854:	8d 83       	std	Y+5, r24	; 0x05
    5856:	0f c0       	rjmp	.+30     	; 0x5876 <Buzzer_enuTwice+0x2ca>
    5858:	80 e9       	ldi	r24, 0x90	; 144
    585a:	91 e0       	ldi	r25, 0x01	; 1
    585c:	9c 83       	std	Y+4, r25	; 0x04
    585e:	8b 83       	std	Y+3, r24	; 0x03
    5860:	8b 81       	ldd	r24, Y+3	; 0x03
    5862:	9c 81       	ldd	r25, Y+4	; 0x04
    5864:	01 97       	sbiw	r24, 0x01	; 1
    5866:	f1 f7       	brne	.-4      	; 0x5864 <Buzzer_enuTwice+0x2b8>
    5868:	9c 83       	std	Y+4, r25	; 0x04
    586a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    586c:	8d 81       	ldd	r24, Y+5	; 0x05
    586e:	9e 81       	ldd	r25, Y+6	; 0x06
    5870:	01 97       	sbiw	r24, 0x01	; 1
    5872:	9e 83       	std	Y+6, r25	; 0x06
    5874:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5876:	8d 81       	ldd	r24, Y+5	; 0x05
    5878:	9e 81       	ldd	r25, Y+6	; 0x06
    587a:	00 97       	sbiw	r24, 0x00	; 0
    587c:	69 f7       	brne	.-38     	; 0x5858 <Buzzer_enuTwice+0x2ac>
    587e:	14 c0       	rjmp	.+40     	; 0x58a8 <Buzzer_enuTwice+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5880:	6f 81       	ldd	r22, Y+7	; 0x07
    5882:	78 85       	ldd	r23, Y+8	; 0x08
    5884:	89 85       	ldd	r24, Y+9	; 0x09
    5886:	9a 85       	ldd	r25, Y+10	; 0x0a
    5888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    588c:	dc 01       	movw	r26, r24
    588e:	cb 01       	movw	r24, r22
    5890:	9e 83       	std	Y+6, r25	; 0x06
    5892:	8d 83       	std	Y+5, r24	; 0x05
    5894:	8d 81       	ldd	r24, Y+5	; 0x05
    5896:	9e 81       	ldd	r25, Y+6	; 0x06
    5898:	9a 83       	std	Y+2, r25	; 0x02
    589a:	89 83       	std	Y+1, r24	; 0x01
    589c:	89 81       	ldd	r24, Y+1	; 0x01
    589e:	9a 81       	ldd	r25, Y+2	; 0x02
    58a0:	01 97       	sbiw	r24, 0x01	; 1
    58a2:	f1 f7       	brne	.-4      	; 0x58a0 <Buzzer_enuTwice+0x2f4>
    58a4:	9a 83       	std	Y+2, r25	; 0x02
    58a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	M_DIO_enuSetPinValue(Copy_pstrBuzzerInfo->Buzzer_Port,Copy_pstrBuzzerInfo->Buzzer_Pin,DIO_State_Low);
    58a8:	eb a5       	ldd	r30, Y+43	; 0x2b
    58aa:	fc a5       	ldd	r31, Y+44	; 0x2c
    58ac:	80 81       	ld	r24, Z
    58ae:	eb a5       	ldd	r30, Y+43	; 0x2b
    58b0:	fc a5       	ldd	r31, Y+44	; 0x2c
    58b2:	91 81       	ldd	r25, Z+1	; 0x01
    58b4:	69 2f       	mov	r22, r25
    58b6:	40 e0       	ldi	r20, 0x00	; 0
    58b8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	return ES_OK;
    58bc:	81 e0       	ldi	r24, 0x01	; 1
}
    58be:	ac 96       	adiw	r28, 0x2c	; 44
    58c0:	0f b6       	in	r0, 0x3f	; 63
    58c2:	f8 94       	cli
    58c4:	de bf       	out	0x3e, r29	; 62
    58c6:	0f be       	out	0x3f, r0	; 63
    58c8:	cd bf       	out	0x3d, r28	; 61
    58ca:	cf 91       	pop	r28
    58cc:	df 91       	pop	r29
    58ce:	08 95       	ret

000058d0 <Buzzer_enuTriple>:
ES_t Buzzer_enuTriple(Buzzer_t *Copy_pstrBuzzerInfo)
{
    58d0:	0f 93       	push	r16
    58d2:	1f 93       	push	r17
    58d4:	df 93       	push	r29
    58d6:	cf 93       	push	r28
    58d8:	cd b7       	in	r28, 0x3d	; 61
    58da:	de b7       	in	r29, 0x3e	; 62
    58dc:	c8 54       	subi	r28, 0x48	; 72
    58de:	d0 40       	sbci	r29, 0x00	; 0
    58e0:	0f b6       	in	r0, 0x3f	; 63
    58e2:	f8 94       	cli
    58e4:	de bf       	out	0x3e, r29	; 62
    58e6:	0f be       	out	0x3f, r0	; 63
    58e8:	cd bf       	out	0x3d, r28	; 61
    58ea:	fe 01       	movw	r30, r28
    58ec:	e9 5b       	subi	r30, 0xB9	; 185
    58ee:	ff 4f       	sbci	r31, 0xFF	; 255
    58f0:	91 83       	std	Z+1, r25	; 0x01
    58f2:	80 83       	st	Z, r24
	M_DIO_enuSetPinValue(Copy_pstrBuzzerInfo->Buzzer_Port,Copy_pstrBuzzerInfo->Buzzer_Pin,DIO_State_High);
    58f4:	fe 01       	movw	r30, r28
    58f6:	e9 5b       	subi	r30, 0xB9	; 185
    58f8:	ff 4f       	sbci	r31, 0xFF	; 255
    58fa:	01 90       	ld	r0, Z+
    58fc:	f0 81       	ld	r31, Z
    58fe:	e0 2d       	mov	r30, r0
    5900:	80 81       	ld	r24, Z
    5902:	fe 01       	movw	r30, r28
    5904:	e9 5b       	subi	r30, 0xB9	; 185
    5906:	ff 4f       	sbci	r31, 0xFF	; 255
    5908:	01 90       	ld	r0, Z+
    590a:	f0 81       	ld	r31, Z
    590c:	e0 2d       	mov	r30, r0
    590e:	91 81       	ldd	r25, Z+1	; 0x01
    5910:	69 2f       	mov	r22, r25
    5912:	41 e0       	ldi	r20, 0x01	; 1
    5914:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
    5918:	fe 01       	movw	r30, r28
    591a:	ed 5b       	subi	r30, 0xBD	; 189
    591c:	ff 4f       	sbci	r31, 0xFF	; 255
    591e:	80 e0       	ldi	r24, 0x00	; 0
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	a8 e4       	ldi	r26, 0x48	; 72
    5924:	b3 e4       	ldi	r27, 0x43	; 67
    5926:	80 83       	st	Z, r24
    5928:	91 83       	std	Z+1, r25	; 0x01
    592a:	a2 83       	std	Z+2, r26	; 0x02
    592c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    592e:	8e 01       	movw	r16, r28
    5930:	01 5c       	subi	r16, 0xC1	; 193
    5932:	1f 4f       	sbci	r17, 0xFF	; 255
    5934:	fe 01       	movw	r30, r28
    5936:	ed 5b       	subi	r30, 0xBD	; 189
    5938:	ff 4f       	sbci	r31, 0xFF	; 255
    593a:	60 81       	ld	r22, Z
    593c:	71 81       	ldd	r23, Z+1	; 0x01
    593e:	82 81       	ldd	r24, Z+2	; 0x02
    5940:	93 81       	ldd	r25, Z+3	; 0x03
    5942:	20 e0       	ldi	r18, 0x00	; 0
    5944:	30 e0       	ldi	r19, 0x00	; 0
    5946:	4a e7       	ldi	r20, 0x7A	; 122
    5948:	55 e4       	ldi	r21, 0x45	; 69
    594a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    594e:	dc 01       	movw	r26, r24
    5950:	cb 01       	movw	r24, r22
    5952:	f8 01       	movw	r30, r16
    5954:	80 83       	st	Z, r24
    5956:	91 83       	std	Z+1, r25	; 0x01
    5958:	a2 83       	std	Z+2, r26	; 0x02
    595a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    595c:	fe 01       	movw	r30, r28
    595e:	ff 96       	adiw	r30, 0x3f	; 63
    5960:	60 81       	ld	r22, Z
    5962:	71 81       	ldd	r23, Z+1	; 0x01
    5964:	82 81       	ldd	r24, Z+2	; 0x02
    5966:	93 81       	ldd	r25, Z+3	; 0x03
    5968:	20 e0       	ldi	r18, 0x00	; 0
    596a:	30 e0       	ldi	r19, 0x00	; 0
    596c:	40 e8       	ldi	r20, 0x80	; 128
    596e:	5f e3       	ldi	r21, 0x3F	; 63
    5970:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5974:	88 23       	and	r24, r24
    5976:	2c f4       	brge	.+10     	; 0x5982 <Buzzer_enuTriple+0xb2>
		__ticks = 1;
    5978:	81 e0       	ldi	r24, 0x01	; 1
    597a:	90 e0       	ldi	r25, 0x00	; 0
    597c:	9e af       	std	Y+62, r25	; 0x3e
    597e:	8d af       	std	Y+61, r24	; 0x3d
    5980:	46 c0       	rjmp	.+140    	; 0x5a0e <Buzzer_enuTriple+0x13e>
	else if (__tmp > 65535)
    5982:	fe 01       	movw	r30, r28
    5984:	ff 96       	adiw	r30, 0x3f	; 63
    5986:	60 81       	ld	r22, Z
    5988:	71 81       	ldd	r23, Z+1	; 0x01
    598a:	82 81       	ldd	r24, Z+2	; 0x02
    598c:	93 81       	ldd	r25, Z+3	; 0x03
    598e:	20 e0       	ldi	r18, 0x00	; 0
    5990:	3f ef       	ldi	r19, 0xFF	; 255
    5992:	4f e7       	ldi	r20, 0x7F	; 127
    5994:	57 e4       	ldi	r21, 0x47	; 71
    5996:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    599a:	18 16       	cp	r1, r24
    599c:	64 f5       	brge	.+88     	; 0x59f6 <Buzzer_enuTriple+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    599e:	fe 01       	movw	r30, r28
    59a0:	ed 5b       	subi	r30, 0xBD	; 189
    59a2:	ff 4f       	sbci	r31, 0xFF	; 255
    59a4:	60 81       	ld	r22, Z
    59a6:	71 81       	ldd	r23, Z+1	; 0x01
    59a8:	82 81       	ldd	r24, Z+2	; 0x02
    59aa:	93 81       	ldd	r25, Z+3	; 0x03
    59ac:	20 e0       	ldi	r18, 0x00	; 0
    59ae:	30 e0       	ldi	r19, 0x00	; 0
    59b0:	40 e2       	ldi	r20, 0x20	; 32
    59b2:	51 e4       	ldi	r21, 0x41	; 65
    59b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59b8:	dc 01       	movw	r26, r24
    59ba:	cb 01       	movw	r24, r22
    59bc:	bc 01       	movw	r22, r24
    59be:	cd 01       	movw	r24, r26
    59c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59c4:	dc 01       	movw	r26, r24
    59c6:	cb 01       	movw	r24, r22
    59c8:	9e af       	std	Y+62, r25	; 0x3e
    59ca:	8d af       	std	Y+61, r24	; 0x3d
    59cc:	0f c0       	rjmp	.+30     	; 0x59ec <Buzzer_enuTriple+0x11c>
    59ce:	80 e9       	ldi	r24, 0x90	; 144
    59d0:	91 e0       	ldi	r25, 0x01	; 1
    59d2:	9c af       	std	Y+60, r25	; 0x3c
    59d4:	8b af       	std	Y+59, r24	; 0x3b
    59d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    59d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    59da:	01 97       	sbiw	r24, 0x01	; 1
    59dc:	f1 f7       	brne	.-4      	; 0x59da <Buzzer_enuTriple+0x10a>
    59de:	9c af       	std	Y+60, r25	; 0x3c
    59e0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    59e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    59e6:	01 97       	sbiw	r24, 0x01	; 1
    59e8:	9e af       	std	Y+62, r25	; 0x3e
    59ea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    59ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    59f0:	00 97       	sbiw	r24, 0x00	; 0
    59f2:	69 f7       	brne	.-38     	; 0x59ce <Buzzer_enuTriple+0xfe>
    59f4:	16 c0       	rjmp	.+44     	; 0x5a22 <Buzzer_enuTriple+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59f6:	fe 01       	movw	r30, r28
    59f8:	ff 96       	adiw	r30, 0x3f	; 63
    59fa:	60 81       	ld	r22, Z
    59fc:	71 81       	ldd	r23, Z+1	; 0x01
    59fe:	82 81       	ldd	r24, Z+2	; 0x02
    5a00:	93 81       	ldd	r25, Z+3	; 0x03
    5a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a06:	dc 01       	movw	r26, r24
    5a08:	cb 01       	movw	r24, r22
    5a0a:	9e af       	std	Y+62, r25	; 0x3e
    5a0c:	8d af       	std	Y+61, r24	; 0x3d
    5a0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    5a10:	9e ad       	ldd	r25, Y+62	; 0x3e
    5a12:	9a af       	std	Y+58, r25	; 0x3a
    5a14:	89 af       	std	Y+57, r24	; 0x39
    5a16:	89 ad       	ldd	r24, Y+57	; 0x39
    5a18:	9a ad       	ldd	r25, Y+58	; 0x3a
    5a1a:	01 97       	sbiw	r24, 0x01	; 1
    5a1c:	f1 f7       	brne	.-4      	; 0x5a1a <Buzzer_enuTriple+0x14a>
    5a1e:	9a af       	std	Y+58, r25	; 0x3a
    5a20:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(200);
	M_DIO_enuTogglePinValue(Copy_pstrBuzzerInfo->Buzzer_Port,Copy_pstrBuzzerInfo->Buzzer_Pin);
    5a22:	fe 01       	movw	r30, r28
    5a24:	e9 5b       	subi	r30, 0xB9	; 185
    5a26:	ff 4f       	sbci	r31, 0xFF	; 255
    5a28:	01 90       	ld	r0, Z+
    5a2a:	f0 81       	ld	r31, Z
    5a2c:	e0 2d       	mov	r30, r0
    5a2e:	80 81       	ld	r24, Z
    5a30:	fe 01       	movw	r30, r28
    5a32:	e9 5b       	subi	r30, 0xB9	; 185
    5a34:	ff 4f       	sbci	r31, 0xFF	; 255
    5a36:	01 90       	ld	r0, Z+
    5a38:	f0 81       	ld	r31, Z
    5a3a:	e0 2d       	mov	r30, r0
    5a3c:	91 81       	ldd	r25, Z+1	; 0x01
    5a3e:	69 2f       	mov	r22, r25
    5a40:	0e 94 92 10 	call	0x2124	; 0x2124 <M_DIO_enuTogglePinValue>
    5a44:	80 e0       	ldi	r24, 0x00	; 0
    5a46:	90 e0       	ldi	r25, 0x00	; 0
    5a48:	a8 e4       	ldi	r26, 0x48	; 72
    5a4a:	b3 e4       	ldi	r27, 0x43	; 67
    5a4c:	8d ab       	std	Y+53, r24	; 0x35
    5a4e:	9e ab       	std	Y+54, r25	; 0x36
    5a50:	af ab       	std	Y+55, r26	; 0x37
    5a52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a54:	6d a9       	ldd	r22, Y+53	; 0x35
    5a56:	7e a9       	ldd	r23, Y+54	; 0x36
    5a58:	8f a9       	ldd	r24, Y+55	; 0x37
    5a5a:	98 ad       	ldd	r25, Y+56	; 0x38
    5a5c:	20 e0       	ldi	r18, 0x00	; 0
    5a5e:	30 e0       	ldi	r19, 0x00	; 0
    5a60:	4a e7       	ldi	r20, 0x7A	; 122
    5a62:	55 e4       	ldi	r21, 0x45	; 69
    5a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a68:	dc 01       	movw	r26, r24
    5a6a:	cb 01       	movw	r24, r22
    5a6c:	89 ab       	std	Y+49, r24	; 0x31
    5a6e:	9a ab       	std	Y+50, r25	; 0x32
    5a70:	ab ab       	std	Y+51, r26	; 0x33
    5a72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5a74:	69 a9       	ldd	r22, Y+49	; 0x31
    5a76:	7a a9       	ldd	r23, Y+50	; 0x32
    5a78:	8b a9       	ldd	r24, Y+51	; 0x33
    5a7a:	9c a9       	ldd	r25, Y+52	; 0x34
    5a7c:	20 e0       	ldi	r18, 0x00	; 0
    5a7e:	30 e0       	ldi	r19, 0x00	; 0
    5a80:	40 e8       	ldi	r20, 0x80	; 128
    5a82:	5f e3       	ldi	r21, 0x3F	; 63
    5a84:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5a88:	88 23       	and	r24, r24
    5a8a:	2c f4       	brge	.+10     	; 0x5a96 <Buzzer_enuTriple+0x1c6>
		__ticks = 1;
    5a8c:	81 e0       	ldi	r24, 0x01	; 1
    5a8e:	90 e0       	ldi	r25, 0x00	; 0
    5a90:	98 ab       	std	Y+48, r25	; 0x30
    5a92:	8f a7       	std	Y+47, r24	; 0x2f
    5a94:	3f c0       	rjmp	.+126    	; 0x5b14 <Buzzer_enuTriple+0x244>
	else if (__tmp > 65535)
    5a96:	69 a9       	ldd	r22, Y+49	; 0x31
    5a98:	7a a9       	ldd	r23, Y+50	; 0x32
    5a9a:	8b a9       	ldd	r24, Y+51	; 0x33
    5a9c:	9c a9       	ldd	r25, Y+52	; 0x34
    5a9e:	20 e0       	ldi	r18, 0x00	; 0
    5aa0:	3f ef       	ldi	r19, 0xFF	; 255
    5aa2:	4f e7       	ldi	r20, 0x7F	; 127
    5aa4:	57 e4       	ldi	r21, 0x47	; 71
    5aa6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5aaa:	18 16       	cp	r1, r24
    5aac:	4c f5       	brge	.+82     	; 0x5b00 <Buzzer_enuTriple+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5aae:	6d a9       	ldd	r22, Y+53	; 0x35
    5ab0:	7e a9       	ldd	r23, Y+54	; 0x36
    5ab2:	8f a9       	ldd	r24, Y+55	; 0x37
    5ab4:	98 ad       	ldd	r25, Y+56	; 0x38
    5ab6:	20 e0       	ldi	r18, 0x00	; 0
    5ab8:	30 e0       	ldi	r19, 0x00	; 0
    5aba:	40 e2       	ldi	r20, 0x20	; 32
    5abc:	51 e4       	ldi	r21, 0x41	; 65
    5abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ac2:	dc 01       	movw	r26, r24
    5ac4:	cb 01       	movw	r24, r22
    5ac6:	bc 01       	movw	r22, r24
    5ac8:	cd 01       	movw	r24, r26
    5aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ace:	dc 01       	movw	r26, r24
    5ad0:	cb 01       	movw	r24, r22
    5ad2:	98 ab       	std	Y+48, r25	; 0x30
    5ad4:	8f a7       	std	Y+47, r24	; 0x2f
    5ad6:	0f c0       	rjmp	.+30     	; 0x5af6 <Buzzer_enuTriple+0x226>
    5ad8:	80 e9       	ldi	r24, 0x90	; 144
    5ada:	91 e0       	ldi	r25, 0x01	; 1
    5adc:	9e a7       	std	Y+46, r25	; 0x2e
    5ade:	8d a7       	std	Y+45, r24	; 0x2d
    5ae0:	8d a5       	ldd	r24, Y+45	; 0x2d
    5ae2:	9e a5       	ldd	r25, Y+46	; 0x2e
    5ae4:	01 97       	sbiw	r24, 0x01	; 1
    5ae6:	f1 f7       	brne	.-4      	; 0x5ae4 <Buzzer_enuTriple+0x214>
    5ae8:	9e a7       	std	Y+46, r25	; 0x2e
    5aea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5aec:	8f a5       	ldd	r24, Y+47	; 0x2f
    5aee:	98 a9       	ldd	r25, Y+48	; 0x30
    5af0:	01 97       	sbiw	r24, 0x01	; 1
    5af2:	98 ab       	std	Y+48, r25	; 0x30
    5af4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5af6:	8f a5       	ldd	r24, Y+47	; 0x2f
    5af8:	98 a9       	ldd	r25, Y+48	; 0x30
    5afa:	00 97       	sbiw	r24, 0x00	; 0
    5afc:	69 f7       	brne	.-38     	; 0x5ad8 <Buzzer_enuTriple+0x208>
    5afe:	14 c0       	rjmp	.+40     	; 0x5b28 <Buzzer_enuTriple+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b00:	69 a9       	ldd	r22, Y+49	; 0x31
    5b02:	7a a9       	ldd	r23, Y+50	; 0x32
    5b04:	8b a9       	ldd	r24, Y+51	; 0x33
    5b06:	9c a9       	ldd	r25, Y+52	; 0x34
    5b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b0c:	dc 01       	movw	r26, r24
    5b0e:	cb 01       	movw	r24, r22
    5b10:	98 ab       	std	Y+48, r25	; 0x30
    5b12:	8f a7       	std	Y+47, r24	; 0x2f
    5b14:	8f a5       	ldd	r24, Y+47	; 0x2f
    5b16:	98 a9       	ldd	r25, Y+48	; 0x30
    5b18:	9c a7       	std	Y+44, r25	; 0x2c
    5b1a:	8b a7       	std	Y+43, r24	; 0x2b
    5b1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    5b1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5b20:	01 97       	sbiw	r24, 0x01	; 1
    5b22:	f1 f7       	brne	.-4      	; 0x5b20 <Buzzer_enuTriple+0x250>
    5b24:	9c a7       	std	Y+44, r25	; 0x2c
    5b26:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);
	M_DIO_enuTogglePinValue(Copy_pstrBuzzerInfo->Buzzer_Port,Copy_pstrBuzzerInfo->Buzzer_Pin);
    5b28:	fe 01       	movw	r30, r28
    5b2a:	e9 5b       	subi	r30, 0xB9	; 185
    5b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b2e:	01 90       	ld	r0, Z+
    5b30:	f0 81       	ld	r31, Z
    5b32:	e0 2d       	mov	r30, r0
    5b34:	80 81       	ld	r24, Z
    5b36:	fe 01       	movw	r30, r28
    5b38:	e9 5b       	subi	r30, 0xB9	; 185
    5b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b3c:	01 90       	ld	r0, Z+
    5b3e:	f0 81       	ld	r31, Z
    5b40:	e0 2d       	mov	r30, r0
    5b42:	91 81       	ldd	r25, Z+1	; 0x01
    5b44:	69 2f       	mov	r22, r25
    5b46:	0e 94 92 10 	call	0x2124	; 0x2124 <M_DIO_enuTogglePinValue>
    5b4a:	80 e0       	ldi	r24, 0x00	; 0
    5b4c:	90 e0       	ldi	r25, 0x00	; 0
    5b4e:	a8 e4       	ldi	r26, 0x48	; 72
    5b50:	b3 e4       	ldi	r27, 0x43	; 67
    5b52:	8f a3       	std	Y+39, r24	; 0x27
    5b54:	98 a7       	std	Y+40, r25	; 0x28
    5b56:	a9 a7       	std	Y+41, r26	; 0x29
    5b58:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b5a:	6f a1       	ldd	r22, Y+39	; 0x27
    5b5c:	78 a5       	ldd	r23, Y+40	; 0x28
    5b5e:	89 a5       	ldd	r24, Y+41	; 0x29
    5b60:	9a a5       	ldd	r25, Y+42	; 0x2a
    5b62:	20 e0       	ldi	r18, 0x00	; 0
    5b64:	30 e0       	ldi	r19, 0x00	; 0
    5b66:	4a e7       	ldi	r20, 0x7A	; 122
    5b68:	55 e4       	ldi	r21, 0x45	; 69
    5b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b6e:	dc 01       	movw	r26, r24
    5b70:	cb 01       	movw	r24, r22
    5b72:	8b a3       	std	Y+35, r24	; 0x23
    5b74:	9c a3       	std	Y+36, r25	; 0x24
    5b76:	ad a3       	std	Y+37, r26	; 0x25
    5b78:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5b7a:	6b a1       	ldd	r22, Y+35	; 0x23
    5b7c:	7c a1       	ldd	r23, Y+36	; 0x24
    5b7e:	8d a1       	ldd	r24, Y+37	; 0x25
    5b80:	9e a1       	ldd	r25, Y+38	; 0x26
    5b82:	20 e0       	ldi	r18, 0x00	; 0
    5b84:	30 e0       	ldi	r19, 0x00	; 0
    5b86:	40 e8       	ldi	r20, 0x80	; 128
    5b88:	5f e3       	ldi	r21, 0x3F	; 63
    5b8a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5b8e:	88 23       	and	r24, r24
    5b90:	2c f4       	brge	.+10     	; 0x5b9c <Buzzer_enuTriple+0x2cc>
		__ticks = 1;
    5b92:	81 e0       	ldi	r24, 0x01	; 1
    5b94:	90 e0       	ldi	r25, 0x00	; 0
    5b96:	9a a3       	std	Y+34, r25	; 0x22
    5b98:	89 a3       	std	Y+33, r24	; 0x21
    5b9a:	3f c0       	rjmp	.+126    	; 0x5c1a <Buzzer_enuTriple+0x34a>
	else if (__tmp > 65535)
    5b9c:	6b a1       	ldd	r22, Y+35	; 0x23
    5b9e:	7c a1       	ldd	r23, Y+36	; 0x24
    5ba0:	8d a1       	ldd	r24, Y+37	; 0x25
    5ba2:	9e a1       	ldd	r25, Y+38	; 0x26
    5ba4:	20 e0       	ldi	r18, 0x00	; 0
    5ba6:	3f ef       	ldi	r19, 0xFF	; 255
    5ba8:	4f e7       	ldi	r20, 0x7F	; 127
    5baa:	57 e4       	ldi	r21, 0x47	; 71
    5bac:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5bb0:	18 16       	cp	r1, r24
    5bb2:	4c f5       	brge	.+82     	; 0x5c06 <Buzzer_enuTriple+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bb4:	6f a1       	ldd	r22, Y+39	; 0x27
    5bb6:	78 a5       	ldd	r23, Y+40	; 0x28
    5bb8:	89 a5       	ldd	r24, Y+41	; 0x29
    5bba:	9a a5       	ldd	r25, Y+42	; 0x2a
    5bbc:	20 e0       	ldi	r18, 0x00	; 0
    5bbe:	30 e0       	ldi	r19, 0x00	; 0
    5bc0:	40 e2       	ldi	r20, 0x20	; 32
    5bc2:	51 e4       	ldi	r21, 0x41	; 65
    5bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bc8:	dc 01       	movw	r26, r24
    5bca:	cb 01       	movw	r24, r22
    5bcc:	bc 01       	movw	r22, r24
    5bce:	cd 01       	movw	r24, r26
    5bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bd4:	dc 01       	movw	r26, r24
    5bd6:	cb 01       	movw	r24, r22
    5bd8:	9a a3       	std	Y+34, r25	; 0x22
    5bda:	89 a3       	std	Y+33, r24	; 0x21
    5bdc:	0f c0       	rjmp	.+30     	; 0x5bfc <Buzzer_enuTriple+0x32c>
    5bde:	80 e9       	ldi	r24, 0x90	; 144
    5be0:	91 e0       	ldi	r25, 0x01	; 1
    5be2:	98 a3       	std	Y+32, r25	; 0x20
    5be4:	8f 8f       	std	Y+31, r24	; 0x1f
    5be6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5be8:	98 a1       	ldd	r25, Y+32	; 0x20
    5bea:	01 97       	sbiw	r24, 0x01	; 1
    5bec:	f1 f7       	brne	.-4      	; 0x5bea <Buzzer_enuTriple+0x31a>
    5bee:	98 a3       	std	Y+32, r25	; 0x20
    5bf0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bf2:	89 a1       	ldd	r24, Y+33	; 0x21
    5bf4:	9a a1       	ldd	r25, Y+34	; 0x22
    5bf6:	01 97       	sbiw	r24, 0x01	; 1
    5bf8:	9a a3       	std	Y+34, r25	; 0x22
    5bfa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bfc:	89 a1       	ldd	r24, Y+33	; 0x21
    5bfe:	9a a1       	ldd	r25, Y+34	; 0x22
    5c00:	00 97       	sbiw	r24, 0x00	; 0
    5c02:	69 f7       	brne	.-38     	; 0x5bde <Buzzer_enuTriple+0x30e>
    5c04:	14 c0       	rjmp	.+40     	; 0x5c2e <Buzzer_enuTriple+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c06:	6b a1       	ldd	r22, Y+35	; 0x23
    5c08:	7c a1       	ldd	r23, Y+36	; 0x24
    5c0a:	8d a1       	ldd	r24, Y+37	; 0x25
    5c0c:	9e a1       	ldd	r25, Y+38	; 0x26
    5c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c12:	dc 01       	movw	r26, r24
    5c14:	cb 01       	movw	r24, r22
    5c16:	9a a3       	std	Y+34, r25	; 0x22
    5c18:	89 a3       	std	Y+33, r24	; 0x21
    5c1a:	89 a1       	ldd	r24, Y+33	; 0x21
    5c1c:	9a a1       	ldd	r25, Y+34	; 0x22
    5c1e:	9e 8f       	std	Y+30, r25	; 0x1e
    5c20:	8d 8f       	std	Y+29, r24	; 0x1d
    5c22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5c24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5c26:	01 97       	sbiw	r24, 0x01	; 1
    5c28:	f1 f7       	brne	.-4      	; 0x5c26 <Buzzer_enuTriple+0x356>
    5c2a:	9e 8f       	std	Y+30, r25	; 0x1e
    5c2c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);
	M_DIO_enuTogglePinValue(Copy_pstrBuzzerInfo->Buzzer_Port,Copy_pstrBuzzerInfo->Buzzer_Pin);
    5c2e:	fe 01       	movw	r30, r28
    5c30:	e9 5b       	subi	r30, 0xB9	; 185
    5c32:	ff 4f       	sbci	r31, 0xFF	; 255
    5c34:	01 90       	ld	r0, Z+
    5c36:	f0 81       	ld	r31, Z
    5c38:	e0 2d       	mov	r30, r0
    5c3a:	80 81       	ld	r24, Z
    5c3c:	fe 01       	movw	r30, r28
    5c3e:	e9 5b       	subi	r30, 0xB9	; 185
    5c40:	ff 4f       	sbci	r31, 0xFF	; 255
    5c42:	01 90       	ld	r0, Z+
    5c44:	f0 81       	ld	r31, Z
    5c46:	e0 2d       	mov	r30, r0
    5c48:	91 81       	ldd	r25, Z+1	; 0x01
    5c4a:	69 2f       	mov	r22, r25
    5c4c:	0e 94 92 10 	call	0x2124	; 0x2124 <M_DIO_enuTogglePinValue>
    5c50:	80 e0       	ldi	r24, 0x00	; 0
    5c52:	90 e0       	ldi	r25, 0x00	; 0
    5c54:	a8 e4       	ldi	r26, 0x48	; 72
    5c56:	b3 e4       	ldi	r27, 0x43	; 67
    5c58:	89 8f       	std	Y+25, r24	; 0x19
    5c5a:	9a 8f       	std	Y+26, r25	; 0x1a
    5c5c:	ab 8f       	std	Y+27, r26	; 0x1b
    5c5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c60:	69 8d       	ldd	r22, Y+25	; 0x19
    5c62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c68:	20 e0       	ldi	r18, 0x00	; 0
    5c6a:	30 e0       	ldi	r19, 0x00	; 0
    5c6c:	4a e7       	ldi	r20, 0x7A	; 122
    5c6e:	55 e4       	ldi	r21, 0x45	; 69
    5c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c74:	dc 01       	movw	r26, r24
    5c76:	cb 01       	movw	r24, r22
    5c78:	8d 8b       	std	Y+21, r24	; 0x15
    5c7a:	9e 8b       	std	Y+22, r25	; 0x16
    5c7c:	af 8b       	std	Y+23, r26	; 0x17
    5c7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5c80:	6d 89       	ldd	r22, Y+21	; 0x15
    5c82:	7e 89       	ldd	r23, Y+22	; 0x16
    5c84:	8f 89       	ldd	r24, Y+23	; 0x17
    5c86:	98 8d       	ldd	r25, Y+24	; 0x18
    5c88:	20 e0       	ldi	r18, 0x00	; 0
    5c8a:	30 e0       	ldi	r19, 0x00	; 0
    5c8c:	40 e8       	ldi	r20, 0x80	; 128
    5c8e:	5f e3       	ldi	r21, 0x3F	; 63
    5c90:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5c94:	88 23       	and	r24, r24
    5c96:	2c f4       	brge	.+10     	; 0x5ca2 <Buzzer_enuTriple+0x3d2>
		__ticks = 1;
    5c98:	81 e0       	ldi	r24, 0x01	; 1
    5c9a:	90 e0       	ldi	r25, 0x00	; 0
    5c9c:	9c 8b       	std	Y+20, r25	; 0x14
    5c9e:	8b 8b       	std	Y+19, r24	; 0x13
    5ca0:	3f c0       	rjmp	.+126    	; 0x5d20 <Buzzer_enuTriple+0x450>
	else if (__tmp > 65535)
    5ca2:	6d 89       	ldd	r22, Y+21	; 0x15
    5ca4:	7e 89       	ldd	r23, Y+22	; 0x16
    5ca6:	8f 89       	ldd	r24, Y+23	; 0x17
    5ca8:	98 8d       	ldd	r25, Y+24	; 0x18
    5caa:	20 e0       	ldi	r18, 0x00	; 0
    5cac:	3f ef       	ldi	r19, 0xFF	; 255
    5cae:	4f e7       	ldi	r20, 0x7F	; 127
    5cb0:	57 e4       	ldi	r21, 0x47	; 71
    5cb2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5cb6:	18 16       	cp	r1, r24
    5cb8:	4c f5       	brge	.+82     	; 0x5d0c <Buzzer_enuTriple+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cba:	69 8d       	ldd	r22, Y+25	; 0x19
    5cbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5cbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5cc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5cc2:	20 e0       	ldi	r18, 0x00	; 0
    5cc4:	30 e0       	ldi	r19, 0x00	; 0
    5cc6:	40 e2       	ldi	r20, 0x20	; 32
    5cc8:	51 e4       	ldi	r21, 0x41	; 65
    5cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cce:	dc 01       	movw	r26, r24
    5cd0:	cb 01       	movw	r24, r22
    5cd2:	bc 01       	movw	r22, r24
    5cd4:	cd 01       	movw	r24, r26
    5cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cda:	dc 01       	movw	r26, r24
    5cdc:	cb 01       	movw	r24, r22
    5cde:	9c 8b       	std	Y+20, r25	; 0x14
    5ce0:	8b 8b       	std	Y+19, r24	; 0x13
    5ce2:	0f c0       	rjmp	.+30     	; 0x5d02 <Buzzer_enuTriple+0x432>
    5ce4:	80 e9       	ldi	r24, 0x90	; 144
    5ce6:	91 e0       	ldi	r25, 0x01	; 1
    5ce8:	9a 8b       	std	Y+18, r25	; 0x12
    5cea:	89 8b       	std	Y+17, r24	; 0x11
    5cec:	89 89       	ldd	r24, Y+17	; 0x11
    5cee:	9a 89       	ldd	r25, Y+18	; 0x12
    5cf0:	01 97       	sbiw	r24, 0x01	; 1
    5cf2:	f1 f7       	brne	.-4      	; 0x5cf0 <Buzzer_enuTriple+0x420>
    5cf4:	9a 8b       	std	Y+18, r25	; 0x12
    5cf6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    5cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    5cfc:	01 97       	sbiw	r24, 0x01	; 1
    5cfe:	9c 8b       	std	Y+20, r25	; 0x14
    5d00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d02:	8b 89       	ldd	r24, Y+19	; 0x13
    5d04:	9c 89       	ldd	r25, Y+20	; 0x14
    5d06:	00 97       	sbiw	r24, 0x00	; 0
    5d08:	69 f7       	brne	.-38     	; 0x5ce4 <Buzzer_enuTriple+0x414>
    5d0a:	14 c0       	rjmp	.+40     	; 0x5d34 <Buzzer_enuTriple+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d0c:	6d 89       	ldd	r22, Y+21	; 0x15
    5d0e:	7e 89       	ldd	r23, Y+22	; 0x16
    5d10:	8f 89       	ldd	r24, Y+23	; 0x17
    5d12:	98 8d       	ldd	r25, Y+24	; 0x18
    5d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d18:	dc 01       	movw	r26, r24
    5d1a:	cb 01       	movw	r24, r22
    5d1c:	9c 8b       	std	Y+20, r25	; 0x14
    5d1e:	8b 8b       	std	Y+19, r24	; 0x13
    5d20:	8b 89       	ldd	r24, Y+19	; 0x13
    5d22:	9c 89       	ldd	r25, Y+20	; 0x14
    5d24:	98 8b       	std	Y+16, r25	; 0x10
    5d26:	8f 87       	std	Y+15, r24	; 0x0f
    5d28:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d2a:	98 89       	ldd	r25, Y+16	; 0x10
    5d2c:	01 97       	sbiw	r24, 0x01	; 1
    5d2e:	f1 f7       	brne	.-4      	; 0x5d2c <Buzzer_enuTriple+0x45c>
    5d30:	98 8b       	std	Y+16, r25	; 0x10
    5d32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	M_DIO_enuTogglePinValue(Copy_pstrBuzzerInfo->Buzzer_Port,Copy_pstrBuzzerInfo->Buzzer_Pin);
    5d34:	fe 01       	movw	r30, r28
    5d36:	e9 5b       	subi	r30, 0xB9	; 185
    5d38:	ff 4f       	sbci	r31, 0xFF	; 255
    5d3a:	01 90       	ld	r0, Z+
    5d3c:	f0 81       	ld	r31, Z
    5d3e:	e0 2d       	mov	r30, r0
    5d40:	80 81       	ld	r24, Z
    5d42:	fe 01       	movw	r30, r28
    5d44:	e9 5b       	subi	r30, 0xB9	; 185
    5d46:	ff 4f       	sbci	r31, 0xFF	; 255
    5d48:	01 90       	ld	r0, Z+
    5d4a:	f0 81       	ld	r31, Z
    5d4c:	e0 2d       	mov	r30, r0
    5d4e:	91 81       	ldd	r25, Z+1	; 0x01
    5d50:	69 2f       	mov	r22, r25
    5d52:	0e 94 92 10 	call	0x2124	; 0x2124 <M_DIO_enuTogglePinValue>
    5d56:	80 e0       	ldi	r24, 0x00	; 0
    5d58:	90 e0       	ldi	r25, 0x00	; 0
    5d5a:	a8 e4       	ldi	r26, 0x48	; 72
    5d5c:	b3 e4       	ldi	r27, 0x43	; 67
    5d5e:	8b 87       	std	Y+11, r24	; 0x0b
    5d60:	9c 87       	std	Y+12, r25	; 0x0c
    5d62:	ad 87       	std	Y+13, r26	; 0x0d
    5d64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d66:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d68:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d6e:	20 e0       	ldi	r18, 0x00	; 0
    5d70:	30 e0       	ldi	r19, 0x00	; 0
    5d72:	4a e7       	ldi	r20, 0x7A	; 122
    5d74:	55 e4       	ldi	r21, 0x45	; 69
    5d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d7a:	dc 01       	movw	r26, r24
    5d7c:	cb 01       	movw	r24, r22
    5d7e:	8f 83       	std	Y+7, r24	; 0x07
    5d80:	98 87       	std	Y+8, r25	; 0x08
    5d82:	a9 87       	std	Y+9, r26	; 0x09
    5d84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5d86:	6f 81       	ldd	r22, Y+7	; 0x07
    5d88:	78 85       	ldd	r23, Y+8	; 0x08
    5d8a:	89 85       	ldd	r24, Y+9	; 0x09
    5d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d8e:	20 e0       	ldi	r18, 0x00	; 0
    5d90:	30 e0       	ldi	r19, 0x00	; 0
    5d92:	40 e8       	ldi	r20, 0x80	; 128
    5d94:	5f e3       	ldi	r21, 0x3F	; 63
    5d96:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5d9a:	88 23       	and	r24, r24
    5d9c:	2c f4       	brge	.+10     	; 0x5da8 <Buzzer_enuTriple+0x4d8>
		__ticks = 1;
    5d9e:	81 e0       	ldi	r24, 0x01	; 1
    5da0:	90 e0       	ldi	r25, 0x00	; 0
    5da2:	9e 83       	std	Y+6, r25	; 0x06
    5da4:	8d 83       	std	Y+5, r24	; 0x05
    5da6:	3f c0       	rjmp	.+126    	; 0x5e26 <Buzzer_enuTriple+0x556>
	else if (__tmp > 65535)
    5da8:	6f 81       	ldd	r22, Y+7	; 0x07
    5daa:	78 85       	ldd	r23, Y+8	; 0x08
    5dac:	89 85       	ldd	r24, Y+9	; 0x09
    5dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    5db0:	20 e0       	ldi	r18, 0x00	; 0
    5db2:	3f ef       	ldi	r19, 0xFF	; 255
    5db4:	4f e7       	ldi	r20, 0x7F	; 127
    5db6:	57 e4       	ldi	r21, 0x47	; 71
    5db8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5dbc:	18 16       	cp	r1, r24
    5dbe:	4c f5       	brge	.+82     	; 0x5e12 <Buzzer_enuTriple+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    5dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    5dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5dc8:	20 e0       	ldi	r18, 0x00	; 0
    5dca:	30 e0       	ldi	r19, 0x00	; 0
    5dcc:	40 e2       	ldi	r20, 0x20	; 32
    5dce:	51 e4       	ldi	r21, 0x41	; 65
    5dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dd4:	dc 01       	movw	r26, r24
    5dd6:	cb 01       	movw	r24, r22
    5dd8:	bc 01       	movw	r22, r24
    5dda:	cd 01       	movw	r24, r26
    5ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5de0:	dc 01       	movw	r26, r24
    5de2:	cb 01       	movw	r24, r22
    5de4:	9e 83       	std	Y+6, r25	; 0x06
    5de6:	8d 83       	std	Y+5, r24	; 0x05
    5de8:	0f c0       	rjmp	.+30     	; 0x5e08 <Buzzer_enuTriple+0x538>
    5dea:	80 e9       	ldi	r24, 0x90	; 144
    5dec:	91 e0       	ldi	r25, 0x01	; 1
    5dee:	9c 83       	std	Y+4, r25	; 0x04
    5df0:	8b 83       	std	Y+3, r24	; 0x03
    5df2:	8b 81       	ldd	r24, Y+3	; 0x03
    5df4:	9c 81       	ldd	r25, Y+4	; 0x04
    5df6:	01 97       	sbiw	r24, 0x01	; 1
    5df8:	f1 f7       	brne	.-4      	; 0x5df6 <Buzzer_enuTriple+0x526>
    5dfa:	9c 83       	std	Y+4, r25	; 0x04
    5dfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    5e00:	9e 81       	ldd	r25, Y+6	; 0x06
    5e02:	01 97       	sbiw	r24, 0x01	; 1
    5e04:	9e 83       	std	Y+6, r25	; 0x06
    5e06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e08:	8d 81       	ldd	r24, Y+5	; 0x05
    5e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    5e0c:	00 97       	sbiw	r24, 0x00	; 0
    5e0e:	69 f7       	brne	.-38     	; 0x5dea <Buzzer_enuTriple+0x51a>
    5e10:	14 c0       	rjmp	.+40     	; 0x5e3a <Buzzer_enuTriple+0x56a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e12:	6f 81       	ldd	r22, Y+7	; 0x07
    5e14:	78 85       	ldd	r23, Y+8	; 0x08
    5e16:	89 85       	ldd	r24, Y+9	; 0x09
    5e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e1e:	dc 01       	movw	r26, r24
    5e20:	cb 01       	movw	r24, r22
    5e22:	9e 83       	std	Y+6, r25	; 0x06
    5e24:	8d 83       	std	Y+5, r24	; 0x05
    5e26:	8d 81       	ldd	r24, Y+5	; 0x05
    5e28:	9e 81       	ldd	r25, Y+6	; 0x06
    5e2a:	9a 83       	std	Y+2, r25	; 0x02
    5e2c:	89 83       	std	Y+1, r24	; 0x01
    5e2e:	89 81       	ldd	r24, Y+1	; 0x01
    5e30:	9a 81       	ldd	r25, Y+2	; 0x02
    5e32:	01 97       	sbiw	r24, 0x01	; 1
    5e34:	f1 f7       	brne	.-4      	; 0x5e32 <Buzzer_enuTriple+0x562>
    5e36:	9a 83       	std	Y+2, r25	; 0x02
    5e38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	M_DIO_enuSetPinValue(Copy_pstrBuzzerInfo->Buzzer_Port,Copy_pstrBuzzerInfo->Buzzer_Pin,DIO_State_Low);
    5e3a:	fe 01       	movw	r30, r28
    5e3c:	e9 5b       	subi	r30, 0xB9	; 185
    5e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e40:	01 90       	ld	r0, Z+
    5e42:	f0 81       	ld	r31, Z
    5e44:	e0 2d       	mov	r30, r0
    5e46:	80 81       	ld	r24, Z
    5e48:	fe 01       	movw	r30, r28
    5e4a:	e9 5b       	subi	r30, 0xB9	; 185
    5e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e4e:	01 90       	ld	r0, Z+
    5e50:	f0 81       	ld	r31, Z
    5e52:	e0 2d       	mov	r30, r0
    5e54:	91 81       	ldd	r25, Z+1	; 0x01
    5e56:	69 2f       	mov	r22, r25
    5e58:	40 e0       	ldi	r20, 0x00	; 0
    5e5a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	return ES_OK;
    5e5e:	81 e0       	ldi	r24, 0x01	; 1
}
    5e60:	c8 5b       	subi	r28, 0xB8	; 184
    5e62:	df 4f       	sbci	r29, 0xFF	; 255
    5e64:	0f b6       	in	r0, 0x3f	; 63
    5e66:	f8 94       	cli
    5e68:	de bf       	out	0x3e, r29	; 62
    5e6a:	0f be       	out	0x3f, r0	; 63
    5e6c:	cd bf       	out	0x3d, r28	; 61
    5e6e:	cf 91       	pop	r28
    5e70:	df 91       	pop	r29
    5e72:	1f 91       	pop	r17
    5e74:	0f 91       	pop	r16
    5e76:	08 95       	ret

00005e78 <Buzzer_enuLong>:
ES_t Buzzer_enuLong(Buzzer_t *Copy_pstrBuzzerInfo)
{
    5e78:	df 93       	push	r29
    5e7a:	cf 93       	push	r28
    5e7c:	cd b7       	in	r28, 0x3d	; 61
    5e7e:	de b7       	in	r29, 0x3e	; 62
    5e80:	60 97       	sbiw	r28, 0x10	; 16
    5e82:	0f b6       	in	r0, 0x3f	; 63
    5e84:	f8 94       	cli
    5e86:	de bf       	out	0x3e, r29	; 62
    5e88:	0f be       	out	0x3f, r0	; 63
    5e8a:	cd bf       	out	0x3d, r28	; 61
    5e8c:	98 8b       	std	Y+16, r25	; 0x10
    5e8e:	8f 87       	std	Y+15, r24	; 0x0f
	M_DIO_enuSetPinValue(Copy_pstrBuzzerInfo->Buzzer_Port,Copy_pstrBuzzerInfo->Buzzer_Pin,DIO_State_High);
    5e90:	ef 85       	ldd	r30, Y+15	; 0x0f
    5e92:	f8 89       	ldd	r31, Y+16	; 0x10
    5e94:	80 81       	ld	r24, Z
    5e96:	ef 85       	ldd	r30, Y+15	; 0x0f
    5e98:	f8 89       	ldd	r31, Y+16	; 0x10
    5e9a:	91 81       	ldd	r25, Z+1	; 0x01
    5e9c:	69 2f       	mov	r22, r25
    5e9e:	41 e0       	ldi	r20, 0x01	; 1
    5ea0:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
    5ea4:	80 e0       	ldi	r24, 0x00	; 0
    5ea6:	90 e0       	ldi	r25, 0x00	; 0
    5ea8:	aa e7       	ldi	r26, 0x7A	; 122
    5eaa:	b4 e4       	ldi	r27, 0x44	; 68
    5eac:	8b 87       	std	Y+11, r24	; 0x0b
    5eae:	9c 87       	std	Y+12, r25	; 0x0c
    5eb0:	ad 87       	std	Y+13, r26	; 0x0d
    5eb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5eb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5eb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5eba:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ebc:	20 e0       	ldi	r18, 0x00	; 0
    5ebe:	30 e0       	ldi	r19, 0x00	; 0
    5ec0:	4a e7       	ldi	r20, 0x7A	; 122
    5ec2:	55 e4       	ldi	r21, 0x45	; 69
    5ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ec8:	dc 01       	movw	r26, r24
    5eca:	cb 01       	movw	r24, r22
    5ecc:	8f 83       	std	Y+7, r24	; 0x07
    5ece:	98 87       	std	Y+8, r25	; 0x08
    5ed0:	a9 87       	std	Y+9, r26	; 0x09
    5ed2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    5ed6:	78 85       	ldd	r23, Y+8	; 0x08
    5ed8:	89 85       	ldd	r24, Y+9	; 0x09
    5eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    5edc:	20 e0       	ldi	r18, 0x00	; 0
    5ede:	30 e0       	ldi	r19, 0x00	; 0
    5ee0:	40 e8       	ldi	r20, 0x80	; 128
    5ee2:	5f e3       	ldi	r21, 0x3F	; 63
    5ee4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5ee8:	88 23       	and	r24, r24
    5eea:	2c f4       	brge	.+10     	; 0x5ef6 <Buzzer_enuLong+0x7e>
		__ticks = 1;
    5eec:	81 e0       	ldi	r24, 0x01	; 1
    5eee:	90 e0       	ldi	r25, 0x00	; 0
    5ef0:	9e 83       	std	Y+6, r25	; 0x06
    5ef2:	8d 83       	std	Y+5, r24	; 0x05
    5ef4:	3f c0       	rjmp	.+126    	; 0x5f74 <Buzzer_enuLong+0xfc>
	else if (__tmp > 65535)
    5ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    5ef8:	78 85       	ldd	r23, Y+8	; 0x08
    5efa:	89 85       	ldd	r24, Y+9	; 0x09
    5efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5efe:	20 e0       	ldi	r18, 0x00	; 0
    5f00:	3f ef       	ldi	r19, 0xFF	; 255
    5f02:	4f e7       	ldi	r20, 0x7F	; 127
    5f04:	57 e4       	ldi	r21, 0x47	; 71
    5f06:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5f0a:	18 16       	cp	r1, r24
    5f0c:	4c f5       	brge	.+82     	; 0x5f60 <Buzzer_enuLong+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f10:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f12:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f14:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f16:	20 e0       	ldi	r18, 0x00	; 0
    5f18:	30 e0       	ldi	r19, 0x00	; 0
    5f1a:	40 e2       	ldi	r20, 0x20	; 32
    5f1c:	51 e4       	ldi	r21, 0x41	; 65
    5f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f22:	dc 01       	movw	r26, r24
    5f24:	cb 01       	movw	r24, r22
    5f26:	bc 01       	movw	r22, r24
    5f28:	cd 01       	movw	r24, r26
    5f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f2e:	dc 01       	movw	r26, r24
    5f30:	cb 01       	movw	r24, r22
    5f32:	9e 83       	std	Y+6, r25	; 0x06
    5f34:	8d 83       	std	Y+5, r24	; 0x05
    5f36:	0f c0       	rjmp	.+30     	; 0x5f56 <Buzzer_enuLong+0xde>
    5f38:	80 e9       	ldi	r24, 0x90	; 144
    5f3a:	91 e0       	ldi	r25, 0x01	; 1
    5f3c:	9c 83       	std	Y+4, r25	; 0x04
    5f3e:	8b 83       	std	Y+3, r24	; 0x03
    5f40:	8b 81       	ldd	r24, Y+3	; 0x03
    5f42:	9c 81       	ldd	r25, Y+4	; 0x04
    5f44:	01 97       	sbiw	r24, 0x01	; 1
    5f46:	f1 f7       	brne	.-4      	; 0x5f44 <Buzzer_enuLong+0xcc>
    5f48:	9c 83       	std	Y+4, r25	; 0x04
    5f4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    5f50:	01 97       	sbiw	r24, 0x01	; 1
    5f52:	9e 83       	std	Y+6, r25	; 0x06
    5f54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f56:	8d 81       	ldd	r24, Y+5	; 0x05
    5f58:	9e 81       	ldd	r25, Y+6	; 0x06
    5f5a:	00 97       	sbiw	r24, 0x00	; 0
    5f5c:	69 f7       	brne	.-38     	; 0x5f38 <Buzzer_enuLong+0xc0>
    5f5e:	14 c0       	rjmp	.+40     	; 0x5f88 <Buzzer_enuLong+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f60:	6f 81       	ldd	r22, Y+7	; 0x07
    5f62:	78 85       	ldd	r23, Y+8	; 0x08
    5f64:	89 85       	ldd	r24, Y+9	; 0x09
    5f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f6c:	dc 01       	movw	r26, r24
    5f6e:	cb 01       	movw	r24, r22
    5f70:	9e 83       	std	Y+6, r25	; 0x06
    5f72:	8d 83       	std	Y+5, r24	; 0x05
    5f74:	8d 81       	ldd	r24, Y+5	; 0x05
    5f76:	9e 81       	ldd	r25, Y+6	; 0x06
    5f78:	9a 83       	std	Y+2, r25	; 0x02
    5f7a:	89 83       	std	Y+1, r24	; 0x01
    5f7c:	89 81       	ldd	r24, Y+1	; 0x01
    5f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f80:	01 97       	sbiw	r24, 0x01	; 1
    5f82:	f1 f7       	brne	.-4      	; 0x5f80 <Buzzer_enuLong+0x108>
    5f84:	9a 83       	std	Y+2, r25	; 0x02
    5f86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	M_DIO_enuSetPinValue(Copy_pstrBuzzerInfo->Buzzer_Port,Copy_pstrBuzzerInfo->Buzzer_Pin,DIO_State_Low);
    5f88:	ef 85       	ldd	r30, Y+15	; 0x0f
    5f8a:	f8 89       	ldd	r31, Y+16	; 0x10
    5f8c:	80 81       	ld	r24, Z
    5f8e:	ef 85       	ldd	r30, Y+15	; 0x0f
    5f90:	f8 89       	ldd	r31, Y+16	; 0x10
    5f92:	91 81       	ldd	r25, Z+1	; 0x01
    5f94:	69 2f       	mov	r22, r25
    5f96:	40 e0       	ldi	r20, 0x00	; 0
    5f98:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_DIO_enuSetPinValue>
	return ES_OK;
    5f9c:	81 e0       	ldi	r24, 0x01	; 1
}
    5f9e:	60 96       	adiw	r28, 0x10	; 16
    5fa0:	0f b6       	in	r0, 0x3f	; 63
    5fa2:	f8 94       	cli
    5fa4:	de bf       	out	0x3e, r29	; 62
    5fa6:	0f be       	out	0x3f, r0	; 63
    5fa8:	cd bf       	out	0x3d, r28	; 61
    5faa:	cf 91       	pop	r28
    5fac:	df 91       	pop	r29
    5fae:	08 95       	ret

00005fb0 <main>:
 	 	 	 through a keypad and as Input then according to the specified operation print the result on LCD

*/
#include "main.h"
int main(void)
{
    5fb0:	ef 92       	push	r14
    5fb2:	ff 92       	push	r15
    5fb4:	0f 93       	push	r16
    5fb6:	1f 93       	push	r17
    5fb8:	df 93       	push	r29
    5fba:	cf 93       	push	r28
    5fbc:	cd b7       	in	r28, 0x3d	; 61
    5fbe:	de b7       	in	r29, 0x3e	; 62
    5fc0:	a4 97       	sbiw	r28, 0x24	; 36
    5fc2:	0f b6       	in	r0, 0x3f	; 63
    5fc4:	f8 94       	cli
    5fc6:	de bf       	out	0x3e, r29	; 62
    5fc8:	0f be       	out	0x3f, r0	; 63
    5fca:	cd bf       	out	0x3d, r28	; 61
	Calculator MyCalculator;
	KEYPAD_enuInit();
    5fcc:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <KEYPAD_enuInit>
	LCD_enuInit();
    5fd0:	0e 94 56 1f 	call	0x3eac	; 0x3eac <LCD_enuInit>
	Calculator_Init(&MyCalculator);
    5fd4:	ce 01       	movw	r24, r28
    5fd6:	40 96       	adiw	r24, 0x10	; 16
    5fd8:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <Calculator_Init>

	while(1)
	{

		KEYPAD_enuGetPressedKey(&(MyCalculator.key));
    5fdc:	ce 01       	movw	r24, r28
    5fde:	40 96       	adiw	r24, 0x10	; 16
    5fe0:	02 96       	adiw	r24, 0x02	; 2
    5fe2:	0e 94 09 28 	call	0x5012	; 0x5012 <KEYPAD_enuGetPressedKey>
		if ((MyCalculator.key != NOT_PRESSED)&&(MyCalculator.Error_Flag == EMPTY))
    5fe6:	8a 89       	ldd	r24, Y+18	; 0x12
    5fe8:	8f 3f       	cpi	r24, 0xFF	; 255
    5fea:	09 f4       	brne	.+2      	; 0x5fee <main+0x3e>
    5fec:	7c c2       	rjmp	.+1272   	; 0x64e6 <main+0x536>
    5fee:	88 89       	ldd	r24, Y+16	; 0x10
    5ff0:	81 70       	andi	r24, 0x01	; 1
    5ff2:	88 23       	and	r24, r24
    5ff4:	09 f0       	breq	.+2      	; 0x5ff8 <main+0x48>
    5ff6:	77 c2       	rjmp	.+1262   	; 0x64e6 <main+0x536>
		{
			if(MyCalculator.result_flag == RAISED)
    5ff8:	89 89       	ldd	r24, Y+17	; 0x11
    5ffa:	81 70       	andi	r24, 0x01	; 1
    5ffc:	88 23       	and	r24, r24
    5ffe:	89 f0       	breq	.+34     	; 0x6022 <main+0x72>
			{
				if(MyCalculator.key != '=')
    6000:	8a 89       	ldd	r24, Y+18	; 0x12
    6002:	8d 33       	cpi	r24, 0x3D	; 61
    6004:	61 f0       	breq	.+24     	; 0x601e <main+0x6e>
				{
					u8 temp =MyCalculator.key;
    6006:	8a 89       	ldd	r24, Y+18	; 0x12
    6008:	8f 87       	std	Y+15, r24	; 0x0f

					Calculator_Init(&MyCalculator);
    600a:	ce 01       	movw	r24, r28
    600c:	40 96       	adiw	r24, 0x10	; 16
    600e:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <Calculator_Init>
					LCD_enuWriteCommand(0x01);
    6012:	81 e0       	ldi	r24, 0x01	; 1
    6014:	0e 94 c9 22 	call	0x4592	; 0x4592 <LCD_enuWriteCommand>

					MyCalculator.key = temp;
    6018:	8f 85       	ldd	r24, Y+15	; 0x0f
    601a:	8a 8b       	std	Y+18, r24	; 0x12
    601c:	02 c0       	rjmp	.+4      	; 0x6022 <main+0x72>
				}else
				{
					MyCalculator.key = STAND_BY_MODE;
    601e:	8a e5       	ldi	r24, 0x5A	; 90
    6020:	8a 8b       	std	Y+18, r24	; 0x12
				}
			}

			if(MyCalculator.key == 'C')
    6022:	8a 89       	ldd	r24, Y+18	; 0x12
    6024:	83 34       	cpi	r24, 0x43	; 67
    6026:	41 f4       	brne	.+16     	; 0x6038 <main+0x88>
			{
				Calculator_Init(&MyCalculator);
    6028:	ce 01       	movw	r24, r28
    602a:	40 96       	adiw	r24, 0x10	; 16
    602c:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <Calculator_Init>
				LCD_enuWriteCommand(0x01);
    6030:	81 e0       	ldi	r24, 0x01	; 1
    6032:	0e 94 c9 22 	call	0x4592	; 0x4592 <LCD_enuWriteCommand>
    6036:	d2 cf       	rjmp	.-92     	; 0x5fdc <main+0x2c>
			}
			else if(MyCalculator.First_Entery_Flag)
    6038:	88 89       	ldd	r24, Y+16	; 0x10
    603a:	80 71       	andi	r24, 0x10	; 16
    603c:	88 23       	and	r24, r24
    603e:	99 f1       	breq	.+102    	; 0x60a6 <main+0xf6>
			{
				if(((MyCalculator.key>='1')&&(MyCalculator.key<='9'))||(MyCalculator.key == '-')||(MyCalculator.key == '+'))
    6040:	8a 89       	ldd	r24, Y+18	; 0x12
    6042:	81 33       	cpi	r24, 0x31	; 49
    6044:	18 f0       	brcs	.+6      	; 0x604c <main+0x9c>
    6046:	8a 89       	ldd	r24, Y+18	; 0x12
    6048:	8a 33       	cpi	r24, 0x3A	; 58
    604a:	30 f0       	brcs	.+12     	; 0x6058 <main+0xa8>
    604c:	8a 89       	ldd	r24, Y+18	; 0x12
    604e:	8d 32       	cpi	r24, 0x2D	; 45
    6050:	19 f0       	breq	.+6      	; 0x6058 <main+0xa8>
    6052:	8a 89       	ldd	r24, Y+18	; 0x12
    6054:	8b 32       	cpi	r24, 0x2B	; 43
    6056:	11 f6       	brne	.-124    	; 0x5fdc <main+0x2c>
				{
					MyCalculator.First_Entery_Flag = EMPTY;
    6058:	88 89       	ldd	r24, Y+16	; 0x10
    605a:	8f 7e       	andi	r24, 0xEF	; 239
    605c:	88 8b       	std	Y+16, r24	; 0x10
					LCD_enuWriteData(MyCalculator.key);
    605e:	8a 89       	ldd	r24, Y+18	; 0x12
    6060:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
					if(MyCalculator.key == '-')
    6064:	8a 89       	ldd	r24, Y+18	; 0x12
    6066:	8d 32       	cpi	r24, 0x2D	; 45
    6068:	21 f4       	brne	.+8      	; 0x6072 <main+0xc2>
					{
						MyCalculator.Sign_Flag1 = NEGATIVE;
    606a:	88 89       	ldd	r24, Y+16	; 0x10
    606c:	82 60       	ori	r24, 0x02	; 2
    606e:	88 8b       	std	Y+16, r24	; 0x10
    6070:	b5 cf       	rjmp	.-150    	; 0x5fdc <main+0x2c>
					}else if(MyCalculator.key == '+')
    6072:	8a 89       	ldd	r24, Y+18	; 0x12
    6074:	8b 32       	cpi	r24, 0x2B	; 43
    6076:	21 f4       	brne	.+8      	; 0x6080 <main+0xd0>
					{
						MyCalculator.Sign_Flag1 = POSTIVE;
    6078:	88 89       	ldd	r24, Y+16	; 0x10
    607a:	8d 7f       	andi	r24, 0xFD	; 253
    607c:	88 8b       	std	Y+16, r24	; 0x10
    607e:	ae cf       	rjmp	.-164    	; 0x5fdc <main+0x2c>
					}else
					{
						MyCalculator.Sign_Flag1 = POSTIVE;
    6080:	88 89       	ldd	r24, Y+16	; 0x10
    6082:	8d 7f       	andi	r24, 0xFD	; 253
    6084:	88 8b       	std	Y+16, r24	; 0x10
						MyCalculator.First_First_Digit_Flag = EMPTY;
    6086:	88 89       	ldd	r24, Y+16	; 0x10
    6088:	8f 7b       	andi	r24, 0xBF	; 191
    608a:	88 8b       	std	Y+16, r24	; 0x10
						MyCalculator.num1=(MyCalculator.key-'0');
    608c:	8a 89       	ldd	r24, Y+18	; 0x12
    608e:	88 2f       	mov	r24, r24
    6090:	90 e0       	ldi	r25, 0x00	; 0
    6092:	c0 97       	sbiw	r24, 0x30	; 48
    6094:	aa 27       	eor	r26, r26
    6096:	97 fd       	sbrc	r25, 7
    6098:	a0 95       	com	r26
    609a:	ba 2f       	mov	r27, r26
    609c:	8b 8b       	std	Y+19, r24	; 0x13
    609e:	9c 8b       	std	Y+20, r25	; 0x14
    60a0:	ad 8b       	std	Y+21, r26	; 0x15
    60a2:	be 8b       	std	Y+22, r27	; 0x16
    60a4:	9b cf       	rjmp	.-202    	; 0x5fdc <main+0x2c>
					}
				}else
				{
					//MyCalculator.Error_Flag = RAISED;
				}
			}else if(MyCalculator.First_First_Digit_Flag)
    60a6:	88 89       	ldd	r24, Y+16	; 0x10
    60a8:	80 74       	andi	r24, 0x40	; 64
    60aa:	88 23       	and	r24, r24
    60ac:	d9 f0       	breq	.+54     	; 0x60e4 <main+0x134>
			{
				if((MyCalculator.key>='1')&&(MyCalculator.key<='9'))
    60ae:	8a 89       	ldd	r24, Y+18	; 0x12
    60b0:	81 33       	cpi	r24, 0x31	; 49
    60b2:	08 f4       	brcc	.+2      	; 0x60b6 <main+0x106>
    60b4:	93 cf       	rjmp	.-218    	; 0x5fdc <main+0x2c>
    60b6:	8a 89       	ldd	r24, Y+18	; 0x12
    60b8:	8a 33       	cpi	r24, 0x3A	; 58
    60ba:	08 f0       	brcs	.+2      	; 0x60be <main+0x10e>
    60bc:	8f cf       	rjmp	.-226    	; 0x5fdc <main+0x2c>
					{
						MyCalculator.First_First_Digit_Flag = EMPTY;
    60be:	88 89       	ldd	r24, Y+16	; 0x10
    60c0:	8f 7b       	andi	r24, 0xBF	; 191
    60c2:	88 8b       	std	Y+16, r24	; 0x10
						LCD_enuWriteData(MyCalculator.key);
    60c4:	8a 89       	ldd	r24, Y+18	; 0x12
    60c6:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
						MyCalculator.num1=(MyCalculator.key-'0');
    60ca:	8a 89       	ldd	r24, Y+18	; 0x12
    60cc:	88 2f       	mov	r24, r24
    60ce:	90 e0       	ldi	r25, 0x00	; 0
    60d0:	c0 97       	sbiw	r24, 0x30	; 48
    60d2:	aa 27       	eor	r26, r26
    60d4:	97 fd       	sbrc	r25, 7
    60d6:	a0 95       	com	r26
    60d8:	ba 2f       	mov	r27, r26
    60da:	8b 8b       	std	Y+19, r24	; 0x13
    60dc:	9c 8b       	std	Y+20, r25	; 0x14
    60de:	ad 8b       	std	Y+21, r26	; 0x15
    60e0:	be 8b       	std	Y+22, r27	; 0x16
    60e2:	7c cf       	rjmp	.-264    	; 0x5fdc <main+0x2c>
					}else
					{
						//MyCalculator.Error_Flag = RAISED;
					}
			}else if(MyCalculator.operation == EMPTY)
    60e4:	89 89       	ldd	r24, Y+17	; 0x11
    60e6:	8e 7f       	andi	r24, 0xFE	; 254
    60e8:	88 23       	and	r24, r24
    60ea:	09 f0       	breq	.+2      	; 0x60ee <main+0x13e>
    60ec:	78 c0       	rjmp	.+240    	; 0x61de <main+0x22e>
			{
				if((MyCalculator.key>='0')&&(MyCalculator.key<='9'))
    60ee:	8a 89       	ldd	r24, Y+18	; 0x12
    60f0:	80 33       	cpi	r24, 0x30	; 48
    60f2:	68 f1       	brcs	.+90     	; 0x614e <main+0x19e>
    60f4:	8a 89       	ldd	r24, Y+18	; 0x12
    60f6:	8a 33       	cpi	r24, 0x3A	; 58
    60f8:	50 f5       	brcc	.+84     	; 0x614e <main+0x19e>
				{
					UP_DECIMAL_UNIT(MyCalculator.num1);
    60fa:	8b 89       	ldd	r24, Y+19	; 0x13
    60fc:	9c 89       	ldd	r25, Y+20	; 0x14
    60fe:	ad 89       	ldd	r26, Y+21	; 0x15
    6100:	be 89       	ldd	r27, Y+22	; 0x16
    6102:	2a e0       	ldi	r18, 0x0A	; 10
    6104:	30 e0       	ldi	r19, 0x00	; 0
    6106:	40 e0       	ldi	r20, 0x00	; 0
    6108:	50 e0       	ldi	r21, 0x00	; 0
    610a:	bc 01       	movw	r22, r24
    610c:	cd 01       	movw	r24, r26
    610e:	0e 94 57 33 	call	0x66ae	; 0x66ae <__mulsi3>
    6112:	dc 01       	movw	r26, r24
    6114:	cb 01       	movw	r24, r22
    6116:	8b 8b       	std	Y+19, r24	; 0x13
    6118:	9c 8b       	std	Y+20, r25	; 0x14
    611a:	ad 8b       	std	Y+21, r26	; 0x15
    611c:	be 8b       	std	Y+22, r27	; 0x16
					MyCalculator.num1 += ((MyCalculator.key)-'0');
    611e:	2b 89       	ldd	r18, Y+19	; 0x13
    6120:	3c 89       	ldd	r19, Y+20	; 0x14
    6122:	4d 89       	ldd	r20, Y+21	; 0x15
    6124:	5e 89       	ldd	r21, Y+22	; 0x16
    6126:	8a 89       	ldd	r24, Y+18	; 0x12
    6128:	88 2f       	mov	r24, r24
    612a:	90 e0       	ldi	r25, 0x00	; 0
    612c:	c0 97       	sbiw	r24, 0x30	; 48
    612e:	aa 27       	eor	r26, r26
    6130:	97 fd       	sbrc	r25, 7
    6132:	a0 95       	com	r26
    6134:	ba 2f       	mov	r27, r26
    6136:	82 0f       	add	r24, r18
    6138:	93 1f       	adc	r25, r19
    613a:	a4 1f       	adc	r26, r20
    613c:	b5 1f       	adc	r27, r21
    613e:	8b 8b       	std	Y+19, r24	; 0x13
    6140:	9c 8b       	std	Y+20, r25	; 0x14
    6142:	ad 8b       	std	Y+21, r26	; 0x15
    6144:	be 8b       	std	Y+22, r27	; 0x16
					LCD_enuWriteData(MyCalculator.key);
    6146:	8a 89       	ldd	r24, Y+18	; 0x12
    6148:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
    614c:	47 cf       	rjmp	.-370    	; 0x5fdc <main+0x2c>
				}else if((MyCalculator.key == '/')||(MyCalculator.key == 'x')||(MyCalculator.key == '+')||(MyCalculator.key == '-'))
    614e:	8a 89       	ldd	r24, Y+18	; 0x12
    6150:	8f 32       	cpi	r24, 0x2F	; 47
    6152:	49 f0       	breq	.+18     	; 0x6166 <main+0x1b6>
    6154:	8a 89       	ldd	r24, Y+18	; 0x12
    6156:	88 37       	cpi	r24, 0x78	; 120
    6158:	31 f0       	breq	.+12     	; 0x6166 <main+0x1b6>
    615a:	8a 89       	ldd	r24, Y+18	; 0x12
    615c:	8b 32       	cpi	r24, 0x2B	; 43
    615e:	19 f0       	breq	.+6      	; 0x6166 <main+0x1b6>
    6160:	8a 89       	ldd	r24, Y+18	; 0x12
    6162:	8d 32       	cpi	r24, 0x2D	; 45
    6164:	91 f4       	brne	.+36     	; 0x618a <main+0x1da>
				{
					MyCalculator.operation = MyCalculator.key;
    6166:	8a 89       	ldd	r24, Y+18	; 0x12
    6168:	8f 77       	andi	r24, 0x7F	; 127
    616a:	98 2f       	mov	r25, r24
    616c:	99 0f       	add	r25, r25
    616e:	89 89       	ldd	r24, Y+17	; 0x11
    6170:	81 70       	andi	r24, 0x01	; 1
    6172:	89 2b       	or	r24, r25
    6174:	89 8b       	std	Y+17, r24	; 0x11
					MyCalculator.Second_Entery_Flag = RAISED;
    6176:	88 89       	ldd	r24, Y+16	; 0x10
    6178:	80 62       	ori	r24, 0x20	; 32
    617a:	88 8b       	std	Y+16, r24	; 0x10
					MyCalculator.Second_First_Digit_Flag = RAISED;
    617c:	88 89       	ldd	r24, Y+16	; 0x10
    617e:	80 68       	ori	r24, 0x80	; 128
    6180:	88 8b       	std	Y+16, r24	; 0x10
					LCD_enuWriteData(MyCalculator.key);
    6182:	8a 89       	ldd	r24, Y+18	; 0x12
    6184:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
    6188:	29 cf       	rjmp	.-430    	; 0x5fdc <main+0x2c>
				}else if(MyCalculator.key == '=')
    618a:	8a 89       	ldd	r24, Y+18	; 0x12
    618c:	8d 33       	cpi	r24, 0x3D	; 61
    618e:	09 f0       	breq	.+2      	; 0x6192 <main+0x1e2>
    6190:	25 cf       	rjmp	.-438    	; 0x5fdc <main+0x2c>
				{
					MyCalculator.result_flag =RAISED;
    6192:	89 89       	ldd	r24, Y+17	; 0x11
    6194:	81 60       	ori	r24, 0x01	; 1
    6196:	89 8b       	std	Y+17, r24	; 0x11
					//LCD_enuWriteCommand(0x01);
					//LCD_enuWriteString("Result =");
					LCD_enuWriteData(MyCalculator.key);
    6198:	8a 89       	ldd	r24, Y+18	; 0x12
    619a:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
					LCD_enuGoToPosition(2,1);
    619e:	82 e0       	ldi	r24, 0x02	; 2
    61a0:	61 e0       	ldi	r22, 0x01	; 1
    61a2:	0e 94 a7 24 	call	0x494e	; 0x494e <LCD_enuGoToPosition>
					if(MyCalculator.Sign_Flag1 == NEGATIVE)
    61a6:	88 89       	ldd	r24, Y+16	; 0x10
    61a8:	82 70       	andi	r24, 0x02	; 2
    61aa:	88 23       	and	r24, r24
    61ac:	79 f0       	breq	.+30     	; 0x61cc <main+0x21c>
					{
						REVERSE_SIGN(MyCalculator.num1);
    61ae:	8b 89       	ldd	r24, Y+19	; 0x13
    61b0:	9c 89       	ldd	r25, Y+20	; 0x14
    61b2:	ad 89       	ldd	r26, Y+21	; 0x15
    61b4:	be 89       	ldd	r27, Y+22	; 0x16
    61b6:	b0 95       	com	r27
    61b8:	a0 95       	com	r26
    61ba:	90 95       	com	r25
    61bc:	81 95       	neg	r24
    61be:	9f 4f       	sbci	r25, 0xFF	; 255
    61c0:	af 4f       	sbci	r26, 0xFF	; 255
    61c2:	bf 4f       	sbci	r27, 0xFF	; 255
    61c4:	8b 8b       	std	Y+19, r24	; 0x13
    61c6:	9c 8b       	std	Y+20, r25	; 0x14
    61c8:	ad 8b       	std	Y+21, r26	; 0x15
    61ca:	be 8b       	std	Y+22, r27	; 0x16
					}
					LCD_enuWriteIntegerNum(MyCalculator.num1);
    61cc:	8b 89       	ldd	r24, Y+19	; 0x13
    61ce:	9c 89       	ldd	r25, Y+20	; 0x14
    61d0:	ad 89       	ldd	r26, Y+21	; 0x15
    61d2:	be 89       	ldd	r27, Y+22	; 0x16
    61d4:	bc 01       	movw	r22, r24
    61d6:	cd 01       	movw	r24, r26
    61d8:	0e 94 41 23 	call	0x4682	; 0x4682 <LCD_enuWriteIntegerNum>
    61dc:	ff ce       	rjmp	.-514    	; 0x5fdc <main+0x2c>
				}
			}else if(MyCalculator.Second_Entery_Flag)
    61de:	88 89       	ldd	r24, Y+16	; 0x10
    61e0:	80 72       	andi	r24, 0x20	; 32
    61e2:	88 23       	and	r24, r24
    61e4:	a1 f1       	breq	.+104    	; 0x624e <main+0x29e>
			{
				if(((MyCalculator.key>='1')&&(MyCalculator.key<='9'))||(MyCalculator.key == '-')||(MyCalculator.key == '+'))
    61e6:	8a 89       	ldd	r24, Y+18	; 0x12
    61e8:	81 33       	cpi	r24, 0x31	; 49
    61ea:	18 f0       	brcs	.+6      	; 0x61f2 <main+0x242>
    61ec:	8a 89       	ldd	r24, Y+18	; 0x12
    61ee:	8a 33       	cpi	r24, 0x3A	; 58
    61f0:	38 f0       	brcs	.+14     	; 0x6200 <main+0x250>
    61f2:	8a 89       	ldd	r24, Y+18	; 0x12
    61f4:	8d 32       	cpi	r24, 0x2D	; 45
    61f6:	21 f0       	breq	.+8      	; 0x6200 <main+0x250>
    61f8:	8a 89       	ldd	r24, Y+18	; 0x12
    61fa:	8b 32       	cpi	r24, 0x2B	; 43
    61fc:	09 f0       	breq	.+2      	; 0x6200 <main+0x250>
    61fe:	ee ce       	rjmp	.-548    	; 0x5fdc <main+0x2c>
				{
					MyCalculator.Second_Entery_Flag = EMPTY;
    6200:	88 89       	ldd	r24, Y+16	; 0x10
    6202:	8f 7d       	andi	r24, 0xDF	; 223
    6204:	88 8b       	std	Y+16, r24	; 0x10
					LCD_enuWriteData(MyCalculator.key);
    6206:	8a 89       	ldd	r24, Y+18	; 0x12
    6208:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
					if(MyCalculator.key == '-')
    620c:	8a 89       	ldd	r24, Y+18	; 0x12
    620e:	8d 32       	cpi	r24, 0x2D	; 45
    6210:	21 f4       	brne	.+8      	; 0x621a <main+0x26a>
					{
						MyCalculator.Sign_Flag2 = NEGATIVE;
    6212:	88 89       	ldd	r24, Y+16	; 0x10
    6214:	84 60       	ori	r24, 0x04	; 4
    6216:	88 8b       	std	Y+16, r24	; 0x10
    6218:	e1 ce       	rjmp	.-574    	; 0x5fdc <main+0x2c>
					}else if(MyCalculator.key == '+')
    621a:	8a 89       	ldd	r24, Y+18	; 0x12
    621c:	8b 32       	cpi	r24, 0x2B	; 43
    621e:	21 f4       	brne	.+8      	; 0x6228 <main+0x278>
					{
						MyCalculator.Sign_Flag2 = POSTIVE;
    6220:	88 89       	ldd	r24, Y+16	; 0x10
    6222:	8b 7f       	andi	r24, 0xFB	; 251
    6224:	88 8b       	std	Y+16, r24	; 0x10
    6226:	da ce       	rjmp	.-588    	; 0x5fdc <main+0x2c>
					}else
					{
						MyCalculator.Second_First_Digit_Flag = EMPTY;
    6228:	88 89       	ldd	r24, Y+16	; 0x10
    622a:	8f 77       	andi	r24, 0x7F	; 127
    622c:	88 8b       	std	Y+16, r24	; 0x10
						MyCalculator.Sign_Flag2 = POSTIVE;
    622e:	88 89       	ldd	r24, Y+16	; 0x10
    6230:	8b 7f       	andi	r24, 0xFB	; 251
    6232:	88 8b       	std	Y+16, r24	; 0x10
						MyCalculator.num2=(MyCalculator.key-'0');
    6234:	8a 89       	ldd	r24, Y+18	; 0x12
    6236:	88 2f       	mov	r24, r24
    6238:	90 e0       	ldi	r25, 0x00	; 0
    623a:	c0 97       	sbiw	r24, 0x30	; 48
    623c:	aa 27       	eor	r26, r26
    623e:	97 fd       	sbrc	r25, 7
    6240:	a0 95       	com	r26
    6242:	ba 2f       	mov	r27, r26
    6244:	8f 8b       	std	Y+23, r24	; 0x17
    6246:	98 8f       	std	Y+24, r25	; 0x18
    6248:	a9 8f       	std	Y+25, r26	; 0x19
    624a:	ba 8f       	std	Y+26, r27	; 0x1a
    624c:	c7 ce       	rjmp	.-626    	; 0x5fdc <main+0x2c>
					}
				}else
				{
					//MyCalculator.Error_Flag = RAISED;
				}
			}else if(MyCalculator.Second_First_Digit_Flag)
    624e:	88 89       	ldd	r24, Y+16	; 0x10
    6250:	80 78       	andi	r24, 0x80	; 128
    6252:	88 23       	and	r24, r24
    6254:	d9 f0       	breq	.+54     	; 0x628c <main+0x2dc>
			{
				if((MyCalculator.key>='1')&&(MyCalculator.key<='9'))
    6256:	8a 89       	ldd	r24, Y+18	; 0x12
    6258:	81 33       	cpi	r24, 0x31	; 49
    625a:	08 f4       	brcc	.+2      	; 0x625e <main+0x2ae>
    625c:	bf ce       	rjmp	.-642    	; 0x5fdc <main+0x2c>
    625e:	8a 89       	ldd	r24, Y+18	; 0x12
    6260:	8a 33       	cpi	r24, 0x3A	; 58
    6262:	08 f0       	brcs	.+2      	; 0x6266 <main+0x2b6>
    6264:	bb ce       	rjmp	.-650    	; 0x5fdc <main+0x2c>
				{
					MyCalculator.Second_First_Digit_Flag = EMPTY;
    6266:	88 89       	ldd	r24, Y+16	; 0x10
    6268:	8f 77       	andi	r24, 0x7F	; 127
    626a:	88 8b       	std	Y+16, r24	; 0x10
					LCD_enuWriteData(MyCalculator.key);
    626c:	8a 89       	ldd	r24, Y+18	; 0x12
    626e:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
					MyCalculator.num2=(MyCalculator.key-'0');
    6272:	8a 89       	ldd	r24, Y+18	; 0x12
    6274:	88 2f       	mov	r24, r24
    6276:	90 e0       	ldi	r25, 0x00	; 0
    6278:	c0 97       	sbiw	r24, 0x30	; 48
    627a:	aa 27       	eor	r26, r26
    627c:	97 fd       	sbrc	r25, 7
    627e:	a0 95       	com	r26
    6280:	ba 2f       	mov	r27, r26
    6282:	8f 8b       	std	Y+23, r24	; 0x17
    6284:	98 8f       	std	Y+24, r25	; 0x18
    6286:	a9 8f       	std	Y+25, r26	; 0x19
    6288:	ba 8f       	std	Y+26, r27	; 0x1a
    628a:	a8 ce       	rjmp	.-688    	; 0x5fdc <main+0x2c>
				}else
				{
					//MyCalculator.Error_Flag = RAISED;
				}
			}else if(MyCalculator.key != '=')
    628c:	8a 89       	ldd	r24, Y+18	; 0x12
    628e:	8d 33       	cpi	r24, 0x3D	; 61
    6290:	91 f1       	breq	.+100    	; 0x62f6 <main+0x346>
			{
				if((MyCalculator.key>='0')&&(MyCalculator.key<='9'))
    6292:	8a 89       	ldd	r24, Y+18	; 0x12
    6294:	80 33       	cpi	r24, 0x30	; 48
    6296:	08 f4       	brcc	.+2      	; 0x629a <main+0x2ea>
    6298:	a1 ce       	rjmp	.-702    	; 0x5fdc <main+0x2c>
    629a:	8a 89       	ldd	r24, Y+18	; 0x12
    629c:	8a 33       	cpi	r24, 0x3A	; 58
    629e:	08 f0       	brcs	.+2      	; 0x62a2 <main+0x2f2>
    62a0:	9d ce       	rjmp	.-710    	; 0x5fdc <main+0x2c>
				{
					UP_DECIMAL_UNIT(MyCalculator.num2);
    62a2:	8f 89       	ldd	r24, Y+23	; 0x17
    62a4:	98 8d       	ldd	r25, Y+24	; 0x18
    62a6:	a9 8d       	ldd	r26, Y+25	; 0x19
    62a8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    62aa:	2a e0       	ldi	r18, 0x0A	; 10
    62ac:	30 e0       	ldi	r19, 0x00	; 0
    62ae:	40 e0       	ldi	r20, 0x00	; 0
    62b0:	50 e0       	ldi	r21, 0x00	; 0
    62b2:	bc 01       	movw	r22, r24
    62b4:	cd 01       	movw	r24, r26
    62b6:	0e 94 57 33 	call	0x66ae	; 0x66ae <__mulsi3>
    62ba:	dc 01       	movw	r26, r24
    62bc:	cb 01       	movw	r24, r22
    62be:	8f 8b       	std	Y+23, r24	; 0x17
    62c0:	98 8f       	std	Y+24, r25	; 0x18
    62c2:	a9 8f       	std	Y+25, r26	; 0x19
    62c4:	ba 8f       	std	Y+26, r27	; 0x1a
					MyCalculator.num2 += ((MyCalculator.key)-'0');
    62c6:	2f 89       	ldd	r18, Y+23	; 0x17
    62c8:	38 8d       	ldd	r19, Y+24	; 0x18
    62ca:	49 8d       	ldd	r20, Y+25	; 0x19
    62cc:	5a 8d       	ldd	r21, Y+26	; 0x1a
    62ce:	8a 89       	ldd	r24, Y+18	; 0x12
    62d0:	88 2f       	mov	r24, r24
    62d2:	90 e0       	ldi	r25, 0x00	; 0
    62d4:	c0 97       	sbiw	r24, 0x30	; 48
    62d6:	aa 27       	eor	r26, r26
    62d8:	97 fd       	sbrc	r25, 7
    62da:	a0 95       	com	r26
    62dc:	ba 2f       	mov	r27, r26
    62de:	82 0f       	add	r24, r18
    62e0:	93 1f       	adc	r25, r19
    62e2:	a4 1f       	adc	r26, r20
    62e4:	b5 1f       	adc	r27, r21
    62e6:	8f 8b       	std	Y+23, r24	; 0x17
    62e8:	98 8f       	std	Y+24, r25	; 0x18
    62ea:	a9 8f       	std	Y+25, r26	; 0x19
    62ec:	ba 8f       	std	Y+26, r27	; 0x1a
					LCD_enuWriteData(MyCalculator.key);
    62ee:	8a 89       	ldd	r24, Y+18	; 0x12
    62f0:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
    62f4:	73 ce       	rjmp	.-794    	; 0x5fdc <main+0x2c>
				}else
				{
					//MyCalculator.Error_Flag = RAISED;
				}
			}
			else if(MyCalculator.key == '=')
    62f6:	8a 89       	ldd	r24, Y+18	; 0x12
    62f8:	8d 33       	cpi	r24, 0x3D	; 61
    62fa:	09 f0       	breq	.+2      	; 0x62fe <main+0x34e>
    62fc:	6f ce       	rjmp	.-802    	; 0x5fdc <main+0x2c>
			{
				MyCalculator.result_flag = RAISED;
    62fe:	89 89       	ldd	r24, Y+17	; 0x11
    6300:	81 60       	ori	r24, 0x01	; 1
    6302:	89 8b       	std	Y+17, r24	; 0x11
				if(MyCalculator.operation != '/')
    6304:	89 89       	ldd	r24, Y+17	; 0x11
    6306:	8e 7f       	andi	r24, 0xFE	; 254
    6308:	8e 35       	cpi	r24, 0x5E	; 94
    630a:	39 f1       	breq	.+78     	; 0x635a <main+0x3aa>
				{
					if(MyCalculator.Sign_Flag1 == NEGATIVE)
    630c:	88 89       	ldd	r24, Y+16	; 0x10
    630e:	82 70       	andi	r24, 0x02	; 2
    6310:	88 23       	and	r24, r24
    6312:	79 f0       	breq	.+30     	; 0x6332 <main+0x382>
					{
						REVERSE_SIGN(MyCalculator.num1);
    6314:	8b 89       	ldd	r24, Y+19	; 0x13
    6316:	9c 89       	ldd	r25, Y+20	; 0x14
    6318:	ad 89       	ldd	r26, Y+21	; 0x15
    631a:	be 89       	ldd	r27, Y+22	; 0x16
    631c:	b0 95       	com	r27
    631e:	a0 95       	com	r26
    6320:	90 95       	com	r25
    6322:	81 95       	neg	r24
    6324:	9f 4f       	sbci	r25, 0xFF	; 255
    6326:	af 4f       	sbci	r26, 0xFF	; 255
    6328:	bf 4f       	sbci	r27, 0xFF	; 255
    632a:	8b 8b       	std	Y+19, r24	; 0x13
    632c:	9c 8b       	std	Y+20, r25	; 0x14
    632e:	ad 8b       	std	Y+21, r26	; 0x15
    6330:	be 8b       	std	Y+22, r27	; 0x16
					}
					if(MyCalculator.Sign_Flag2 == NEGATIVE)
    6332:	88 89       	ldd	r24, Y+16	; 0x10
    6334:	84 70       	andi	r24, 0x04	; 4
    6336:	88 23       	and	r24, r24
    6338:	09 f1       	breq	.+66     	; 0x637c <main+0x3cc>
					{
						REVERSE_SIGN(MyCalculator.num2);
    633a:	8f 89       	ldd	r24, Y+23	; 0x17
    633c:	98 8d       	ldd	r25, Y+24	; 0x18
    633e:	a9 8d       	ldd	r26, Y+25	; 0x19
    6340:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6342:	b0 95       	com	r27
    6344:	a0 95       	com	r26
    6346:	90 95       	com	r25
    6348:	81 95       	neg	r24
    634a:	9f 4f       	sbci	r25, 0xFF	; 255
    634c:	af 4f       	sbci	r26, 0xFF	; 255
    634e:	bf 4f       	sbci	r27, 0xFF	; 255
    6350:	8f 8b       	std	Y+23, r24	; 0x17
    6352:	98 8f       	std	Y+24, r25	; 0x18
    6354:	a9 8f       	std	Y+25, r26	; 0x19
    6356:	ba 8f       	std	Y+26, r27	; 0x1a
    6358:	11 c0       	rjmp	.+34     	; 0x637c <main+0x3cc>
					}
				}else
				{
					if(MyCalculator.Sign_Flag1 == MyCalculator.Sign_Flag2)
    635a:	88 89       	ldd	r24, Y+16	; 0x10
    635c:	98 2f       	mov	r25, r24
    635e:	96 95       	lsr	r25
    6360:	91 70       	andi	r25, 0x01	; 1
    6362:	88 89       	ldd	r24, Y+16	; 0x10
    6364:	86 95       	lsr	r24
    6366:	86 95       	lsr	r24
    6368:	81 70       	andi	r24, 0x01	; 1
    636a:	98 17       	cp	r25, r24
    636c:	21 f4       	brne	.+8      	; 0x6376 <main+0x3c6>
					{
						MyCalculator.Sign_result_float_Flag =POSTIVE;
    636e:	88 89       	ldd	r24, Y+16	; 0x10
    6370:	87 7f       	andi	r24, 0xF7	; 247
    6372:	88 8b       	std	Y+16, r24	; 0x10
    6374:	03 c0       	rjmp	.+6      	; 0x637c <main+0x3cc>
					}else
					{
						MyCalculator.Sign_result_float_Flag = NEGATIVE;
    6376:	88 89       	ldd	r24, Y+16	; 0x10
    6378:	88 60       	ori	r24, 0x08	; 8
    637a:	88 8b       	std	Y+16, r24	; 0x10
					}
				}

				//LCD_enuWriteCommand(0x01);
				//LCD_enuWriteString("Result =");
				LCD_enuWriteData(MyCalculator.key);
    637c:	8a 89       	ldd	r24, Y+18	; 0x12
    637e:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
				LCD_enuGoToPosition(2,1);
    6382:	82 e0       	ldi	r24, 0x02	; 2
    6384:	61 e0       	ldi	r22, 0x01	; 1
    6386:	0e 94 a7 24 	call	0x494e	; 0x494e <LCD_enuGoToPosition>
				switch(MyCalculator.operation)
    638a:	89 89       	ldd	r24, Y+17	; 0x11
    638c:	86 95       	lsr	r24
    638e:	e8 2e       	mov	r14, r24
    6390:	ff 24       	eor	r15, r15
    6392:	fc a2       	std	Y+36, r15	; 0x24
    6394:	eb a2       	std	Y+35, r14	; 0x23
    6396:	0b a1       	ldd	r16, Y+35	; 0x23
    6398:	1c a1       	ldd	r17, Y+36	; 0x24
    639a:	0f 32       	cpi	r16, 0x2F	; 47
    639c:	11 05       	cpc	r17, r1
    639e:	09 f4       	brne	.+2      	; 0x63a2 <main+0x3f2>
    63a0:	67 c0       	rjmp	.+206    	; 0x6470 <main+0x4c0>
    63a2:	2b a1       	ldd	r18, Y+35	; 0x23
    63a4:	3c a1       	ldd	r19, Y+36	; 0x24
    63a6:	20 33       	cpi	r18, 0x30	; 48
    63a8:	31 05       	cpc	r19, r1
    63aa:	5c f4       	brge	.+22     	; 0x63c2 <main+0x412>
    63ac:	8b a1       	ldd	r24, Y+35	; 0x23
    63ae:	9c a1       	ldd	r25, Y+36	; 0x24
    63b0:	8b 32       	cpi	r24, 0x2B	; 43
    63b2:	91 05       	cpc	r25, r1
    63b4:	61 f0       	breq	.+24     	; 0x63ce <main+0x41e>
    63b6:	0b a1       	ldd	r16, Y+35	; 0x23
    63b8:	1c a1       	ldd	r17, Y+36	; 0x24
    63ba:	0d 32       	cpi	r16, 0x2D	; 45
    63bc:	11 05       	cpc	r17, r1
    63be:	01 f1       	breq	.+64     	; 0x6400 <main+0x450>
    63c0:	0d ce       	rjmp	.-998    	; 0x5fdc <main+0x2c>
    63c2:	2b a1       	ldd	r18, Y+35	; 0x23
    63c4:	3c a1       	ldd	r19, Y+36	; 0x24
    63c6:	28 37       	cpi	r18, 0x78	; 120
    63c8:	31 05       	cpc	r19, r1
    63ca:	b9 f1       	breq	.+110    	; 0x643a <main+0x48a>
    63cc:	07 ce       	rjmp	.-1010   	; 0x5fdc <main+0x2c>
				{
				case '+' :
							MyCalculator.result_Integer = ((MyCalculator.num1) + (MyCalculator.num2));
    63ce:	2b 89       	ldd	r18, Y+19	; 0x13
    63d0:	3c 89       	ldd	r19, Y+20	; 0x14
    63d2:	4d 89       	ldd	r20, Y+21	; 0x15
    63d4:	5e 89       	ldd	r21, Y+22	; 0x16
    63d6:	8f 89       	ldd	r24, Y+23	; 0x17
    63d8:	98 8d       	ldd	r25, Y+24	; 0x18
    63da:	a9 8d       	ldd	r26, Y+25	; 0x19
    63dc:	ba 8d       	ldd	r27, Y+26	; 0x1a
    63de:	82 0f       	add	r24, r18
    63e0:	93 1f       	adc	r25, r19
    63e2:	a4 1f       	adc	r26, r20
    63e4:	b5 1f       	adc	r27, r21
    63e6:	8b 8f       	std	Y+27, r24	; 0x1b
    63e8:	9c 8f       	std	Y+28, r25	; 0x1c
    63ea:	ad 8f       	std	Y+29, r26	; 0x1d
    63ec:	be 8f       	std	Y+30, r27	; 0x1e
							LCD_enuWriteIntegerNum(MyCalculator.result_Integer);
    63ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    63f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    63f2:	ad 8d       	ldd	r26, Y+29	; 0x1d
    63f4:	be 8d       	ldd	r27, Y+30	; 0x1e
    63f6:	bc 01       	movw	r22, r24
    63f8:	cd 01       	movw	r24, r26
    63fa:	0e 94 41 23 	call	0x4682	; 0x4682 <LCD_enuWriteIntegerNum>
    63fe:	ee cd       	rjmp	.-1060   	; 0x5fdc <main+0x2c>
							break;
				case '-' :
							MyCalculator.result_Integer = MyCalculator.num1 - MyCalculator.num2;
    6400:	2b 89       	ldd	r18, Y+19	; 0x13
    6402:	3c 89       	ldd	r19, Y+20	; 0x14
    6404:	4d 89       	ldd	r20, Y+21	; 0x15
    6406:	5e 89       	ldd	r21, Y+22	; 0x16
    6408:	8f 89       	ldd	r24, Y+23	; 0x17
    640a:	98 8d       	ldd	r25, Y+24	; 0x18
    640c:	a9 8d       	ldd	r26, Y+25	; 0x19
    640e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6410:	79 01       	movw	r14, r18
    6412:	8a 01       	movw	r16, r20
    6414:	e8 1a       	sub	r14, r24
    6416:	f9 0a       	sbc	r15, r25
    6418:	0a 0b       	sbc	r16, r26
    641a:	1b 0b       	sbc	r17, r27
    641c:	d8 01       	movw	r26, r16
    641e:	c7 01       	movw	r24, r14
    6420:	8b 8f       	std	Y+27, r24	; 0x1b
    6422:	9c 8f       	std	Y+28, r25	; 0x1c
    6424:	ad 8f       	std	Y+29, r26	; 0x1d
    6426:	be 8f       	std	Y+30, r27	; 0x1e
							LCD_enuWriteIntegerNum(MyCalculator.result_Integer);
    6428:	8b 8d       	ldd	r24, Y+27	; 0x1b
    642a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    642c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    642e:	be 8d       	ldd	r27, Y+30	; 0x1e
    6430:	bc 01       	movw	r22, r24
    6432:	cd 01       	movw	r24, r26
    6434:	0e 94 41 23 	call	0x4682	; 0x4682 <LCD_enuWriteIntegerNum>
    6438:	d1 cd       	rjmp	.-1118   	; 0x5fdc <main+0x2c>
							break;
				case 'x' :
							MyCalculator.result_Integer = MyCalculator.num1 * MyCalculator.num2;
    643a:	8b 89       	ldd	r24, Y+19	; 0x13
    643c:	9c 89       	ldd	r25, Y+20	; 0x14
    643e:	ad 89       	ldd	r26, Y+21	; 0x15
    6440:	be 89       	ldd	r27, Y+22	; 0x16
    6442:	2f 89       	ldd	r18, Y+23	; 0x17
    6444:	38 8d       	ldd	r19, Y+24	; 0x18
    6446:	49 8d       	ldd	r20, Y+25	; 0x19
    6448:	5a 8d       	ldd	r21, Y+26	; 0x1a
    644a:	bc 01       	movw	r22, r24
    644c:	cd 01       	movw	r24, r26
    644e:	0e 94 57 33 	call	0x66ae	; 0x66ae <__mulsi3>
    6452:	dc 01       	movw	r26, r24
    6454:	cb 01       	movw	r24, r22
    6456:	8b 8f       	std	Y+27, r24	; 0x1b
    6458:	9c 8f       	std	Y+28, r25	; 0x1c
    645a:	ad 8f       	std	Y+29, r26	; 0x1d
    645c:	be 8f       	std	Y+30, r27	; 0x1e
							LCD_enuWriteIntegerNum(MyCalculator.result_Integer);
    645e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6460:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6462:	ad 8d       	ldd	r26, Y+29	; 0x1d
    6464:	be 8d       	ldd	r27, Y+30	; 0x1e
    6466:	bc 01       	movw	r22, r24
    6468:	cd 01       	movw	r24, r26
    646a:	0e 94 41 23 	call	0x4682	; 0x4682 <LCD_enuWriteIntegerNum>
    646e:	b6 cd       	rjmp	.-1172   	; 0x5fdc <main+0x2c>
							break;
				case '/' :
							if(MyCalculator.num2 == 0)
    6470:	8f 89       	ldd	r24, Y+23	; 0x17
    6472:	98 8d       	ldd	r25, Y+24	; 0x18
    6474:	a9 8d       	ldd	r26, Y+25	; 0x19
    6476:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6478:	00 97       	sbiw	r24, 0x00	; 0
    647a:	a1 05       	cpc	r26, r1
    647c:	b1 05       	cpc	r27, r1
    647e:	29 f4       	brne	.+10     	; 0x648a <main+0x4da>
							{
								LCD_enuWriteString((u8*)"Undefined Value");
    6480:	80 e6       	ldi	r24, 0x60	; 96
    6482:	90 e0       	ldi	r25, 0x00	; 0
    6484:	0e 94 0b 23 	call	0x4616	; 0x4616 <LCD_enuWriteString>
    6488:	a9 cd       	rjmp	.-1198   	; 0x5fdc <main+0x2c>
							}else
							{

								MyCalculator.result_float = ((f32)MyCalculator.num1) / MyCalculator.num2;
    648a:	8b 89       	ldd	r24, Y+19	; 0x13
    648c:	9c 89       	ldd	r25, Y+20	; 0x14
    648e:	ad 89       	ldd	r26, Y+21	; 0x15
    6490:	be 89       	ldd	r27, Y+22	; 0x16
    6492:	bc 01       	movw	r22, r24
    6494:	cd 01       	movw	r24, r26
    6496:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    649a:	7b 01       	movw	r14, r22
    649c:	8c 01       	movw	r16, r24
    649e:	8f 89       	ldd	r24, Y+23	; 0x17
    64a0:	98 8d       	ldd	r25, Y+24	; 0x18
    64a2:	a9 8d       	ldd	r26, Y+25	; 0x19
    64a4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    64a6:	bc 01       	movw	r22, r24
    64a8:	cd 01       	movw	r24, r26
    64aa:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    64ae:	9b 01       	movw	r18, r22
    64b0:	ac 01       	movw	r20, r24
    64b2:	c8 01       	movw	r24, r16
    64b4:	b7 01       	movw	r22, r14
    64b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    64ba:	dc 01       	movw	r26, r24
    64bc:	cb 01       	movw	r24, r22
    64be:	8f 8f       	std	Y+31, r24	; 0x1f
    64c0:	98 a3       	std	Y+32, r25	; 0x20
    64c2:	a9 a3       	std	Y+33, r26	; 0x21
    64c4:	ba a3       	std	Y+34, r27	; 0x22
								if(MyCalculator.Sign_result_float_Flag == NEGATIVE)
    64c6:	88 89       	ldd	r24, Y+16	; 0x10
    64c8:	88 70       	andi	r24, 0x08	; 8
    64ca:	88 23       	and	r24, r24
    64cc:	19 f0       	breq	.+6      	; 0x64d4 <main+0x524>
								{
									LCD_enuWriteData('-');
    64ce:	8d e2       	ldi	r24, 0x2D	; 45
    64d0:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <LCD_enuWriteData>
								}
								LCD_enuWriteFloatNum(MyCalculator.result_float);
    64d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    64d6:	98 a1       	ldd	r25, Y+32	; 0x20
    64d8:	a9 a1       	ldd	r26, Y+33	; 0x21
    64da:	ba a1       	ldd	r27, Y+34	; 0x22
    64dc:	bc 01       	movw	r22, r24
    64de:	cd 01       	movw	r24, r26
    64e0:	0e 94 06 24 	call	0x480c	; 0x480c <LCD_enuWriteFloatNum>
    64e4:	7b cd       	rjmp	.-1290   	; 0x5fdc <main+0x2c>
							}
							break;
				}
			}
		}else if(MyCalculator.Error_Flag == RAISED)
    64e6:	88 89       	ldd	r24, Y+16	; 0x10
    64e8:	81 70       	andi	r24, 0x01	; 1
    64ea:	88 23       	and	r24, r24
    64ec:	09 f4       	brne	.+2      	; 0x64f0 <main+0x540>
    64ee:	76 cd       	rjmp	.-1300   	; 0x5fdc <main+0x2c>
		{
			LCD_enuWriteCommand(0x01);
    64f0:	81 e0       	ldi	r24, 0x01	; 1
    64f2:	0e 94 c9 22 	call	0x4592	; 0x4592 <LCD_enuWriteCommand>
			LCD_enuWriteString((u8*)"Error Detected!");
    64f6:	80 e7       	ldi	r24, 0x70	; 112
    64f8:	90 e0       	ldi	r25, 0x00	; 0
    64fa:	0e 94 0b 23 	call	0x4616	; 0x4616 <LCD_enuWriteString>
			Calculator_Init(&MyCalculator);
    64fe:	ce 01       	movw	r24, r28
    6500:	40 96       	adiw	r24, 0x10	; 16
    6502:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <Calculator_Init>
    6506:	80 e0       	ldi	r24, 0x00	; 0
    6508:	90 e0       	ldi	r25, 0x00	; 0
    650a:	aa ef       	ldi	r26, 0xFA	; 250
    650c:	b3 e4       	ldi	r27, 0x43	; 67
    650e:	8b 87       	std	Y+11, r24	; 0x0b
    6510:	9c 87       	std	Y+12, r25	; 0x0c
    6512:	ad 87       	std	Y+13, r26	; 0x0d
    6514:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6516:	6b 85       	ldd	r22, Y+11	; 0x0b
    6518:	7c 85       	ldd	r23, Y+12	; 0x0c
    651a:	8d 85       	ldd	r24, Y+13	; 0x0d
    651c:	9e 85       	ldd	r25, Y+14	; 0x0e
    651e:	20 e0       	ldi	r18, 0x00	; 0
    6520:	30 e0       	ldi	r19, 0x00	; 0
    6522:	4a e7       	ldi	r20, 0x7A	; 122
    6524:	55 e4       	ldi	r21, 0x45	; 69
    6526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    652a:	dc 01       	movw	r26, r24
    652c:	cb 01       	movw	r24, r22
    652e:	8f 83       	std	Y+7, r24	; 0x07
    6530:	98 87       	std	Y+8, r25	; 0x08
    6532:	a9 87       	std	Y+9, r26	; 0x09
    6534:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6536:	6f 81       	ldd	r22, Y+7	; 0x07
    6538:	78 85       	ldd	r23, Y+8	; 0x08
    653a:	89 85       	ldd	r24, Y+9	; 0x09
    653c:	9a 85       	ldd	r25, Y+10	; 0x0a
    653e:	20 e0       	ldi	r18, 0x00	; 0
    6540:	30 e0       	ldi	r19, 0x00	; 0
    6542:	40 e8       	ldi	r20, 0x80	; 128
    6544:	5f e3       	ldi	r21, 0x3F	; 63
    6546:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    654a:	88 23       	and	r24, r24
    654c:	2c f4       	brge	.+10     	; 0x6558 <main+0x5a8>
		__ticks = 1;
    654e:	81 e0       	ldi	r24, 0x01	; 1
    6550:	90 e0       	ldi	r25, 0x00	; 0
    6552:	9e 83       	std	Y+6, r25	; 0x06
    6554:	8d 83       	std	Y+5, r24	; 0x05
    6556:	3f c0       	rjmp	.+126    	; 0x65d6 <main+0x626>
	else if (__tmp > 65535)
    6558:	6f 81       	ldd	r22, Y+7	; 0x07
    655a:	78 85       	ldd	r23, Y+8	; 0x08
    655c:	89 85       	ldd	r24, Y+9	; 0x09
    655e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6560:	20 e0       	ldi	r18, 0x00	; 0
    6562:	3f ef       	ldi	r19, 0xFF	; 255
    6564:	4f e7       	ldi	r20, 0x7F	; 127
    6566:	57 e4       	ldi	r21, 0x47	; 71
    6568:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    656c:	18 16       	cp	r1, r24
    656e:	4c f5       	brge	.+82     	; 0x65c2 <main+0x612>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6570:	6b 85       	ldd	r22, Y+11	; 0x0b
    6572:	7c 85       	ldd	r23, Y+12	; 0x0c
    6574:	8d 85       	ldd	r24, Y+13	; 0x0d
    6576:	9e 85       	ldd	r25, Y+14	; 0x0e
    6578:	20 e0       	ldi	r18, 0x00	; 0
    657a:	30 e0       	ldi	r19, 0x00	; 0
    657c:	40 e2       	ldi	r20, 0x20	; 32
    657e:	51 e4       	ldi	r21, 0x41	; 65
    6580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6584:	dc 01       	movw	r26, r24
    6586:	cb 01       	movw	r24, r22
    6588:	bc 01       	movw	r22, r24
    658a:	cd 01       	movw	r24, r26
    658c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6590:	dc 01       	movw	r26, r24
    6592:	cb 01       	movw	r24, r22
    6594:	9e 83       	std	Y+6, r25	; 0x06
    6596:	8d 83       	std	Y+5, r24	; 0x05
    6598:	0f c0       	rjmp	.+30     	; 0x65b8 <main+0x608>
    659a:	80 e9       	ldi	r24, 0x90	; 144
    659c:	91 e0       	ldi	r25, 0x01	; 1
    659e:	9c 83       	std	Y+4, r25	; 0x04
    65a0:	8b 83       	std	Y+3, r24	; 0x03
    65a2:	8b 81       	ldd	r24, Y+3	; 0x03
    65a4:	9c 81       	ldd	r25, Y+4	; 0x04
    65a6:	01 97       	sbiw	r24, 0x01	; 1
    65a8:	f1 f7       	brne	.-4      	; 0x65a6 <main+0x5f6>
    65aa:	9c 83       	std	Y+4, r25	; 0x04
    65ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    65ae:	8d 81       	ldd	r24, Y+5	; 0x05
    65b0:	9e 81       	ldd	r25, Y+6	; 0x06
    65b2:	01 97       	sbiw	r24, 0x01	; 1
    65b4:	9e 83       	std	Y+6, r25	; 0x06
    65b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65b8:	8d 81       	ldd	r24, Y+5	; 0x05
    65ba:	9e 81       	ldd	r25, Y+6	; 0x06
    65bc:	00 97       	sbiw	r24, 0x00	; 0
    65be:	69 f7       	brne	.-38     	; 0x659a <main+0x5ea>
    65c0:	14 c0       	rjmp	.+40     	; 0x65ea <main+0x63a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65c2:	6f 81       	ldd	r22, Y+7	; 0x07
    65c4:	78 85       	ldd	r23, Y+8	; 0x08
    65c6:	89 85       	ldd	r24, Y+9	; 0x09
    65c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    65ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65ce:	dc 01       	movw	r26, r24
    65d0:	cb 01       	movw	r24, r22
    65d2:	9e 83       	std	Y+6, r25	; 0x06
    65d4:	8d 83       	std	Y+5, r24	; 0x05
    65d6:	8d 81       	ldd	r24, Y+5	; 0x05
    65d8:	9e 81       	ldd	r25, Y+6	; 0x06
    65da:	9a 83       	std	Y+2, r25	; 0x02
    65dc:	89 83       	std	Y+1, r24	; 0x01
    65de:	89 81       	ldd	r24, Y+1	; 0x01
    65e0:	9a 81       	ldd	r25, Y+2	; 0x02
    65e2:	01 97       	sbiw	r24, 0x01	; 1
    65e4:	f1 f7       	brne	.-4      	; 0x65e2 <main+0x632>
    65e6:	9a 83       	std	Y+2, r25	; 0x02
    65e8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			LCD_enuWriteCommand(0x01);
    65ea:	81 e0       	ldi	r24, 0x01	; 1
    65ec:	0e 94 c9 22 	call	0x4592	; 0x4592 <LCD_enuWriteCommand>
    65f0:	f5 cc       	rjmp	.-1558   	; 0x5fdc <main+0x2c>

000065f2 <Calculator_Init>:
		}
	}
}
void Calculator_Init(Calculator *ptrStruct)
{
    65f2:	df 93       	push	r29
    65f4:	cf 93       	push	r28
    65f6:	00 d0       	rcall	.+0      	; 0x65f8 <Calculator_Init+0x6>
    65f8:	cd b7       	in	r28, 0x3d	; 61
    65fa:	de b7       	in	r29, 0x3e	; 62
    65fc:	9a 83       	std	Y+2, r25	; 0x02
    65fe:	89 83       	std	Y+1, r24	; 0x01
	ptrStruct-> key = NOT_PRESSED;
    6600:	e9 81       	ldd	r30, Y+1	; 0x01
    6602:	fa 81       	ldd	r31, Y+2	; 0x02
    6604:	8f ef       	ldi	r24, 0xFF	; 255
    6606:	82 83       	std	Z+2, r24	; 0x02
	ptrStruct-> Sign_Flag1=POSTIVE;
    6608:	e9 81       	ldd	r30, Y+1	; 0x01
    660a:	fa 81       	ldd	r31, Y+2	; 0x02
    660c:	80 81       	ld	r24, Z
    660e:	8d 7f       	andi	r24, 0xFD	; 253
    6610:	80 83       	st	Z, r24
	ptrStruct-> Sign_Flag2=POSTIVE;
    6612:	e9 81       	ldd	r30, Y+1	; 0x01
    6614:	fa 81       	ldd	r31, Y+2	; 0x02
    6616:	80 81       	ld	r24, Z
    6618:	8b 7f       	andi	r24, 0xFB	; 251
    661a:	80 83       	st	Z, r24
	ptrStruct-> Sign_result_float_Flag=POSTIVE;
    661c:	e9 81       	ldd	r30, Y+1	; 0x01
    661e:	fa 81       	ldd	r31, Y+2	; 0x02
    6620:	80 81       	ld	r24, Z
    6622:	87 7f       	andi	r24, 0xF7	; 247
    6624:	80 83       	st	Z, r24
	ptrStruct-> Error_Flag=EMPTY;
    6626:	e9 81       	ldd	r30, Y+1	; 0x01
    6628:	fa 81       	ldd	r31, Y+2	; 0x02
    662a:	80 81       	ld	r24, Z
    662c:	8e 7f       	andi	r24, 0xFE	; 254
    662e:	80 83       	st	Z, r24
	ptrStruct-> First_Entery_Flag=RAISED;
    6630:	e9 81       	ldd	r30, Y+1	; 0x01
    6632:	fa 81       	ldd	r31, Y+2	; 0x02
    6634:	80 81       	ld	r24, Z
    6636:	80 61       	ori	r24, 0x10	; 16
    6638:	80 83       	st	Z, r24
	ptrStruct-> Second_Entery_Flag=EMPTY;
    663a:	e9 81       	ldd	r30, Y+1	; 0x01
    663c:	fa 81       	ldd	r31, Y+2	; 0x02
    663e:	80 81       	ld	r24, Z
    6640:	8f 7d       	andi	r24, 0xDF	; 223
    6642:	80 83       	st	Z, r24
	ptrStruct-> First_First_Digit_Flag=RAISED;
    6644:	e9 81       	ldd	r30, Y+1	; 0x01
    6646:	fa 81       	ldd	r31, Y+2	; 0x02
    6648:	80 81       	ld	r24, Z
    664a:	80 64       	ori	r24, 0x40	; 64
    664c:	80 83       	st	Z, r24
	ptrStruct-> Second_First_Digit_Flag=EMPTY;
    664e:	e9 81       	ldd	r30, Y+1	; 0x01
    6650:	fa 81       	ldd	r31, Y+2	; 0x02
    6652:	80 81       	ld	r24, Z
    6654:	8f 77       	andi	r24, 0x7F	; 127
    6656:	80 83       	st	Z, r24
	ptrStruct-> num1=EMPTY;
    6658:	e9 81       	ldd	r30, Y+1	; 0x01
    665a:	fa 81       	ldd	r31, Y+2	; 0x02
    665c:	13 82       	std	Z+3, r1	; 0x03
    665e:	14 82       	std	Z+4, r1	; 0x04
    6660:	15 82       	std	Z+5, r1	; 0x05
    6662:	16 82       	std	Z+6, r1	; 0x06
	ptrStruct-> num2=EMPTY;
    6664:	e9 81       	ldd	r30, Y+1	; 0x01
    6666:	fa 81       	ldd	r31, Y+2	; 0x02
    6668:	17 82       	std	Z+7, r1	; 0x07
    666a:	10 86       	std	Z+8, r1	; 0x08
    666c:	11 86       	std	Z+9, r1	; 0x09
    666e:	12 86       	std	Z+10, r1	; 0x0a
	ptrStruct-> operation = EMPTY;
    6670:	e9 81       	ldd	r30, Y+1	; 0x01
    6672:	fa 81       	ldd	r31, Y+2	; 0x02
    6674:	81 81       	ldd	r24, Z+1	; 0x01
    6676:	81 70       	andi	r24, 0x01	; 1
    6678:	81 83       	std	Z+1, r24	; 0x01
	ptrStruct-> result_flag =EMPTY;
    667a:	e9 81       	ldd	r30, Y+1	; 0x01
    667c:	fa 81       	ldd	r31, Y+2	; 0x02
    667e:	81 81       	ldd	r24, Z+1	; 0x01
    6680:	8e 7f       	andi	r24, 0xFE	; 254
    6682:	81 83       	std	Z+1, r24	; 0x01
	ptrStruct-> result_float=EMPTY;
    6684:	e9 81       	ldd	r30, Y+1	; 0x01
    6686:	fa 81       	ldd	r31, Y+2	; 0x02
    6688:	80 e0       	ldi	r24, 0x00	; 0
    668a:	90 e0       	ldi	r25, 0x00	; 0
    668c:	a0 e0       	ldi	r26, 0x00	; 0
    668e:	b0 e0       	ldi	r27, 0x00	; 0
    6690:	87 87       	std	Z+15, r24	; 0x0f
    6692:	90 8b       	std	Z+16, r25	; 0x10
    6694:	a1 8b       	std	Z+17, r26	; 0x11
    6696:	b2 8b       	std	Z+18, r27	; 0x12
	ptrStruct-> result_Integer=EMPTY;
    6698:	e9 81       	ldd	r30, Y+1	; 0x01
    669a:	fa 81       	ldd	r31, Y+2	; 0x02
    669c:	13 86       	std	Z+11, r1	; 0x0b
    669e:	14 86       	std	Z+12, r1	; 0x0c
    66a0:	15 86       	std	Z+13, r1	; 0x0d
    66a2:	16 86       	std	Z+14, r1	; 0x0e
}
    66a4:	0f 90       	pop	r0
    66a6:	0f 90       	pop	r0
    66a8:	cf 91       	pop	r28
    66aa:	df 91       	pop	r29
    66ac:	08 95       	ret

000066ae <__mulsi3>:
    66ae:	62 9f       	mul	r22, r18
    66b0:	d0 01       	movw	r26, r0
    66b2:	73 9f       	mul	r23, r19
    66b4:	f0 01       	movw	r30, r0
    66b6:	82 9f       	mul	r24, r18
    66b8:	e0 0d       	add	r30, r0
    66ba:	f1 1d       	adc	r31, r1
    66bc:	64 9f       	mul	r22, r20
    66be:	e0 0d       	add	r30, r0
    66c0:	f1 1d       	adc	r31, r1
    66c2:	92 9f       	mul	r25, r18
    66c4:	f0 0d       	add	r31, r0
    66c6:	83 9f       	mul	r24, r19
    66c8:	f0 0d       	add	r31, r0
    66ca:	74 9f       	mul	r23, r20
    66cc:	f0 0d       	add	r31, r0
    66ce:	65 9f       	mul	r22, r21
    66d0:	f0 0d       	add	r31, r0
    66d2:	99 27       	eor	r25, r25
    66d4:	72 9f       	mul	r23, r18
    66d6:	b0 0d       	add	r27, r0
    66d8:	e1 1d       	adc	r30, r1
    66da:	f9 1f       	adc	r31, r25
    66dc:	63 9f       	mul	r22, r19
    66de:	b0 0d       	add	r27, r0
    66e0:	e1 1d       	adc	r30, r1
    66e2:	f9 1f       	adc	r31, r25
    66e4:	bd 01       	movw	r22, r26
    66e6:	cf 01       	movw	r24, r30
    66e8:	11 24       	eor	r1, r1
    66ea:	08 95       	ret

000066ec <__udivmodsi4>:
    66ec:	a1 e2       	ldi	r26, 0x21	; 33
    66ee:	1a 2e       	mov	r1, r26
    66f0:	aa 1b       	sub	r26, r26
    66f2:	bb 1b       	sub	r27, r27
    66f4:	fd 01       	movw	r30, r26
    66f6:	0d c0       	rjmp	.+26     	; 0x6712 <__udivmodsi4_ep>

000066f8 <__udivmodsi4_loop>:
    66f8:	aa 1f       	adc	r26, r26
    66fa:	bb 1f       	adc	r27, r27
    66fc:	ee 1f       	adc	r30, r30
    66fe:	ff 1f       	adc	r31, r31
    6700:	a2 17       	cp	r26, r18
    6702:	b3 07       	cpc	r27, r19
    6704:	e4 07       	cpc	r30, r20
    6706:	f5 07       	cpc	r31, r21
    6708:	20 f0       	brcs	.+8      	; 0x6712 <__udivmodsi4_ep>
    670a:	a2 1b       	sub	r26, r18
    670c:	b3 0b       	sbc	r27, r19
    670e:	e4 0b       	sbc	r30, r20
    6710:	f5 0b       	sbc	r31, r21

00006712 <__udivmodsi4_ep>:
    6712:	66 1f       	adc	r22, r22
    6714:	77 1f       	adc	r23, r23
    6716:	88 1f       	adc	r24, r24
    6718:	99 1f       	adc	r25, r25
    671a:	1a 94       	dec	r1
    671c:	69 f7       	brne	.-38     	; 0x66f8 <__udivmodsi4_loop>
    671e:	60 95       	com	r22
    6720:	70 95       	com	r23
    6722:	80 95       	com	r24
    6724:	90 95       	com	r25
    6726:	9b 01       	movw	r18, r22
    6728:	ac 01       	movw	r20, r24
    672a:	bd 01       	movw	r22, r26
    672c:	cf 01       	movw	r24, r30
    672e:	08 95       	ret

00006730 <__divmodsi4>:
    6730:	97 fb       	bst	r25, 7
    6732:	09 2e       	mov	r0, r25
    6734:	05 26       	eor	r0, r21
    6736:	0e d0       	rcall	.+28     	; 0x6754 <__divmodsi4_neg1>
    6738:	57 fd       	sbrc	r21, 7
    673a:	04 d0       	rcall	.+8      	; 0x6744 <__divmodsi4_neg2>
    673c:	d7 df       	rcall	.-82     	; 0x66ec <__udivmodsi4>
    673e:	0a d0       	rcall	.+20     	; 0x6754 <__divmodsi4_neg1>
    6740:	00 1c       	adc	r0, r0
    6742:	38 f4       	brcc	.+14     	; 0x6752 <__divmodsi4_exit>

00006744 <__divmodsi4_neg2>:
    6744:	50 95       	com	r21
    6746:	40 95       	com	r20
    6748:	30 95       	com	r19
    674a:	21 95       	neg	r18
    674c:	3f 4f       	sbci	r19, 0xFF	; 255
    674e:	4f 4f       	sbci	r20, 0xFF	; 255
    6750:	5f 4f       	sbci	r21, 0xFF	; 255

00006752 <__divmodsi4_exit>:
    6752:	08 95       	ret

00006754 <__divmodsi4_neg1>:
    6754:	f6 f7       	brtc	.-4      	; 0x6752 <__divmodsi4_exit>
    6756:	90 95       	com	r25
    6758:	80 95       	com	r24
    675a:	70 95       	com	r23
    675c:	61 95       	neg	r22
    675e:	7f 4f       	sbci	r23, 0xFF	; 255
    6760:	8f 4f       	sbci	r24, 0xFF	; 255
    6762:	9f 4f       	sbci	r25, 0xFF	; 255
    6764:	08 95       	ret

00006766 <__prologue_saves__>:
    6766:	2f 92       	push	r2
    6768:	3f 92       	push	r3
    676a:	4f 92       	push	r4
    676c:	5f 92       	push	r5
    676e:	6f 92       	push	r6
    6770:	7f 92       	push	r7
    6772:	8f 92       	push	r8
    6774:	9f 92       	push	r9
    6776:	af 92       	push	r10
    6778:	bf 92       	push	r11
    677a:	cf 92       	push	r12
    677c:	df 92       	push	r13
    677e:	ef 92       	push	r14
    6780:	ff 92       	push	r15
    6782:	0f 93       	push	r16
    6784:	1f 93       	push	r17
    6786:	cf 93       	push	r28
    6788:	df 93       	push	r29
    678a:	cd b7       	in	r28, 0x3d	; 61
    678c:	de b7       	in	r29, 0x3e	; 62
    678e:	ca 1b       	sub	r28, r26
    6790:	db 0b       	sbc	r29, r27
    6792:	0f b6       	in	r0, 0x3f	; 63
    6794:	f8 94       	cli
    6796:	de bf       	out	0x3e, r29	; 62
    6798:	0f be       	out	0x3f, r0	; 63
    679a:	cd bf       	out	0x3d, r28	; 61
    679c:	09 94       	ijmp

0000679e <__epilogue_restores__>:
    679e:	2a 88       	ldd	r2, Y+18	; 0x12
    67a0:	39 88       	ldd	r3, Y+17	; 0x11
    67a2:	48 88       	ldd	r4, Y+16	; 0x10
    67a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    67a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    67a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    67aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    67ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    67ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    67b0:	b9 84       	ldd	r11, Y+9	; 0x09
    67b2:	c8 84       	ldd	r12, Y+8	; 0x08
    67b4:	df 80       	ldd	r13, Y+7	; 0x07
    67b6:	ee 80       	ldd	r14, Y+6	; 0x06
    67b8:	fd 80       	ldd	r15, Y+5	; 0x05
    67ba:	0c 81       	ldd	r16, Y+4	; 0x04
    67bc:	1b 81       	ldd	r17, Y+3	; 0x03
    67be:	aa 81       	ldd	r26, Y+2	; 0x02
    67c0:	b9 81       	ldd	r27, Y+1	; 0x01
    67c2:	ce 0f       	add	r28, r30
    67c4:	d1 1d       	adc	r29, r1
    67c6:	0f b6       	in	r0, 0x3f	; 63
    67c8:	f8 94       	cli
    67ca:	de bf       	out	0x3e, r29	; 62
    67cc:	0f be       	out	0x3f, r0	; 63
    67ce:	cd bf       	out	0x3d, r28	; 61
    67d0:	ed 01       	movw	r28, r26
    67d2:	08 95       	ret

000067d4 <_exit>:
    67d4:	f8 94       	cli

000067d6 <__stop_program>:
    67d6:	ff cf       	rjmp	.-2      	; 0x67d6 <__stop_program>
